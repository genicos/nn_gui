{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/Modal.svelte","../../src/Switch.svelte","../../src/define_network_objects.js","../../src/mouse_network_interaction.js","../../src/network_logic.js","../../src/gui_logic.js","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape_attribute_value(value.toString())}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.46.6' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","<!-- Taken from Svelte website exmaples -->\n<!-- \t* Modified as needed -->\n\n<script context=\"module\" lang=\"ts\">\n\tlet onTop   //keeping track of which open modal is on top\n\tconst modals={}  //all modals get registered here for easy future access\n\t\n\t// \treturns an object for the modal specified by `id`, which contains the API functions (`open` and `close` )\n\texport function getModal(id=''){\n\t\treturn modals[id]\n\t}\n</script>\n\n<script lang=\"ts\">\nimport {onDestroy} from 'svelte'\n\t\nlet topDiv\nlet visible=false\nlet prevOnTop\nlet closeCallback\n\nexport let id=''\n\nfunction keyPress(ev){\n\t//only respond if the current modal is the top one\n\tif(ev.key==\"Escape\" && onTop==topDiv) close() //ESC\n}\n\n/**  API **/\nfunction open(callback){\n\tcloseCallback=callback\n\tif(visible) return\n\tprevOnTop=onTop\n\tonTop=topDiv\n\twindow.addEventListener(\"keydown\",keyPress)\n\t\n\t//this prevents scrolling of the main window on larger screens\n\tdocument.body.style.overflow=\"hidden\" \n\n\tvisible=true\n\t//Move the modal in the DOM to be the last child of <BODY> so that it can be on top of everything\n\tdocument.body.appendChild(topDiv)\n}\n\t\nfunction close(retVal){\n\tif(!visible) return\n\twindow.removeEventListener(\"keydown\",keyPress)\n\tonTop=prevOnTop\n\tif(onTop==null) document.body.style.overflow=\"\"\n\tvisible=false\n\tif(closeCallback) closeCallback(retVal)\n}\n\t\n//expose the API\nmodals[id]={open,close}\n\t\nonDestroy(()=>{\n\tdelete modals[id]\n\twindow.removeEventListener(\"keydown\",keyPress)\n})\n\t\n</script>\n\n<div id=\"topModal\" class:visible bind:this={topDiv} on:click={()=>close()}>\n\t<div id='modal' on:click|stopPropagation={()=>{}}>\n\t\t<svg id=\"close\" on:click={()=>close()} viewBox=\"0 0 12 12\">\n\t\t\t<circle cx=6 cy=6 r=6 />\n\t\t\t<line x1=3 y1=3 x2=9 y2=9 />\n\t\t\t<line x1=9 y1=3 x2=3 y2=9 />\n\t\t</svg>\n\t\t<div id='modal-content'>\n\t\t\t<slot></slot>\n\t\t</div>\n\t</div>\n</div>\n\n<style>\n\t#topModal {\n\t\tvisibility: hidden;\n\t\tz-index: 9999;\n\t\tposition: fixed;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tbackground: #4448;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t}\n\t#modal {\n\t\tfont-family: \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n\t\tfont-size: 20px;\n\t\tposition: relative;\n\t\tborder-radius: 6px;\n\t\tbackground: white;\n\t\tfilter: drop-shadow(5px 5px 5px #555);\n\t\tpadding: 1em;\n\t\tmargin: 200px;\n\t}\n\n\t.visible {\n\t\tvisibility: visible !important;\n\t}\n\n    #close {\n\t\tposition: absolute;\n\t\ttop:-12px;\n\t\tright:-12px;\n\t\twidth:24px;\n\t\theight:24px;\n\t\tcursor: pointer;\n\t\tborder-color: rgba(0, 0, 0, 0.8);\n\t\tborder-width: thin;\n\t\tfill: white;\n\t\ttransition: transform 0.3s;\n\t}\t\n\n\t#close:hover {\n\t\tfill: rgba(0, 0, 0, 0.8);\n\t}\n\n\t#close line {\n\t\tstroke: rgba(0, 0, 0, 0.8);\n\t\tstroke-width: 1;\n\t}\n\t#close:hover line {\n\t\tstroke: white;\n\t\tstroke-width: 1;\n\t}\n\n\t#close:focus {\n    \tborder-color: #3399ff;\n    \tbox-shadow: 0 0 0 2px #3399ff;\n  \t}\n\n\t#modal-content {\n\t\tmax-width: calc(100vw - 20px);\n\t\tmax-height: calc(100vh - 20px);\n\t\toverflow: auto;\n\t}\n</style>","<!-- Taken from Svelte website exmaples -->\n<!-- \t* Modified as needed -->\n\n<script>\n    // based on suggestions from:\n    // Inclusive Components by Heydon Pickering https://inclusive-components.design/toggle-button/\n    // On Designing and Building Toggle Switches by Sara Soueidan https://www.sarasoueidan.com/blog/toggle-switch-design/\n    // and this example by Scott O'hara https://codepen.io/scottohara/pen/zLZwNv \n\n\n    export let label;\n    export let design = 'inner label'\n    export let options = [];\n    export let fontSize = 16;\n    export let value = 'on';\n\n    let checked = true;\n\n\n\t\tconst uniqueID = Math.floor(Math.random() * 100)\n\n    function handleClick(event){\n        const target = event.target\n\n        const state = target.getAttribute('aria-checked')\n\n        checked = state === 'true' ? false : true\n\n        value = checked === true ? 'on' : 'off'\n    }\n\t\n\t  const slugify = (str = \"\") =>\n    str.toLowerCase().replace(/ /g, \"-\").replace(/\\./g, \"\");\n\n</script>\n\n{#if design == 'inner'}\n<div class=\"s s--inner\">\n    <span id={`switch-${uniqueID}`}>{label}</span>\n    <button\n        role=\"switch\"\n        aria-checked={checked}\n        aria-labelledby={`switch-${uniqueID}`}\n        on:click={handleClick}>\n            <span>on</span>\n            <span>off</span>\n    </button>\n</div>\n{:else if design == 'I'}\n<div class=\"s s--inner\">\n    <span id={`switch-${uniqueID}`}>{label}</span>\n    <button\n        role=\"switch\"\n        aria-checked={checked}\n        aria-labelledby={`switch-${uniqueID}`}\n        on:click={handleClick}>\n            <span>None</span>\n            <span>Input</span>\n    </button>\n</div>\n{:else if design == 'O'}\n<div class=\"s s--inner\">\n    <span id={`switch-${uniqueID}`}>{label}</span>\n    <button\n        role=\"switch\"\n        aria-checked={checked}\n        aria-labelledby={`switch-${uniqueID}`}\n        on:click={handleClick}>\n            <span>None</span>\n            <span>Output</span>\n    </button>\n</div>\n{:else if design == 'slider'}\n<div class=\"s s--slider\" style=\"font-size:{fontSize}px\">\n    <span id={`switch-${uniqueID}`}>{label}</span>\n    <button\n        role=\"switch\"\n        aria-checked={checked}\n        aria-labelledby={`switch-${uniqueID}`}\n        on:click={handleClick}>\n    </button>\n</div>\n{:else}\n<div class=\"s s--multi\">\n    <div role='radiogroup'\n\t\t\t\t class=\"group-container\"\n\t\t\t\t aria-labelledby={`label-${uniqueID}`}\n\t\t\t\t style=\"font-size:{fontSize}px\" \n\t\t\t\t id={`group-${uniqueID}`}>\n    <div class='legend' id={`label-${uniqueID}`}>{label}</div>\n        {#each options as option}\n            <input type=\"radio\" id={`${option}-${uniqueID}`} value={option} bind:group={value}>\n            <label for={`${option}-${uniqueID}`}>\n                {option}\n            </label> \n        {/each}\n    </div>\n</div>\n\n{/if}\n\n<style>\n\t\t\t:root {\n\t\t--accent-color: #39c0ba;\n\t\t--gray: #ccc;\n\t}\n    /* Inner Design Option */\n    .s--inner button {\n        padding: 0.5em;\n        background-color: #fff;\n        border: 1px solid var(--gray);\n    }\n    [role='switch'][aria-checked='true'] :first-child,\n    [role='switch'][aria-checked='false'] :last-child {\n        display: none;\n        color: #fff;\n    }\n\n    .s--inner button span {\n        user-select: none;\n        pointer-events:none;\n        padding: 0.25em;\n    }\n\n    .s--inner button:focus {\n        outline: var(--accent-color) solid 1px;\n    }\n\n    /* Slider Design Option */\n\n    .s--slider {\n        display: flex;\n        align-items: center;\n    }\n\n    .s--slider button {\n        width: 3em;\n        height: 1.6em;\n        position: relative;\n        margin: 0 0 0 0.5em;\n        background: var(--gray);\n        border: none;\n    }\n\n    .s--slider button::before {\n        content: '';\n        position: absolute;\n        width: 1.3em;\n        height: 1.3em;\n        background: #fff;\n        top: 0.13em;\n        right: 1.5em;\n        transition: transform 0.3s;\n    }\n\n    .s--slider button[aria-checked='true']{\n        background-color: var(--accent-color)\n    }\n\n    .s--slider button[aria-checked='true']::before{\n        transform: translateX(1.3em);\n        transition: transform 0.3s;\n    }\n\n    .s--slider button:focus {\n        box-shadow: 0 0px 0px 1px var(--accent-color);\n    }\n\n    /* Multi Design Option */\n\n    /* Based on suggestions from Sara Soueidan https://www.sarasoueidan.com/blog/toggle-switch-design/\n    and this example from Scott O'hara https://codepen.io/scottohara/pen/zLZwNv */\n\n    .s--multi .group-container {\n        border: none;\n        padding: 0;\n        white-space: nowrap;\n    }\n\n    /* .s--multi legend {\n    font-size: 2px;\n    opacity: 0;\n    position: absolute;\n    } */\n\n    .s--multi label {\n        display: inline-block;\n        line-height: 1.6;\n        position: relative;\n        z-index: 2;\n    }\n\n    .s--multi input {\n        opacity: 0;\n        position: absolute;\n    }\n\n    .s--multi label:first-of-type {\n        padding-right: 5em;\n    }\n\n    .s--multi label:last-child {\n        margin-left: -5em;\n        padding-left: 5em;\n    }\n\n    .s--multi:focus-within label:first-of-type:after {\n        box-shadow: 0 0px 8px var(--accent-color);\n        border-radius: 1.5em;\n    }\n\n\n\n    /* making the switch UI.  */\n    .s--multi label:first-of-type:before,\n    .s--multi label:first-of-type:after {\n        content: \"\";\n        height: 1.25em;\n        overflow: hidden;\n        pointer-events: none;\n        position: absolute;\n        vertical-align: middle;\n    }\n\n    .s--multi label:first-of-type:before {\n        border-radius: 100%;\n        z-index: 2;\n        position: absolute;\n        width: 1.2em;\n        height: 1.2em;\n        background: #fff;\n        top: 0.2em;\n        right: 1.2em;\n        transition: transform 0.3s;\n    }\n\n    .s--multi label:first-of-type:after {\n        background: var(--accent-color);\n        border-radius: 1em;\n        margin: 0 1em;\n        transition: background .2s ease-in-out;\n        width: 3em;\n        height: 1.6em;\n    }\n\n    .s--multi input:first-of-type:checked ~ label:first-of-type:after {\n        background: var(--gray);\n    }\n\n    .s--multi input:first-of-type:checked ~ label:first-of-type:before {\n        transform: translateX(-1.4em);\n    }\n\n    .s--multi input:last-of-type:checked ~ label:last-of-type {\n        z-index: 1;\n    }\n\n    .s--multi input:focus {\n        box-shadow: 0 0px 8px var(--accent-color);\n        border-radius: 1.5em;\n    }\n\n    /* gravy */ \n\n    /* Inner Design Option */\n    [role='switch'][aria-checked='true'] :first-child,\n    [role='switch'][aria-checked='false'] :last-child {\n        border-radius: 0.25em;\n        background: var(--accent-color);\n        display: inline-block;\n    }\n\n    .s--inner button:focus {\n        box-shadow: 0 0px 8px var(--accent-color);\n        border-radius: 0.1em;\n    }\n\n    /* Slider Design Option */\n    .s--slider button {\n        border-radius: 1.5em;\n    } \n    \n    .s--slider button::before {\n        border-radius: 100%;\n    }\n\n    .s--slider button:focus {\n        box-shadow: 0 0px 8px var(--accent-color);\n        border-radius: 1.5em;\n    }\n   \n\n</style>","\n\n\n/*\n    Network object\n\n    A network can be thought of as a DAG,\n        where the edges are tensors\n        and the vertecies are operators\n    \n*/\nexport class Network{\n    constructor(){\n        this.tensors = []         //actual tensor objects\n        this.operators = []       //actual operator objects\n\n        this.input_tensors = []   //indexes of this.tensors which are inputs to the net\n        this.param_tensors = []   //indexes of this.tensors which are params of the net //UNUSED\n        this.output_tensors = []  //indexes of this.tensors which are outputs to the net\n        this.truth_tensors = []   //indexes of this.tensors which are the ground truth  //UNUSED\n        this.loss = null          //index of this.operator which is the loss function   //UNUSED\n    }\n\n    //Adds a tensor to the network\n    // returns the index of the newly added tensor\n    add_tensor(t){\n        this.tensors.push(t);\n        return this.tensors.length - 1\n    }\n\n    //Adds an operator to the network\n    // returns the index of the newly added operator\n    // updates the references within the tensors of the operator\n    add_operator(op){\n        \n        var o = op.clone()\n\n        this.operators.push(o);\n        \n        for(let i = 0; i < o.inputs.length; i++){\n            this.tensors[o.inputs[i]].input_to.push(this.operators.length - 1)\n        }\n        \n        for(let i = 0; i < o.outputs.length; i++){\n            this.tensors[o.outputs[i]].output_of = this.operators.length - 1\n        }\n\n        return this.operators.length - 1\n    }\n\n\n    //Update the references that tensors hold of their operators \n    update_tensors(){\n\n        for(let i = 0; i < this.tensors.length; i++){\n            this.tensors[i].input_to = []\n            this.tensors[i].output_of = null\n        }\n        for(let k = 0; k < this.operators.length; k++){\n\n            for(let i = 0; i < this.operators[k].inputs.length; i++){\n                this.tensors[this.operators[k].inputs[i]].input_to.push(k)\n            }\n            \n            for(let i = 0; i < this.operators[k].outputs.length; i++){\n                this.tensors[this.operators[k].outputs[i]].output_of = k\n            }\n\n        }\n\n    }\n\n    //This function finds all abstraction operators and replaces them with their\n    // inner network\n    expand(){\n        //assumes that network is alright, ok, and doin well\n        //inner networks shouldn't have parameter tensors\n\n        \n        for(let i = 0; i < this.operators.length; i++){\n\n            //finding an abstraction operator to expand\n            if(this.operators[i].func == 0 && this.operators[i].network){\n                \n                //recursively expanding inner networks\n                var inner_net = this.operators[i].network;\n                inner_net.expand();\n\n                //Take out abstraction operator\n                var abstraction = this.operators[i]\n                \n                \n                //add new operators\n                var old_operators_length = this.operators.length\n\n                \n                this.operators[i] = inner_net.operators[0]\n                for(let k = 1; k < inner_net.operators.length; k++){\n                    this.add_operator(inner_net.operators[k])\n                }\n                \n\n                //Loop through each inner net tensor\n                //  this tensor will have a new id under the outer network\n                //    we determine this new id\n                //  in each tensor, find all operators it is associated with\n                //      by checking inputs_to and output_of\n                //    we then update the associations of these operators so that they\n                //      point to the new id\n                for(let k = 0; k < inner_net.tensors.length; k++){\n\n                    //these tensors will have a new id as measured by the outer network\n                    var new_id = k;\n\n                    \n                    if(inner_net.input_tensors.includes(k)){\n                        var index = inner_net.input_tensors.indexOf(k)\n\n                        new_id = abstraction.inputs[index]\n                    }else if(inner_net.output_tensors.includes(k)){\n                        var index = inner_net.output_tensors.indexOf(k)\n\n                        new_id = abstraction.outputs[index]\n                    }else{\n                        this.add_tensor(inner_net.tensors[k])\n                        new_id = this.tensors.length - 1\n                    }\n\n                    \n\n                    //finding all associated operators\n                    for(let j = 0; j < inner_net.tensors[k].input_to.length; j++){\n                        \n                        var index_of_op = inner_net.tensors[k].input_to[j]\n                        var op_index = inner_net.operators[ index_of_op ].inputs.indexOf(k)\n                        \n                        \n\n                        if(index_of_op == 0){\n                            \n                            this.operators[i].inputs[op_index] = new_id\n                        }else{\n                            \n                            this.operators[index_of_op + old_operators_length - 1].inputs[op_index] = new_id\n                        }\n                    }\n                    \n\n                    if(inner_net.tensors[k].output_of || inner_net.tensors[k].output_of == 0){\n\n                        \n                        var index_of_op = inner_net.tensors[k].output_of\n                        var op_index = inner_net.operators[ index_of_op ].outputs.indexOf(k)\n                        \n                        if(index_of_op == 0){\n                            this.operators[i].outputs[op_index] = new_id\n                        }else{\n                            this.operators[index_of_op + old_operators_length - 1].outputs[op_index] = new_id\n                        }\n                    }\n\n\n\n                }\n                \n                this.update_tensors()\n            }\n        }\n        \n    }\n\n    //Peer inside network, for debugging\n    to_string(){\n\n        var str = \"\"\n        \n        str += \"Tensors: \\n\"\n        \n        for(let i = 0; i < this.tensors.length; i++){\n            str += \"\\t\"+i+\":\\n\"\n            if(this.tensors[i].form){\n                str += \"\\t\\tform: \"+String(this.tensors[i].form)+\"\\n\"\n            }\n\n            str += \"\\t\\tinput_to:\\n\"\n            for(let k = 0; k < this.tensors[i].input_to.length; k++){\n                str += \"\\t\\t\\t\" + this.tensors[i].input_to[k] + \"\\n\"\n            }\n            \n\n            str += \"\\t\\toutput_of\\n\"\n            str += \"\\t\\t\\t\"+this.tensors[i].output_of + \"\\n\"\n        }\n\n        str += \"Operators: \\n\"\n        for(let i = 0; i < this.operators.length; i++){\n            str += \"\\t\"+i+\":\\n\"\n\n            str += \"\\t\\tinputs:\\n\"\n            for(let k = 0; k < this.operators[i].inputs.length; k++){\n                str += \"\\t\\t\\t\" + this.operators[i].inputs[k] + \"\\n\"\n            }\n\n            str += \"\\t\\toutputs:\\n\"\n            for(let k = 0; k < this.operators[i].outputs.length; k++){\n                str += \"\\t\\t\\t\" + this.operators[i].outputs[k] + \"\\n\"\n            }\n\n            str += \"\\t\\tfunc: \"+this.operators[i].func + \"\\n\"\n        }\n        \n        str += \"input_tensors:\\n\"\n        for(let i = 0; i < this.input_tensors.length; i++){\n            str += \"\\t\"+this.input_tensors[i]+\"\\n\"\n        }\n        \n        str += \"param_tensors:\\n\"\n        for(let i = 0; i < this.param_tensors.length; i++){\n            str += \"\\t\"+this.param_tensors[i]+\"\\n\"\n        }\n        \n        str += \"output_tensors:\\n\"\n        for(let i = 0; i < this.output_tensors.length; i++){\n            str += \"\\t\"+this.output_tensors[i]+\"\\n\"\n        }\n\n        return str\n    }\n}\n\n/*\n    Tensor object\n        in machine learning, a tensor is a multidimensional array\n        the size of these dimensions are held in 'form'\n            this is 'shape' in numpy\n        the tensor hold references to operators its associated with\n*/\nexport class Tensor{\n    constructor(live, form) {\n        this.scalar = false //I dont think I ever use this, i just check if this.size == 1\n\n        // live is boolean, it means the tensor form has been defined\n        if (live)\n            this.live = live\n        else\n            this.live = false\n\n        // form is like numpy shape\n        if(form)\n            this.form = form\n        else\n            this.form = []\n        \n        //center of tensor square, where it appears on canvas\n        this.x = 0;\n        this.y = 0;\n\n        this.tx = 0;\n        this.ty = 0;\n\n        this.selected = false //bool: iff selected by the mouse\n\n        //Which operators this tensor is an input to (as indexes in the network.operators)\n        this.input_to = []\n        //Which operator this tensor is an output of (as an index in the network.operators)\n        this.output_of = null;\n    }\n\n    // Number of elements in this tensor\n    calc_size(){\n        if(this.form){\n\n            var size_of_tensor = 1;\n\n            for(let k = 0; k < this.form.length; k++){\n                size_of_tensor *= this.form[k]\n            }\n\n            this.size = size_of_tensor\n            \n        }else{\n            this.size = 0\n        }\n        return this.size\n    }\n}\n\n\n\n//Class for the actual function that operators perform\n//There are three types:\n//  0: unary\n//  1: side binary\n//  2: top binary\nexport class Func{\n    constructor(name, num_inputs, type){\n        this.name = name\n        this.num_inputs = num_inputs\n        this.type = type\n    }\n\n    //takes array of tensors, with forms computed\n    //returns array of output forms\n    calc_form(inputs, network){\n        \n        var out = []\n        console.log(this.name)\n\n        switch(this.name){\n            case \"identity\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n            case \"add\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n            case \"subtract\":\n                out.push(network.tensors[inputs[0]].form)\n                break   \n            case \"scale\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n            case \"full\":\n\n                var form1 = network.tensors[inputs[0]].form\n                var form2 = network.tensors[inputs[1]].form\n\n                var form1_total = 1\n                for(let i = 0; i < form1.length; i++){\n                    form1_total *= form1[i]\n                }\n                var form2_total = 1\n                for(let i = 0; i < form2.length; i++){\n                    form2_total *= form2[i]\n                }\n\n                var out_form = []\n                out_form.push(form2_total/form1_total)\n                \n                out.push(out_form)\n                break\n            case \"amass\":\n                var out_form = []\n                out_form.push(1)\n                \n                out.push(out_form)\n                break\n            case \"softmax\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n            case \"hardmax\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n            case \"max\":\n                var out_form = []\n                out_form.push(1)\n                \n                out.push(out_form)\n                break\n            case \"convolution\":\n                form1 = network.tensors[inputs[0]].form\n                form2 = network.tensors[inputs[1]].form\n                var out_form = []\n\n                \n                for(let i = 0; i < form1.length; i++){\n                    if(form2.length <= i){\n                        out_form.push(form1[i])\n                    }else{\n                        out_form.push(form1[i] - form2[i] + 1)\n                    }\n                }\n                \n                out.push(out_form)\n                break\n            \n            case \"squared dist\":\n                out.push([1])\n                break\n            \n            case \"ReLU\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n\n            case \"LeakyReLU\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n\n            case \"Leaky to ReLU\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n                \n        }\n\n        return out\n    }\n}\n\n\n/*\n    Operator Object\n        holds references to the tensors its associated with\n*/\nexport class Operator{\n    constructor(func){\n\n        //input and output tensors of this operator\n        // as indexes in the networks.tensors\n        this.inputs = []  \n        this.outputs = []\n\n        \n        this.func = func //Integer defining which function this operator is, as an entry in function_table\n        this.size = null //UNUSED\n\n        this.network = null //If this operator is an abstraction, this is the network it abstracts\n\n        this.highlighted = false //If highlighted by toolbar\n        \n    }\n\n    //Create deep copy of this operator\n    clone(){\n        var clone = new Operator(this.func)\n        clone.inputs = [...this.inputs]\n        clone.outputs = [...this.outputs]\n        clone.network = this.network\n        return clone\n    }\n\n}\n\n\nexport var function_table = Array.apply(null, Array(12)).map(function () {})\nfunction_table[0] = new Func(\"abstraction\", 0, 1)\nfunction_table[1] = new Func(\"identity\",1, 0)\nfunction_table[2] = new Func(\"add\", 2, 1)\nfunction_table[3] = new Func(\"subtract\", 2, 1)\nfunction_table[4] = new Func(\"scale\", 2, 2)\nfunction_table[5] = new Func(\"Fully Connected\", 2, 2)\nfunction_table[6] = new Func(\"amass\", 1, 0)\nfunction_table[7] = new Func(\"Softmax\", 1, 0) // softmax exponent base is 2s\nfunction_table[8] = new Func(\"hardmax\", 1, 0)\nfunction_table[9] = new Func(\"max\", 1, 0)\nfunction_table[10] = new Func(\"Convolution\", 2, 2)\nfunction_table[11] = new Func(\"squared dist\", 2, 1)\nfunction_table[12] = new Func(\"PReLU\", 1, 0)\nfunction_table[13] = new Func(\"LeakyReLU\", 1, 0) //negative slope is 0.1\nfunction_table[14] = new Func(\"Leaky to ReLU\", 1, 0) //LeakyReLU in training, ReLU in deployment\nfunction_table[15] = new Func(\"MaxPool\", 1, 0)","import {Network} from \"./define_network_objects\"\nimport {Tensor} from \"./define_network_objects\"\nimport {Operator} from \"./define_network_objects\"\nimport { function_table } from \"./define_network_objects\"\n\n\nconst tensorRadius = 10\n\n\nfunction get_tensor_bounds(network, operator_index, tensor_index){\n    var ans = {\n        x_min: -9999,\n        x_max: 10000,\n        y_min: -9999,\n        y_max: 10000\n    };\n\n    var o = network.operators[operator_index]\n\n    var output = false;\n    var output_index = 0;\n    for(let i = 0; i < o.outputs.length; i++){\n        if(o.outputs[i] == tensor_index){\n            output = true;\n            output_index = i;\n        }\n    }\n\n    var input_index = 0;\n    if(!output){\n        for(let i = 0; i < o.inputs.length; i++){\n            if(o.inputs[i] == tensor_index){\n                input_index = i;\n            }\n        }\n    }\n\n\n    var inp0 = network.tensors[o.inputs[0]]\n    var inp1 = network.tensors[o.inputs[1]]\n    var out  = network.tensors[o.outputs[0]]\n\n    if(function_table[o.func].type == 0){\n        if(output){\n            ans.x_min = inp0.x + 4 * tensorRadius\n        }else{\n            ans.x_max = out.x - 4 * tensorRadius\n        }\n    }\n\n    if(function_table[o.func].type == 1){\n        if(output){\n            var rightest = Math.max(inp0.x, inp1.x)\n            ans.x_min = rightest + 4 * tensorRadius\n        }else{\n            if(input_index == 1){ //top tensor\n                ans.x_max = out.x - 4 * tensorRadius\n                \n                ans.y_max = inp0.y - 2 * tensorRadius\n            }else{\n                ans.x_max = out.x - 4 * tensorRadius\n\n                ans.y_min = inp1.y + 2 * tensorRadius\n            }\n        }\n    }\n\n    if(function_table[o.func].type == 2){\n        if(output){\n            ans.x_min = inp1.x + 2 * tensorRadius\n            ans.y_min = inp1.y + 2 * tensorRadius\n        }else{\n            if(input_index == 1){ //top tensor\n                ans.x_min = inp0.x + 2 * tensorRadius\n                ans.x_max = out.x - 2 * tensorRadius\n\n                var highest = Math.min(out.y, inp0.y)\n                ans.y_max = highest - 2 * tensorRadius\n            }else{\n                ans.x_max = inp1.x - 2 * tensorRadius\n\n                ans.y_min = inp1.y + 2 * tensorRadius\n            }\n        }\n    }\n    \n\n    return ans;\n}\n\n\n\n\n\n\n\n\nexport function placeTensor(network, tensor_index, x, y, bounds, grid = false){\n\n    network.tensors[tensor_index].x = x\n    network.tensors[tensor_index].y = y\n\n    if(grid){\n        network.tensors[tensor_index].x -= (network.tensors[tensor_index].x + tensorRadius) % (tensorRadius * 2) - tensorRadius\n        network.tensors[tensor_index].y -= (network.tensors[tensor_index].y + tensorRadius) % (tensorRadius * 2) - tensorRadius\n    }\n\n\n    \n    \n\n    for(let i = 0; i < network.tensors[tensor_index].input_to.length; i++){\n        let ans = get_tensor_bounds(network,network.tensors[tensor_index].input_to[i],tensor_index)\n        bounds.x_min = Math.max(bounds.x_min, ans.x_min)\n        bounds.x_max = Math.min(bounds.x_max, ans.x_max)\n        bounds.y_min = Math.max(bounds.y_min, ans.y_min)\n        bounds.y_max = Math.min(bounds.y_max, ans.y_max)\n    }\n    \n    \n    if(network.tensors[tensor_index].output_of != null){\n        let ans = get_tensor_bounds(network,network.tensors[tensor_index].output_of,tensor_index)\n        bounds.x_min = Math.max(bounds.x_min, ans.x_min)\n        bounds.x_max = Math.min(bounds.x_max, ans.x_max)\n        bounds.y_min = Math.max(bounds.y_min, ans.y_min)\n        bounds.y_max = Math.min(bounds.y_max, ans.y_max)\n    }\n\n\n    if( network.tensors[tensor_index].x < bounds.x_min){\n        network.tensors[tensor_index].x = bounds.x_min\n    }\n    if( network.tensors[tensor_index].x > bounds.x_max){\n        network.tensors[tensor_index].x = bounds.x_max\n    }\n    if( network.tensors[tensor_index].y < bounds.y_min){\n        network.tensors[tensor_index].y = bounds.y_min\n    }\n    if( network.tensors[tensor_index].y > bounds.y_max){\n        network.tensors[tensor_index].y = bounds.y_max\n    }\n    \n}\n\n\n\n\n\n\n\n//move tensors, accounting for obstructions\nexport function nudgeTensor(network, tensor_index, delta_x, delta_y){\n\n    placeTensor(network, tensor_index,\n         network.tensors[tensor_index].x + delta_x,\n         network.tensors[tensor_index].y + delta_y\n    )\n    \n}\n\n\n// returns list of indices of tensors with mouse hovered over\n//TODO: TENSORRESHAPE\nexport function getHoveredTensorIndices(network, x, y) {\n    \n    var hovered_tensors_list = []\n\n    \n    for (let j = 0; j < network.tensors.length; j++) {\n        if (network.tensors[j].x - tensorRadius < x &&\n            network.tensors[j].x + tensorRadius > x &&\n            network.tensors[j].y - tensorRadius < y &&\n            network.tensors[j].y + tensorRadius > y) \n        {\n            hovered_tensors_list.push(j)\n        }\n    }\n\n    return hovered_tensors_list\n}\n\n\n\n// returns list of indices of Operators with mouse hovered over\n// We define 'hovering over' an operator as having the mouse\n// over the region that is to the right of the leftmost tensor in the operator, \n// and to the left of the rightmost tensor in the operator, \n// and under the topmost...\n\n//TODO: TENSORRESHAPE\nexport function getHoveredOperatorIndices(network, x, y) {\n\n    var grabbedList = []\n    \n    for (let j = 0; j < network.operators.length; j++) {\n\n        var o = network.operators[j]\n\n        var inp0 = network.tensors[o.inputs[0]]\n        var inp1 = network.tensors[o.inputs[1]]\n        var out  = network.tensors[o.outputs[0]]\n\n        var x_min =  1000000\n        var x_max = -1000000\n        var y_min =  1000000\n        var y_max = -1000000\n\n        if(o.func < 0){\n            continue\n        }\n\n        if(function_table[o.func].type == 0){\n            x_min = inp0.x + tensorRadius\n            x_max = out.x  - tensorRadius\n            y_min = Math.min(inp0.y - tensorRadius, out.y - tensorRadius)\n            y_max = Math.max(inp0.y + tensorRadius, out.y + tensorRadius)\n        }\n\n        if(function_table[o.func].type == 2){\n            x_min = inp0.x + tensorRadius\n            x_max = out.x  - tensorRadius\n            y_min = inp1.y + tensorRadius\n            y_max = Math.max(inp0.y + tensorRadius, out.y + tensorRadius)\n        }\n\n        if(function_table[o.func].type == 1){\n            x_min = Math.min(inp0.x + tensorRadius, inp1.x + tensorRadius)\n            x_max = out.x  - tensorRadius\n            y_min = inp1.y - tensorRadius\n            y_max = inp0.y + tensorRadius\n        }\n        \n        if (x_min < x &&\n            x_max > x &&\n            y_min < y &&\n            y_max > y) {\n            grabbedList.push(j)\n        }\n    }\n    \n    return grabbedList\n}\n\n\n\n//intersecting_with_operator(network, op_index, x, y)\n//intersecting_with_tensor(network, t_index, x, y)","import {Network} from \"./define_network_objects\"\nimport {Tensor} from \"./define_network_objects\"\nimport {Operator} from \"./define_network_objects\"\n\n\n\nconst unmergeDist = 20\n\n\nexport function is_sequential(network){\n\n    //Ensuring the network only has one input and one output\n    if(network.input_tensors.length != 1 || network.output_tensors.length != 1){\n        return false\n    }\n    \n    //Ensuring each tensor is only input to a single operator at most\n    for(let i = 0; i < network.tensors.length; i++){\n        if(network.tensors[i].input_to.length > 1){\n            return false\n        }\n    }\n\n    //Ensure parameter tensors have no inputs\n    for(let i = 0; i < network.operators.length; i++){\n        if(network.operators[i].inputs.length > 1){\n            if(network.tensors[network.operators[i].inputs[1]].inputs_of > 0){\n                return false\n            }\n        }\n    }\n\n    var visited = Array(network.operators.length).fill(false)\n    var current = network.input_tensors[0].input_to\n\n    //Ensuring each operator flows from the input tensor, with no cycles\n    for(let i = 0; i < network.operators.length; i++){\n        if(visited[current]){\n            return false\n        }\n        visited[current] = true\n        current = network.tensors[network.operators[current].outputs[0]].input_to[0]\n        if(isNaN(current)){\n            return false\n        }\n    }\n\n    if(network.output_tensors[0] != network.operators[current].outputs[0]){\n        return false\n    }\n\n    return true\n}\n\n\nexport function unmergeTensor(network, tensor_index) {\n    var t0 = network.tensors[tensor_index]\n\n    // Save function we are inputting to, and delete that shit\n    var functions = t0.input_to\n    t0.input_to = []\n\n    for (let i = 0; i < functions.length; i++) {\n        var fi = functions[i]\n        var op1 = network.operators[fi]\n\n        // create new tensor\n        var tnewind = network.tensors.length\n        network.add_tensor(new Tensor(true))\n        \n        var todeleteind = op1.inputs.findIndex((elem) => elem == tensor_index)\n        op1.inputs[todeleteind] = tnewind\n\n        // update position\n        network.tensors[tnewind].x = t0.x + unmergeDist\n        network.tensors[tnewind].y = t0.y\n\n        network.tensors[tnewind].input_to = [fi]\n        network.tensors[tnewind].output_of = null\n        network.tensors[tnewind].live = false\n    }\n\n    t0.x -= unmergeDist\n    t0.live = false\n\n}\n\n\n\nexport function mergeTensors(network, tensor_index0, tensor_index1) {\n\n    if (network.tensors[tensor_index0].live && network.tensors[tensor_index1].live) {\n        console.log(\"Both merged tensors are live, so don't do anything.\")\n        return\n    }\n\n    \n    var one_is_an_output = false\n    var one_is_an_input = false\n    for(let i = 0; i < network.output_tensors.length; i++){\n        if(network.output_tensors[i] == tensor_index0 || network.output_tensors[i] == tensor_index1){\n            one_is_an_output = true;\n            network.output_tensors.splice(i,1)\n        }\n    }\n    for(let i = 0; i < network.input_tensors.length; i++){\n        if(network.input_tensors[i] == tensor_index0 || network.input_tensors[i] == tensor_index1){\n            one_is_an_input = true;\n            network.input_tensors.splice(i,1)\n        }\n    }\n\n    if(one_is_an_output && one_is_an_input){\n        console.log(\"Cant merge, one is an input and one is an output\")\n        return\n    }\n    \n        \n    let t0 = network.tensors[tensor_index0]\n    let t1 = network.tensors[tensor_index1]\n\n    let toDeleteIndex = tensor_index1\n    let noDeleteIndex = tensor_index0\n\n\n\n    // t0 is already an output to a function and stays, t1 is an input to a function and is deleted\n    if (t0.output_of != null && t1.output_of == null) {}\n    else if (t1.output_of != null && t0.output_of == null) {\n        var tmp = t1\n        t1 = t0\n        t0 = tmp\n        toDeleteIndex = tensor_index0\n        noDeleteIndex = tensor_index1\n    } else if (t0.output_of == null && t1.output_of == null) {}\n    else {\n        console.log(\"Error merging, only one input must have an output\")\n        return\n    }\n\n    // check that they aren't input and output to the same function\n    if (t1.input_to.length > 0 && t0.output_of == t1.input_to[0]) {\n        console.log(\"Error merging, these are input and output of the same function\")\n        return\n    }\n    \n    if(t1.input_to.length > 0){\n        let ind = network.operators[t1.input_to].inputs.indexOf(toDeleteIndex)\n        network.operators[t1.input_to].inputs[ind] = noDeleteIndex\n    }\n\n    t0.input_to = t1.input_to\n    \n    t0.live = (t0.live || t1.live)\n\n    if(noDeleteIndex == network.input_tensors.length - 1){\n        noDeleteIndex-=1\n        console.log(\"HERE\")\n    }\n    network.tensors[noDeleteIndex].selected = true\n\n    console.log(noDeleteIndex)\n    if(one_is_an_output){\n        network.output_tensors.push(noDeleteIndex)\n    }else if(one_is_an_input){\n        network.input_tensors.push(noDeleteIndex)\n    }\n\n    deleteTensor(network, toDeleteIndex)\n}\n\n\nfunction deleteTensor(network, index) {\n    // in operators, decrement input and output indices if greater than deleted indices\n    for (let i = 0; i < network.operators.length; i++) {\n        for (let j = 0; j < network.operators[i].inputs.length; j++) {\n            if (network.operators[i].inputs[j] > index) {\n                network.operators[i].inputs[j] -= 1\n            }\n        }\n        for (let j = 0; j < network.operators[i].outputs.length; j++) {\n            if (network.operators[i].outputs[j] > index) {\n                network.operators[i].outputs[j] -= 1\n            }\n        }\n    }\n\n    // delete relevant tensor\n    return network.tensors.splice(index, 1)\n}","import {Network} from \"./define_network_objects\"\nimport {Tensor} from \"./define_network_objects\"\nimport {Operator} from \"./define_network_objects\"\nimport { function_table } from \"./define_network_objects\"\n\nimport { placeTensor } from \"./mouse_network_interaction\"\nimport {nudgeTensor} from \"./mouse_network_interaction\"\nimport {getHoveredTensorIndices} from \"./mouse_network_interaction\"\nimport {getHoveredOperatorIndices} from \"./mouse_network_interaction\"\n\nimport {unmergeTensor} from \"./network_logic\"\nimport {mergeTensors} from \"./network_logic\"\n\n\n\n\nvar canvas    //html canvas object\nvar ctx       //context rendering object\n\n\nvar width = 0;   //width of canvas\nvar height = 0;  //height of canvas\n\n\nconst tensorRadius = 10\n\n\nvar down = false                  //iff mouse down\nvar draggedIndex = -1             //index of tensor being dragged\nvar dragged_operator_index = -1   //index of operator being dragged\n\n\nvar last_mouseX = 0;              //mouseX on last frame\nvar last_mouseY = 0;              //mouseY on last frame\nvar mouseX = 0;                   //mouseX\nvar mouseY = 0;                   //mouseY\nvar tmX = 0;                      //starting X of selection\nvar tmY = 0;                      //starting Y of selection\n\nvar last_frame = Date.now()       //Time last frame was drawn\nvar this_frame = Date.now()       //Time in this frame\n\nvar networks = []                 //list of networks we are working with\nvar networkIndex = 0              //network we are working with\nnetworks.push(new Network())      //Inital network\n\n\nvar selecting = false             //iff selecting\nvar grid = true                   //iff grid is on\n\n\nvar inputs_margin = tensorRadius*2 * 5     // width of inputs area\nvar outputs_margin = tensorRadius*2 * 5    // width of outputs area\n\nvar input_box_width = tensorRadius*2 * 4   \nvar input_box_height = tensorRadius*2 * 3\n\n// input_box object\n// what appears in the inputs or outputs area\nclass input_box{\n    constructor(y){\n        this.list_index = -1 //index in the network input_tensors or output_tensors list\n        this.y = y\n    }\n}\n\n\nvar input_boxes = []   // boxes on the left\n\nvar output_boxes = []  // boxes on the right\n\n\nvar output_box_width  = tensorRadius*2 * 4 \nvar output_box_height = tensorRadius*2 * 3\n\nvar box_seperation    = tensorRadius*0.75\n\n\n\n\n\n//Draws a rounded rectangle\n// x: x corner\n// y: y corner\n// w: width\n// h: height\n// r: radius of circle of rounded edge\nCanvasRenderingContext2D.prototype.roundRect = function (x, y, w, h, r) {\n    if (w < 0){\n        w = -w\n        x -= w\n    }\n    if (h < 0){\n        h = -h\n        y -= h\n    }\n\n\n    if (w < 2 * r) r = w / 2;\n    if (h < 2 * r) r = h / 2;\n    this.beginPath();\n    this.moveTo(x+r, y);\n    this.arcTo(x+w, y,   x+w, y+h, r);\n    this.arcTo(x+w, y+h, x,   y+h, r);\n    this.arcTo(x,   y+h, x,   y,   r);\n    this.arcTo(x,   y,   x+w, y,   r);\n    this.closePath();\n    return this;\n}\n\n\n\n\n// Adds a new input box the inputs area\nfunction add_input_box(y, tensor_index = null){\n    \n    // If tensor doesnt exist, create it\n    if (tensor_index == null){\n\n        tensor_index = networks[networkIndex].add_tensor(new Tensor(false))\n        \n        // Set position of tensor\n        networks[networkIndex].tensors[tensor_index].y = y\n        networks[networkIndex].tensors[tensor_index].x = inputs_margin + tensorRadius * 2\n\n        //Add tensor to network inputs\n        networks[networkIndex].input_tensors.push(tensor_index)\n    }\n\n    \n    var box = new input_box(y)\n\n    for(let i = 0; i < networks[networkIndex].input_tensors.length; i++){\n        if(networks[networkIndex].input_tensors[i] == tensor_index){\n            box.list_index = i;\n        }\n    }\n    \n    input_boxes.push(box)\n\n}\n\n\nfunction add_output_box(y, tensor_index = null){\n    \n    // If tensor doesnt exist, create it\n    if (tensor_index == null){\n\n        tensor_index = networks[networkIndex].add_tensor(new Tensor(false))\n        \n        // Set position of tensor\n        networks[networkIndex].tensors[tensor_index].y = y\n        networks[networkIndex].tensors[tensor_index].x = (width - outputs_margin - tensorRadius * 2) - ( (width - outputs_margin - tensorRadius * 2) % (tensorRadius*2) )\n        \n        //Add tensor to network outputs\n        networks[networkIndex].output_tensors.push(tensor_index)\n    }\n\n    var box = new input_box(y)\n    for(let i = 0; i < networks[networkIndex].output_tensors.length; i++){\n        if(networks[networkIndex].output_tensors[i] == tensor_index){\n            box.list_index = i;\n        }\n    }\n    \n    output_boxes.push(box)\n}\n\n\n// Returns the network object of the network we are working on\nexport function get_network(){\n    return networks[networkIndex]\n}\n\n// Removes everything from network\nexport function clear_network(){\n    networks[networkIndex] = new Network()\n}\n\n\n//Introduce a new operator to the canvas and network\nexport function new_operator(func, x = inputs_margin + tensorRadius*2 * 2, y = tensorRadius*2 * 3){\n    clear_selected()\n\n    let new_op = new Operator()\n    new_op.func = func\n\n    var t_index = networks[networkIndex].tensors.length\n    \n    //unary operator\n    if(function_table[func].type == 0){\n\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 0].x = x + tensorRadius*2 * 0\n        networks[networkIndex].tensors[t_index + 0].y = y + tensorRadius*2 * 0\n\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 1].x = x + tensorRadius*2 * 3\n        networks[networkIndex].tensors[t_index + 1].y = y + tensorRadius*2 * 0\n\n        new_op.inputs  = [t_index + 0]\n        new_op.outputs = [t_index + 1]\n    }\n\n    //side binary operator\n    if(function_table[func].type == 2){\n        \n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 0].x = x + tensorRadius*2 * 0\n        networks[networkIndex].tensors[t_index + 0].y = y + tensorRadius*2 * 2\n\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 1].x = x + tensorRadius*2 * 2\n        networks[networkIndex].tensors[t_index + 1].y = y + tensorRadius*2 * 0\n\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 2].x = x + tensorRadius*2 * 4\n        networks[networkIndex].tensors[t_index + 2].y = y + tensorRadius*2 * 2\n\n        new_op.inputs  = [t_index + 0, t_index + 1]\n        new_op.outputs = [t_index + 2]\n    }\n\n    //top binary operator\n    if(function_table[func].type == 1){\n\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 0].x = x + tensorRadius*2 * 0\n        networks[networkIndex].tensors[t_index + 0].y = y + tensorRadius*2 * 2\n\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 1].x = x + tensorRadius*2 * 0\n        networks[networkIndex].tensors[t_index + 1].y = y + tensorRadius*2 * 0\n\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 2].x = x + tensorRadius*2 * 3\n        networks[networkIndex].tensors[t_index + 2].y = y + tensorRadius*2 * 1\n\n        new_op.inputs  = [t_index + 0, t_index + 1]\n        new_op.outputs = [t_index + 2]\n    }\n\n    networks[networkIndex].add_operator(new_op)\n}\n\n\n//Button object, for toggle buttons on canvas\nclass Button{\n    constructor(x, y, w, h, bool=false){\n        this.x = x\n        this.y = y\n        this.w = w\n        this.h = h\n        this.bool = bool;\n    }\n\n    //Detects if a click here is on the button, if so, flip the bool\n    press(x, y){\n        if(this.x <= x && this.x + this.w >= x\n        && this.y <= y && this.y + this.h >= y){\n            this.bool = !this.bool\n        }\n    }\n}\n\n\n\n\nvar Buttons = []\n\n//Add grid button\nvar b = new Button(inputs_margin + tensorRadius*1, tensorRadius*1, tensorRadius*2, tensorRadius*2, true);\nButtons.push(b)\nvar grid_icon = new Image()\ngrid_icon.src = \"grid_icon.png\"\n\n\n//edit an tensor from the operator edit screen\n//  input is bool, whether the tensor is an input to the operator or not\nexport function edit_tensor_by_operator(operator_index, tensor_index, input, new_shape){\n    \n    if(input){\n        tensor_index = networks[networkIndex].operators[operator_index].inputs[tensor_index]\n    }else{\n        tensor_index = networks[networkIndex].operators[operator_index].outputs[tensor_index]\n    }\n    edit_tensor(tensor_index, new_shape)\n}\n\n\n// Update shape or form of the tensor, propogates the effects to other tensors\nexport function edit_tensor(tensor_index, new_shape){\n    var t = networks[networkIndex].tensors[tensor_index]\n    t.form = new_shape\n    t.calc_size()\n    \n    t.live = true\n    for(let i = 0; i < t.input_to.length; i++){\n        propogate_shape(t.input_to[i], tensor_index, true)\n    }\n    if(t.output_of != null){\n        propogate_shape(t.output_of, tensor_index, false)\n    }\n}\n\n\n//Propogates the effects of a tensor shape change\n//  forward is bool, meaning we are propogating from inputs to outputs, or vice versa if false\n//TODO: for DAG i gotta worry about infinite loops\n//This code assumes that convolution is only 2D\nfunction propogate_shape(operator_index,tensor_index, forward){\n\n    if(operator_index == null){\n        return;\n    }\n\n    var intra_operator_index = 0;\n    var op = networks[networkIndex].operators[operator_index]\n    var t = networks[networkIndex].tensors[tensor_index]\n\n    if(forward){\n        for(let i = 0; i < op.inputs.length; i++){\n            if(op.inputs[i] == tensor_index){\n                intra_operator_index = i\n            }\n        }\n    }else{\n        for(let i = 0; i < op.outputs.length; i++){\n            if(op.outputs[i] == tensor_index){\n                intra_operator_index = i\n            }\n        }\n    }\n\n    var input0 = networks[networkIndex].tensors[op.inputs[0]]\n    var output = networks[networkIndex].tensors[op.outputs[0]]\n    var input1\n    if(op.inputs.length > 1)\n        input1 = networks[networkIndex].tensors[op.inputs[1]]\n    \n\n    switch(op.func){\n        case 5://Fully Connected\n            if(forward){\n                if(intra_operator_index == 0){\n                    if(output.live){\n                        input1.form = [input0.size, output.size]\n                        input1.live = true\n                        input1.calc_size()\n                        propogate_shape(input1.output_of, op.inputs[1], false)\n                    }else if(input1.live){\n                        output.form = [input1.form[1]]\n                        output.live = true\n                        output.calc_size()\n                        for(let i = 0; i < output.input_to; i++){\n                            propogate_shape(output.input_to[i], op.outputs[0], true)\n                        }\n                    }\n                }else{\n                    input0.form = [input1.form[0]]\n                    input0.live = true\n                    input0.calc_size()\n                    propogate_shape(input0.output_of, op.inputs[0], false)\n\n                    output.form = [input1.form[1]]\n                    output.live = true\n                    output.calc_size()\n                    for(let i = 0; i < output.input_to; i++){\n                        propogate_shape(output.input_to[i], op.outputs[0], true)\n                    }\n                }\n            }else{\n                if(input0.live){\n                    input1.form = [input0.size, output.size]\n                    input1.live = true\n                    input1.calc_size()\n                    propogate_shape(input1.output_of, op.inputs[1], false)\n                }\n            }\n            break;\n        case 7://Softmax\n            if(forward){\n                output.form = input0.form\n                output.live = true\n                output.calc_size()\n                for(let i = 0; i < output.input_to; i++){\n                    propogate_shape(output.input_to[i], op.outputs[0], true)\n                }\n            }else{\n                input0.form = output.form\n                input0.live = true\n                input0.calc_size()\n                propogate_shape(input0.output_of, op.inputs[0], false)\n            }\n            break;\n        case 10://Convolution\n            if(forward){\n                if(intra_operator_index == 0){\n                    if(output.live){\n                        input1.form = [input0.form[0] - output.form[0] + 1, input0.form[1] - output.form[1] + 1, output.form[2]]\n                        input1.live = true\n                        input1.calc_size()\n                        propogate_shape(input1.output_of, op.inputs[1], false)\n                    }else if(input1.live){\n                        output.form = [input0.form[0] - input1.form[0] + 1, input0.form[1] - input1.form[1] + 1, input1.form[2]]\n                        output.live = true\n                        output.calc_size()\n                        for(let i = 0; i < output.input_to; i++){\n                            propogate_shape(output.input_to[i], op.outputs[0], true)\n                        }\n                    }\n                }else{\n                    if(output.live){\n                        input0.form = [input1.form[0] + output.form[0] - 1, input1.form[1] + output.form[1] - 1]\n                        input0.live = true\n                        input0.calc_size()\n                        propogate_shape(input1.output_of, op.inputs[1], false)\n                    }else if(input0.live){\n                        output.form = [input0.form[0] - input1.form[0] + 1, input0.form[1] - input1.form[1] + 1, input1.form[2]]\n                        output.live = true\n                        output.calc_size()\n                        for(let i = 0; i < output.input_to; i++){\n                            propogate_shape(output.input_to[i], op.outputs[0], true)\n                        }\n                    }\n                }\n            }else{\n                if(input0.live){\n                    input1.form = [input0.form[0] - output.form[0] + 1, input0.form[1] - output.form[1] + 1, output.form[2]]\n                    input1.live = true\n                    input1.calc_size()\n                    propogate_shape(input1.output_of, op.inputs[1], false)\n                }else if(input1.live){\n                    input0.form = [input1.form[0] + output.form[0] - 1, input1.form[1] + output.form[1] - 1]\n                    input0.live = true\n                    input0.calc_size()\n                    propogate_shape(input1.output_of, op.inputs[1], false)\n                }\n            }\n            break;\n        case 12://ReLU\n            if(forward){\n                output.form = input0.form\n                output.live = true\n                output.calc_size()\n                for(let i = 0; i < output.input_to; i++){\n                    propogate_shape(output.input_to[i], op.outputs[0], true)\n                }\n            }else{\n                input0.form = output.form\n                input0.live = true\n                input0.calc_size()\n                propogate_shape(input0.output_of, op.inputs[0], false)\n            }\n            break;\n        default:\n            break;\n    }\n\n    \n}\n\n\n//Sets this operator as an input\nexport function set_op_as_input(operator_index){\n    \n    var n = networks[networkIndex]\n    n.input_tensors.push(n.operators[operator_index].inputs[0])\n    \n}\n\n//Sets this operator as an output\nexport function set_op_as_output(operator_index){\n    \n    var n = networks[networkIndex]\n    n.output_tensors.push(n.operators[operator_index].outputs[0])\n    \n}\n\n\n\n// Initialize the canvas and some objects\n//   is called after html canvas objects loads\nexport function init() {\n\n    canvas = document.getElementById(\"gui_canvas\")\n    canvas.addEventListener(\"mousedown\", doMouseDown, false)\n    canvas.addEventListener(\"mousemove\", doMouseMove, false)\n    canvas.addEventListener(\"mouseup\", doMouseUp, false)\n    canvas.addEventListener(\"dblclick\", doDoubleClick, false)\n    ctx = canvas.getContext(\"2d\");\n\n    canvas.width = canvas.getBoundingClientRect().width\n    canvas.height = canvas.getBoundingClientRect().height\n\n    width = canvas.width;\n    height = canvas.height;\n\n    last_frame = Date.now()\n    this_frame = Date.now()\n\n    //Add initial input box , cus every network must have at least one input\n    add_input_box(height/2 - (height/2 % (tensorRadius*2)))\n\n    //Add initial output box, cus every network must have at least one output\n    //add_output_box(height/2 - (height/2 % (tensorRadius*2)))\n    \n    window.requestAnimationFrame(draw);\n}\n\n\n\n\n\nfunction drawTensor(network, tensorIndex) {\n    let t = network.tensors[tensorIndex]\n\n    // find out if tensor is an input or output of the network\n    // we will draw it a different color if so ////////////////\n    var input = false                                        //\n    var output = false\n\n    for(let i = 0; i < network.input_tensors.length; i++){\n        if(network.input_tensors[i] == tensorIndex){\n            input = true\n        }\n    }\n    for(let i = 0; i < network.output_tensors.length; i++){\n        if(network.output_tensors[i] == tensorIndex){\n            output = true\n        }\n    }                                                        //\n    ///////////////////////////////////////////////////////////\n\n    // If the tensor is live, draw it solid, otherwise draw it see through\n    if (t.live) {\n\n        if(input){\n            ctx.fillStyle = \"#F2C8A6\"\n        }else if(output){\n            ctx.fillStyle = \"#A6D0F2\"\n        }else{\n            ctx.fillStyle = \"#FFFFFF\"\n        }\n        ctx.lineWidth = 1\n        ctx.setLineDash([])\n        ctx.strokeStyle = 'black'\n    }\n    else {\n        ctx.fillStyle = \"rgba(255,255,255,0)\"\n        ctx.lineWidth = 1\n        ctx.setLineDash([3,4])\n        ctx.strokeStyle = 'Grey'\n        if(input){\n            ctx.strokeStyle = \"#F2C8A6\"\n        }else if(output){\n            ctx.strokeStyle = \"#A6D0F2\"\n        }else\n            ctx.strokeStyle = \"#888888\"\n    }\n\n    //Draw outline\n    ctx.beginPath()\n    if (t.scalar) {\n        ctx.rect(t.x - scalarTensorRadius, t.y - scalarTensorRadius, 2 * scalarTensorRadius, 2 * scalarTensorRadius)\n    }\n    else {\n        ctx.rect(t.x - tensorRadius, t.y - tensorRadius, 2 * tensorRadius, 2 * tensorRadius)\n    }\n    ctx.fill()\n    ctx.stroke()\n    \n    //Draw inside\n    if(t.selected){\n        ctx.fillStyle = \"rgba(255,255,255,0)\"\n        ctx.lineWidth = 1\n        ctx.strokeStyle = '#5dd2f0'\n        ctx.setLineDash([])\n        ctx.beginPath()\n        ctx.roundRect(t.x - tensorRadius*1.5, t.y - tensorRadius*1.5, 3 * tensorRadius, 3 * tensorRadius, tensorRadius * 0.2)\n        ctx.stroke()\n    }\n}\n\n\nfunction draw_grill(x1, y1, x2, y2, x3, y3, x4, y4, bars, solid){\n    if(bars < 1){\n        return\n    }\n\n    var bar_gap = 1/(bars*solid + (bars-1)*(1-solid))\n\n    ctx.beginPath()\n    ctx.moveTo(x1, y1)\n    ctx.lineTo(x3, y3)\n    ctx.lineTo(x3 + (x4 - x3) * (0*bar_gap + solid*bar_gap),\n               y3 + (y4 - y3) * (0*bar_gap + solid*bar_gap))\n    ctx.lineTo(x1 + (x2 - x1) * (0*bar_gap + solid*bar_gap),\n               y1 + (y2 - y1) * (0*bar_gap + solid*bar_gap))\n    \n    for(let i = 1; i < bars; i++){\n        ctx.lineTo(x1 + (x2 - x1) * (i*bar_gap),\n                   y1 + (y2 - y1) * (i*bar_gap))\n        ctx.lineTo(x3 + (x4 - x3) * (i*bar_gap),\n                   y3 + (y4 - y3) * (i*bar_gap))\n        ctx.lineTo(x3 + (x4 - x3) * (i*bar_gap + solid*bar_gap ),\n                   y3 + (y4 - y3) * (i*bar_gap + solid*bar_gap ))\n        ctx.lineTo(x1 + (x2 - x1) * (i*bar_gap + solid*bar_gap ),\n                   y1 + (y2 - y1) * (i*bar_gap + solid*bar_gap ))\n    }\n\n    ctx.closePath()\n    ctx.fill()\n}\n\n\n// here we draw the function naively without checking for tensor positions. That must be handled \n// by movement logic\nfunction drawOperator(network, operatorIndex) {\n    let o = network.operators[operatorIndex]\n    let input\n    let input1\n    let input2\n    let output\n\n    let functionGradient = ctx.createLinearGradient(0, 0, width, 0)\n    if(o.highlighted){\n        functionGradient.addColorStop(0, \"#E5914D\")\n        functionGradient.addColorStop(1, \"#4DA1E5\")\n    }else{\n        functionGradient.addColorStop(0, \"#DE7521\")\n        functionGradient.addColorStop(1, \"#218ADE\")\n    }\n\n    ctx.fillStyle = functionGradient\n\n    var tapes = 3\n\n    switch (o.func) {\n        case 0: // abstraction\n            break\n        case 1: // identity\n            break\n        case 2: // add\n            input1 = network.tensors[o.inputs[0]]\n            input2 = network.tensors[o.inputs[1]]\n            output = network.tensors[o.outputs[0]]\n\n            ctx.beginPath()\n            ctx.moveTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y + tensorRadius)\n\n            ctx.lineTo(input1.x + tensorRadius, input1.y + tensorRadius)\n            ctx.lineTo(input1.x + tensorRadius, input1.y - tensorRadius)\n            ctx.closePath()\n            ctx.fill()\n\n            ctx.beginPath()\n            ctx.moveTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y + tensorRadius)\n\n            ctx.lineTo(input2.x + tensorRadius, input2.y + tensorRadius)\n            ctx.lineTo(input2.x + tensorRadius, input2.y - tensorRadius)\n            ctx.closePath()\n            ctx.fill()\n\n\n            break\n        case 3: // subtract\n            input1 = network.tensors[o.inputs[0]]\n            input2 = network.tensors[o.inputs[1]]\n            output = network.tensors[o.outputs[0]]\n\n            break\n        case 4: // scale\n            break\n        case 5: // full\n            input1 = network.tensors[o.inputs[0]]\n            input2 = network.tensors[o.inputs[1]]\n            output = network.tensors[o.outputs[0]]\n\n            ctx.beginPath()\n            ctx.moveTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y + tensorRadius)\n\n            ctx.lineTo(input1.x + tensorRadius, input1.y + tensorRadius)\n            ctx.lineTo(input1.x + tensorRadius, input1.y - tensorRadius)\n\n            ctx.lineTo(input2.x - tensorRadius, input2.y + tensorRadius)\n            ctx.lineTo(input2.x + tensorRadius, input2.y + tensorRadius)\n           \n            ctx.closePath()\n            ctx.fill()\n            break\n        case 6: // amass\n            break\n        case 7: // softmax\n            input = network.tensors[o.inputs[0]]\n            output = network.tensors[o.outputs[0]]\n\n            ctx.beginPath()\n            ctx.moveTo(output.x - tensorRadius, output.y - tensorRadius*0.5)\n            ctx.lineTo(output.x - tensorRadius, output.y + tensorRadius*0.5)\n\n            ctx.lineTo(input.x + tensorRadius, input.y + tensorRadius)\n            ctx.lineTo(input.x + tensorRadius, input.y - tensorRadius)\n        \n            ctx.closePath()\n            ctx.fill()\n\n            break\n        case 8: // hardmax\n            break\n        case 9: // max\n            break\n        case 10: // convolution\n            input1 = network.tensors[o.inputs[0]]\n            input2 = network.tensors[o.inputs[1]]\n            output = network.tensors[o.outputs[0]]\n\n            ctx.beginPath()\n            ctx.moveTo(input1.x + tensorRadius, input1.y - tensorRadius)\n            \n            ctx.lineTo(input2.x - tensorRadius, input2.y + tensorRadius)\n            ctx.lineTo(input2.x + tensorRadius, input2.y + tensorRadius)\n\n            ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.closePath()\n            ctx.fill()\n            \n            draw_grill(input1.x + tensorRadius, input1.y - tensorRadius - 1, \n                       input1.x + tensorRadius, input1.y + tensorRadius,\n                       output.x - tensorRadius, output.y - tensorRadius - 1,\n                       output.x - tensorRadius, output.y + tensorRadius,\n                        3, 0.6)\n            \n            break\n        case 11: // squared dist\n            break\n        case 12: // PReLU\n            input = network.tensors[o.inputs[0]]\n            output = network.tensors[o.outputs[0]]\n\n            \n            ctx.beginPath()\n            ctx.moveTo(input.x + tensorRadius, input.y - tensorRadius)\n            ctx.lineTo((output.x + input.x)/2, (output.y + input.y)/2 - tensorRadius)\n\n\n            ctx.lineTo((output.x + input.x)/2, (output.y + input.y)/2 + tensorRadius)\n            ctx.lineTo(input.x + tensorRadius, input.y + tensorRadius)\n            \n            ctx.closePath()\n            ctx.fill()\n            \n            \n            draw_grill((output.x + input.x)/2, (output.y + input.y)/2 - tensorRadius, \n                       (output.x + input.x)/2, (output.y + input.y)/2 + tensorRadius,\n                       output.x - tensorRadius, output.y - tensorRadius,\n                       output.x - tensorRadius, output.y + tensorRadius,\n                        3, 0.5)\n            \n            break\n        case 15: // MaxPool\n            input = network.tensors[o.inputs[0]]\n            output = network.tensors[o.outputs[0]]\n\n            ctx.beginPath()\n            ctx.moveTo(input.x + tensorRadius, input.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius)\n\n            ctx.lineTo(output.x - tensorRadius, output.y)\n            ctx.lineTo(input.x + tensorRadius + 0.6*(output.x - tensorRadius - input.x - tensorRadius), (input.y + output.y)/2 )\n\n            ctx.lineTo(input.x + tensorRadius + 0.4*(output.x - tensorRadius - input.x - tensorRadius), (input.y + output.y)/2 +tensorRadius)\n            ctx.lineTo(input.x + tensorRadius, input.y + tensorRadius)\n\n            ctx.closePath()\n            ctx.fill()\n            break\n        default:\n            break\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar seconds = 0;\n\nfunction draw() {\n    canvas.width = canvas.getBoundingClientRect().width\n    canvas.height = canvas.getBoundingClientRect().height\n    width = canvas.width\n    height = canvas.height\n\n    last_frame = this_frame\n    this_frame = Date.now()\n    var sec = (this_frame - last_frame) / 1000.0\n    seconds += sec;\n\n    /*\n    ctx.fillStyle = \"#2e3037\"\n    ctx.fillRect(0, 0, width, height)\n    */\n\n\n    var delta_x = mouseX - last_mouseX;\n    var delta_y = mouseY - last_mouseY;\n    last_mouseX = mouseX;\n    last_mouseY = mouseY;\n\n    if(grid){\n        ctx.beginPath()\n\n        for(let i = -tensorRadius; i < width; i+= tensorRadius*2){\n            ctx.moveTo(i, 0)\n            ctx.lineTo(i, height)\n        }\n        for(let i = -tensorRadius; i < height; i+= tensorRadius*2){\n            ctx.moveTo(0, i)\n            ctx.lineTo(width, i)\n        }\n        ctx.lineWidth = 0.5\n        ctx.setLineDash([1,4])\n        ctx.strokeStyle = 'Grey'\n\n        ctx.closePath()\n        ctx.stroke();\n    }\n    \n\n    for (let i = 0; i < networks[0].operators.length; i++) {\n        drawOperator(networks[0], i)\n    }\n\n    for (let i = 0; i < networks[0].tensors.length; i++) {\n        drawTensor(networks[0], i)\n        if(networks[networkIndex].tensors[i].selected && !selecting && down){\n            var bounds = {\n                x_min: tensorRadius*2 + inputs_margin,\n                x_max: (canvas.width - tensorRadius*2 - outputs_margin) - (canvas.width % (tensorRadius*2)),\n                y_min: tensorRadius*2,\n                y_max: (canvas.height - tensorRadius*2) - ((canvas.height - tensorRadius*2) % tensorRadius*2)\n            }\n            \n            placeTensor(networks[networkIndex],i,\n                networks[networkIndex].tensors[i].tx + mouseX - tmX,\n                networks[networkIndex].tensors[i].ty + mouseY - tmY, bounds, grid)\n        }\n    }\n\n\n    \n\n\n    if(selecting){\n        ctx.fillStyle = \"rgba(255,255,255,0)\"\n        ctx.lineWidth = 1\n        ctx.strokeStyle = '#5dd2f0'\n        ctx.setLineDash([3,2])\n        ctx.beginPath()\n        \n        ctx.roundRect(tmX, tmY, mouseX-tmX, mouseY-tmY, tensorRadius * 0.2)\n            \n        ctx.stroke()\n    }\n\n\n\n    \n    grid = Buttons[0].bool\n    try{\n        ctx.drawImage(grid_icon, Buttons[0].x, Buttons[0].y, Buttons[0].w, Buttons[0].h)\n    }catch(e){\n        ctx.fillStyle = \"black\"\n        ctx.fillRect(Buttons[0].x, Buttons[0].y, Buttons[0].w, Buttons[0].h)\n    }\n\n\n    \n    // Draw input box zone\n    ctx.fillStyle = \"#E0E0E0\"\n    ctx.fillRect(0, 0, inputs_margin, height + tensorRadius * 2)\n\n\n    // Draw input boxes\n    for(let i = 0; i < input_boxes.length; i++){\n\n        ctx.fillStyle = \"#84DBD7\"\n        ctx.roundRect((inputs_margin - input_box_width)/2, input_boxes[i].y - input_box_height/2, input_box_width, input_box_height, tensorRadius)\n        ctx.fill()\n\n        \n        var t = networks[networkIndex].tensors[networks[networkIndex].input_tensors[input_boxes[i].list_index]]\n\n        ctx.lineWidth = 1\n        ctx.strokeStyle = \"black\"\n        ctx.setLineDash([])\n        ctx.beginPath()\n        ctx.moveTo(inputs_margin - (inputs_margin - input_box_width)/2, input_boxes[i].y)\n        \n        \n        if(Math.abs(input_boxes[i].y - t.y) < tensorRadius*2) {\n\n            ctx.lineTo(inputs_margin - Math.abs(input_boxes[i].y - t.y)/2, input_boxes[i].y)\n            if(input_boxes[i].y - t.y > 0){\n                ctx.arc(  inputs_margin - Math.abs(input_boxes[i].y - t.y)/2, (input_boxes[i].y + t.y)/2, Math.abs(t.y - input_boxes[i].y)/2, Math.PI/2, 0, true)\n                ctx.arc(  inputs_margin + Math.abs(input_boxes[i].y - t.y)/2, input_boxes[i].y - (input_boxes[i].y - t.y)/2, Math.abs(t.y - input_boxes[i].y)/2, Math.PI, 3*Math.PI/2)\n            }else{\n                ctx.arc(  inputs_margin - Math.abs(input_boxes[i].y - t.y)/2, (input_boxes[i].y + t.y)/2, Math.abs(t.y - input_boxes[i].y)/2, 3*Math.PI/2, 0)\n                ctx.arc(  inputs_margin + Math.abs(input_boxes[i].y - t.y)/2, input_boxes[i].y - (input_boxes[i].y - t.y)/2, Math.abs(t.y - input_boxes[i].y)/2, Math.PI, Math.PI/2, true)\n            }\n            ctx.lineTo(t.x - tensorRadius, t.y)\n\n        }else{\n            \n            if(input_boxes[i].y - t.y > 0){\n                ctx.arc(  inputs_margin - tensorRadius, input_boxes[i].y - tensorRadius, tensorRadius, Math.PI/2, 0, true)\n                ctx.arc(  inputs_margin + Math.min(Math.abs(input_boxes[i].y - t.y)/2, t.x-tensorRadius-inputs_margin) , t.y + Math.min( Math.abs(t.y - input_boxes[i].y)/2, t.x-tensorRadius-inputs_margin), Math.min( Math.abs(t.y - input_boxes[i].y)/2, t.x-tensorRadius-inputs_margin), Math.PI, 3*Math.PI/2)\n            }else{\n                ctx.arc(  inputs_margin - tensorRadius, input_boxes[i].y + tensorRadius, tensorRadius, 3*Math.PI/2, 0)\n                ctx.arc(  inputs_margin + Math.min(Math.abs(input_boxes[i].y - t.y)/2, t.x-tensorRadius-inputs_margin) , t.y - Math.min( Math.abs(t.y - input_boxes[i].y)/2, t.x-tensorRadius-inputs_margin), Math.min( Math.abs(t.y - input_boxes[i].y)/2, t.x-tensorRadius-inputs_margin),  Math.PI, Math.PI/2, true)\n            }\n            ctx.lineTo(t.x - tensorRadius, t.y)\n        }\n\n        ctx.stroke()\n\n    }\n\n\n    // Draw output box zone\n    ctx.fillStyle = \"#E0E0E0\"\n    ctx.fillRect(width - outputs_margin , 0, width, height + tensorRadius * 2)\n\n    // Draw output boxes\n    for(let i = 0; i < output_boxes.length; i++){\n\n        ctx.fillStyle = \"#84DBD7\"\n        ctx.roundRect( width - outputs_margin + (outputs_margin - output_box_width)/2, output_boxes[i].y - output_box_height/2, output_box_width, output_box_height, tensorRadius)\n        ctx.fill()\n\n        //console.log(networks[networkIndex].output_tensors)\n        var t = networks[networkIndex].tensors[networks[networkIndex].output_tensors[output_boxes[i].list_index]]\n\n        ctx.lineWidth = 1\n        ctx.strokeStyle = \"black\"\n        ctx.setLineDash([])\n        ctx.beginPath()\n        ctx.moveTo(width - outputs_margin + (outputs_margin - output_box_width)/2, output_boxes[i].y)\n        \n        \n        if(Math.abs(output_boxes[i].y - t.y) < tensorRadius*2) {\n\n            ctx.lineTo(width - outputs_margin + Math.abs(output_boxes[i].y - t.y)/2, output_boxes[i].y)\n            if(output_boxes[i].y - t.y > 0){\n                ctx.arc(  width - outputs_margin + Math.abs(output_boxes[i].y - t.y)/2, (output_boxes[i].y + t.y)/2, Math.abs(t.y - output_boxes[i].y)/2, Math.PI/2, Math.PI)\n                ctx.arc(  width - outputs_margin - Math.abs(output_boxes[i].y - t.y)/2, output_boxes[i].y - (output_boxes[i].y - t.y)/2, Math.abs(t.y - output_boxes[i].y)/2, 0, -Math.PI/2, true )\n            }else{\n                ctx.arc(  width - outputs_margin + Math.abs(output_boxes[i].y - t.y)/2, (output_boxes[i].y + t.y)/2, Math.abs(t.y - output_boxes[i].y)/2, 3*Math.PI/2, Math.PI, true)\n                ctx.arc(  width - outputs_margin - Math.abs(output_boxes[i].y - t.y)/2, output_boxes[i].y - (output_boxes[i].y - t.y)/2, Math.abs(t.y - output_boxes[i].y)/2, 0, Math.PI/2)\n            }\n            ctx.lineTo(t.x + tensorRadius, t.y)\n\n        }else{\n            \n            if(output_boxes[i].y - t.y > 0){\n                ctx.arc(  width - outputs_margin + tensorRadius, output_boxes[i].y - tensorRadius, tensorRadius, Math.PI/2, Math.PI)\n                ctx.arc(  width - outputs_margin - Math.min(Math.abs(output_boxes[i].y - t.y)/2, width - outputs_margin - t.x-tensorRadius) , t.y + Math.min( Math.abs(t.y - output_boxes[i].y)/2, width - outputs_margin - t.x-tensorRadius), Math.min( Math.abs(t.y - output_boxes[i].y)/2, width - outputs_margin - t.x-tensorRadius), 0, -Math.PI/2, true)\n            }else{\n                ctx.arc(  width - outputs_margin + tensorRadius, output_boxes[i].y + tensorRadius, tensorRadius, 3*Math.PI/2, Math.PI, true)\n                ctx.arc(  width - outputs_margin - Math.min(Math.abs(output_boxes[i].y - t.y)/2, width - outputs_margin - t.x-tensorRadius) , t.y - Math.min( Math.abs(t.y - output_boxes[i].y)/2, width - outputs_margin - t.x-tensorRadius), Math.min( Math.abs(t.y - output_boxes[i].y)/2, width - outputs_margin - t.x-tensorRadius),  0, Math.PI/2)\n            }\n            ctx.lineTo(t.x + tensorRadius, t.y)\n        }\n\n        ctx.stroke()\n\n    }\n\n    window.requestAnimationFrame(draw);\n}\n\n\n\n\n\n\n\nfunction clear_selected(){\n    for(let i = 0; i < networks[networkIndex].tensors.length; i++){\n        networks[networkIndex].tensors[i].selected = false;\n    }\n}\n\n//ineligant solution\nexport function highlighted_operators(){\n    return getHoveredOperatorIndices(networks[networkIndex], mouseX, mouseY)\n}\n\nexport function highlight_operators(op_list){\n    for(let i = 0; i < networks[networkIndex].operators.length; i++){\n        networks[networkIndex].operators[i].highlighted = false\n    }\n    for(let i = 0; i < op_list.length; i++){\n        networks[networkIndex].operators[op_list[i]].highlighted = true\n    }\n}\n\n\n\nfunction doDoubleClick(e) {\n\n    let clickedList = getHoveredTensorIndices(networks[networkIndex], mouseX, mouseY)\n\n    for (let i = 0; i < clickedList.length; i++) {\n        var clickedIndex = clickedList[i]\n        var t0 = networks[networkIndex].tensors[clickedIndex]\n        if (t0.output_of == null || t0.input_to.length == 0) {\n\n        }\n        else {\n            console.log(\"Unmerge\")\n            unmergeTensor(networks[networkIndex], clickedIndex)\n        }\n    }\n}\n\n\nfunction doMouseUp(e) {\n    \n    selecting = false;\n\n    \n    for(let i = 0; i < networks[networkIndex].tensors.length; i++){\n        for(let j = 0; j < networks[networkIndex].tensors.length; j++){\n                \n\n            if(j == i){\n                continue\n            }\n            var t1 = networks[networkIndex].tensors[i];\n            var t2 = networks[networkIndex].tensors[j];\n\n            if(Math.abs(t1.x - t2.x) < tensorRadius * 2 && Math.abs(t1.y - t2.y) < tensorRadius * 2){\n                mergeTensors(networks[networkIndex], i, j);\n            }\n        }\n    }\n    \n    \n    down = false\n    draggedIndex = -1\n    dragged_operator_index = -1\n\n    let clickedList = getHoveredTensorIndices(networks[networkIndex], mouseX, mouseY)\n\n    if (clickedList.length >= 2) {\n        mergeTensors(networks[networkIndex], clickedList[0], clickedList[1])\n        // if either tensor are ghosts\n    }\n}\n\nfunction doMouseDown(e) {\n    down = true\n    for(let i = 0; i < networks[networkIndex].tensors.length; i++){\n        networks[networkIndex].tensors[i].tx = networks[networkIndex].tensors[i].x\n        networks[networkIndex].tensors[i].ty = networks[networkIndex].tensors[i].y\n    }\n    tmX = mouseX;\n    tmY = mouseY;\n\n\n    // console.log(\"Mouse position: \",mouseX,\" \", mouseY)\n    let draggedList = getHoveredTensorIndices(networks[networkIndex], mouseX, mouseY)\n\n    if (draggedList.length != 0) {\n        draggedIndex = draggedList[0]\n\n        networks[networkIndex].tensors[draggedIndex].selected = true\n        console.log(networks[networkIndex].tensors[draggedIndex].form)\n        console.log(draggedIndex)\n    }\n\n    let dragged_operators = getHoveredOperatorIndices(networks[networkIndex], mouseX, mouseY)\n\n    if (dragged_operators.length != 0 && draggedList.length == 0){\n        dragged_operator_index = dragged_operators[0]\n        var op = networks[networkIndex].operators[dragged_operator_index]\n        for(let i = 0; i < op.inputs.length; i++){\n            networks[networkIndex].tensors[op.inputs[i]].selected = true\n        }\n        for(let i = 0; i < op.outputs.length; i++){\n            networks[networkIndex].tensors[op.outputs[i]].selected = true\n        }\n\n        \n    }\n\n    if(draggedList.length == 0 && dragged_operators.length == 0){\n        selecting = true\n        clear_selected()\n    }\n\n\n\n    for(let i = 0; i < Buttons.length; i++){\n        Buttons[i].press(mouseX, mouseY)\n    }\n}\n\n\nfunction doMouseMove(e) {\n    if (e.offsetX) {\n        mouseX = e.offsetX;\n        mouseY = e.offsetY;\n    }\n    else if (e.layerX) {\n        mouseX = e.layerX;\n        mouseY = e.layerY;\n    }\n\n    if(selecting){\n        for(let i = 0; i < networks[networkIndex].tensors.length; i++){\n            var t = networks[networkIndex].tensors[i]\n\n            if(Math.abs(t.x - (tmX + mouseX)/2) < Math.abs(tmX - (tmX + mouseX)/2)\n            && Math.abs(t.y - (tmY + mouseY)/2) < Math.abs(tmY - (tmY + mouseY)/2)){\n                t.selected = true\n            }else{\n                t.selected = false\n            }\n        }\n    }\n\n}","\n<script>\n\timport Modal,{getModal} from './Modal.svelte'\n\timport Switch from './Switch.svelte'\n    import { onMount } from \"svelte\";\n\timport * as objects from \"./define_network_objects\"\n    import * as gui_logic from \"./gui_logic\"\n    import * as network_logic from \"./network_logic\"\n\timport { time_ranges_to_array } from 'svelte/internal';\n\n\t// Connecting python scripts\n\tbrython()\n\n\t//example for mahesh\n\t/*\n\tconsole.log(\"Check this shit out:\")\n\tvar tf_code = tf_code_generator([[1, 24, 0, 2, \"(3,3)\"], [4, 0, 0, 0, \"(2,2)\"], [1, 36, 0, 2, \"(3,3)\"], [4, 0, 0, 0, \"(2,2)\"], [0,784,128,2], [0,128,10,2]])\n\tconsole.log(tf_code)\n\tvar pytorch_code = pytorch_code_generator([[1, 24, 0, 2, \"(3,3)\"], [4, 0, 0, 0, \"(2,2)\"], [1, 36, 0, 2, \"(3,3)\"], [4, 0, 0, 0, \"(2,2)\"], [0,784,128,2], [0,128,10,2]])\n\tconsole.log(pytorch_code)\n\t*/\n\t\n\n    onMount(() => {\n        gui_logic.init()\n\t\tvar canvas = document.getElementById(\"gui_canvas\")\n\t\tcanvas.addEventListener(\"mousemove\", doMouseMove, false)\n\t\t\n    })\n\t//list of operators\n\tvar toolbarItems = [];\n\n\n\tfunction doMouseMove(e) {\n\t\tvar ops = gui_logic.highlighted_operators()\n\t\tfor(let i = 0; i < toolbarItems.length;i++){\n\t\t\ttoolbarItems[i].hovered=\"false\"\n\t\t}\n\t\tfor(let i = 0; i < ops.length;i++){\n\t\t\ttoolbarItems[ops[i]].hovered=\"true\"\n\t\t}\n\t}\n\t// Wrapper for yes clear function\n\tfunction yes_clear() {\n\t\tgetModal('clear').close(1)\n      \tgui_logic.clear_network()\n    }\n\t\n\tfunction update_operator_list() {\n\t\tvar op_names = gui_logic.get_network().operators.map((e) => (objects.function_table[e.func].name));\n\t\tvar op_names_with_numbers = []\n\t\tif(op_names.length == 0){\n\t\t\treturn\n\t\t}\n\t\top_names_with_numbers.push(op_names[0])\n\t\tfor(let i = 1; i < op_names.length; i++){\n\t\t\tvar count = 0;\n\t\t\tfor(let j = 0; j < i; j++){\n\t\t\t\tif(op_names[i] == op_names[j]){\n\t\t\t\t\tcount ++\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar new_name = op_names[i]\n\t\t\tif(count > 0){\n\t\t\t\tnew_name += \" \"+String(count + 1)\n\t\t\t}\n\t\t\top_names_with_numbers.push(new_name)\n\t\t}\n\t\tfor(let i = 0; i < op_names_with_numbers.length; i++){\n\t\t\ttoolbarItems[i] = {operator_type: op_names[i], operator_name: op_names_with_numbers[i], id:i ,highlighted:'T'}\n\t\t}\n\t\t\n\t}\n\t//operator is the index in the operator list,\n\t//tensor is an int, 0 means input[0], 1 means input[1], 2 means output[0]\n\tfunction update_tensor_shape(tensor){\n\t\tvar shape_str = \"\"\n\t\tswitch(tensor){\n\t\t\tcase 0:\n\t\t\t\tshape_str = input\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tshape_str = parameter_shape\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tshape_str = output\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif(shape_str == undefined){\n\t\t\treturn\n\t\t}\n\n\t\tvar shape = []\n\n\t\tvar current_num = \"\"\n\t\tfor(let i = 0; i < shape_str.length; i++){\n\t\t\tif(shape_str[i] == ','){\n\t\t\t\tshape.push(parseInt(current_num))\n\t\t\t\tcurrent_num = \"\"\n\t\t\t}else{\n\t\t\t\tcurrent_num += shape_str[i]\n\t\t\t}\n\t\t}\n\t\tshape.push(parseInt(current_num))\n\n\n\t\tswitch(tensor){\n\t\t\tcase 0:\n\t\t\t\tgui_logic.edit_tensor_by_operator(operator_id, 0, true, shape)\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tgui_logic.edit_tensor_by_operator(operator_id, 1, true, shape)\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tgui_logic.edit_tensor_by_operator(operator_id, 0, false, shape)\n\t\t\t\tbreak;\n\t\t}\n\n\t\tupdate_fields()\n\t}\n\n\tfunction update_fields(){\n\t\tvar n = gui_logic.get_network()\n\n\t\tvar input0_str = \"\"\n\t\tfor(let i = 0; i < n.tensors[n.operators[operator_id].inputs[0]].form.length; i++){\n\t\t\tif(i > 0){\n\t\t\t\tinput0_str += \",\"\n\t\t\t}\n\t\t\tinput0_str += String(n.tensors[n.operators[operator_id].inputs[0]].form[i])\n\t\t}\n\t\tinput=input0_str\n\n\t\tvar output_str = \"\"\n\t\tfor(let i = 0; i < n.tensors[n.operators[operator_id].outputs[0]].form.length; i++){\n\t\t\tif(i > 0){\n\t\t\t\toutput_str += \",\"\n\t\t\t}\n\t\t\toutput_str += String(n.tensors[n.operators[operator_id].outputs[0]].form[i])\n\t\t}\n\t\toutput=output_str\n\n\t\tif(n.operators[operator_id].inputs.length < 2){\n\t\t\treturn\n\t\t}\n\n\t\tvar input1_str = \"\"\n\t\tfor(let i = 0; i < n.tensors[n.operators[operator_id].inputs[1]].form.length; i++){\n\t\t\tif(i > 0){\n\t\t\t\tinput1_str += \",\"\n\t\t\t}\n\t\t\tinput1_str += String(n.tensors[n.operators[operator_id].inputs[1]].form[i])\n\t\t}\n\t\tparameter_shape=input1_str\n\t}\n\n\tfunction submit_edit(){\n\t\tif(I_switch === \"off\")\n\t\t\tgui_logic.set_op_as_input(operator_id)\n\t\tif(O_switch === \"off\")\n\t\t\tgui_logic.set_op_as_output(operator_id)\n\t}\n\n\tfunction set_edit_operator(op_id){\n\t\toperator_id = op_id\n\t\tI_switch = \"on\"\n\t\tO_switch = \"on\"\n\t\tupdate_fields()\n\t}\n\t// Add operator functions\n\tfunction add_dense() {\n      \tgui_logic.new_operator(5)\n\t\tgetModal('add_operator').close(1)\n\t\tupdate_operator_list()\n    }\n\tfunction add_conv() {\n      \tgui_logic.new_operator(10)\n\t\tgetModal('add_operator').close(1)\n\t\tupdate_operator_list()\n    }\n\tfunction add_prelu() {\n      \tgui_logic.new_operator(12)\n\t\tgetModal('add_operator').close(1)\n\t\tupdate_operator_list()\n    }\n\tfunction add_softmax() {\n      \tgui_logic.new_operator(7)\n\t\tgetModal('add_operator').close(1)\n\t\tupdate_operator_list()\n    }\n\tfunction add_maxpool() {\n      \tgui_logic.new_operator(15)\n\t\tgetModal('add_operator').close(1)\n\t\tupdate_operator_list()\n    }\n\t\n\t// Constants\n    let bar_logo = './transparent_bar_logo.png'; // Neurula logo for nav bar\n    let home_link = 'http://127.0.0.1:8000'; // Main domain \n\tlet github_logo = 'https://cdn-icons-png.flaticon.com/512/25/25231.png';\n\tlet forms_logo = 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/c2/Google_Forms_logo_%282014-2020%29.svg/640px-Google_Forms_logo_%282014-2020%29.svg.png'; // google forms icon\n\tlet github_link = 'https://github.com/genicos/nn_gui'; // Link to github repo for project\n\tlet feedback_link = 'https://docs.google.com/forms/d/e/1FAIpQLSdMQYYT9P0cp507dm4xyCr9cvJJ9RUwAcFF21pWBhWLWyqPng/viewform?usp=sf_link'; // Link to google form for feedback\n\tlet fully_connected_icon = './Fully_Connected.png'; // Icon for toolbar_list\n\tlet convolution_icon = './Convolution.png'; // Icon for toolbar_list\n\tlet prelu_icon = './PReLU.png'; // Icon for toolbar_list\n\tlet softmax_icon = './Softmax.png'; // Icon for toolbar_list\n\t\n\t// Variables\n\tlet clear_selection; // Value for Modal choice for clearing\n\tlet generate_selection; // Value for Modal choice for which code to generate network in\n\tlet grid; // Toggle on and off grid for canvas\n\t\n\t// edit operator variables\n\tlet operator_id;\n\tlet I_switch; // Value to toggle for operator as input\n\tlet O_switch; // Value to toggle for operator as output\n\tlet input;\n\tlet output;\n\tlet parameter_shape; // As tuple\n\n\tlet items = [\n    { id: 1, name: \"Dense\"},\n    { id: 2, name: \"Convolutional\"},\n    { id: 3, name: \"PReLU\"},\n\t{ id: 4, name: \"Softmax\"},\n\t{ id: 5, name: \"Maxpool\"}\n  \t];\n  \tlet operator_type = \"\";\n\tconst addItem = () => {\n\t\titems = [\n\t\t...items,\n\t\t{\n\t\t\tid: Math.random(),\n\t\t\toperator_type,\n\t\t}\n\t\t];\n\t\toperator_type = \"\";\n  \t};\n\t// Function for nav bar Modal options\n\tfunction setClear(res){\n\t\tclear_selection=res\n\t}\n\n\tfunction generatePyTorch(res){\n\t\tvar netList = generate_network_list()\n\t\tvar code = pytorch_code_generator(netList)\n\t\tconsole.log(\"GENERATED NETWORK\")\n\t\tconsole.log(code)\n\t}\n\n\tfunction generateTensor(){\n\t\tvar netList = generate_network_list()\n\t\tvar code = tf_code_generator(netList)\n\t\tconsole.log(\"GENERATED NETWORK\")\n\t\tconsole.log(code)\n\t}\n\n\tfunction generate_network_list(){\n\t\tconst net = gui_logic.get_network();\n\t\t\n\t\tconst tensors = net.tensors;\n\t\tconst operators = net.operators;\n\n\t\tconst netList = [];\n\n\t\tfor (let i = 0; i < operators.length; i++){\n\t\t\tconst operatorList = []; //Single layer, list of its attributes\n\n\t\t\tvar this_operator = operators[i];\n\n\t\t\t// storing the operator type to the code that anish uses\n\t\t\t// python code uses a different type standard than js code\n\n\t\t\tif (this_operator.func == 5){           // Dense/Fully Connected\n\t\t\t\toperatorList.push(0);\n\t\t\t} else if (this_operator.func == 10){   // Convolutional layer\n\t\t\t\t\n\t\t\t\t// push operator type\n\t\t\t\toperatorList.push(1);\n\t\t\t\t\n\t\t\t\t// push number of filters\n\t\t\t\toperatorList.push(tensors[this_operator.inputs[1]].form[2])\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Unexpected Operator\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t// push input size\n\t\t\toperatorList.push(tensors[this_operator.inputs[0]].calc_size()); // NEED TO CHANGE THIS TO MAKE IT WORK FOR NONLINEAR NETWORKS\n\n\t\t\t// if Dense, we need number of neurons\n\t\t\tif(this_operator.func == 5){\n\t\t\t\t// push output size (number of neurons in layer)\n\t\t\t\toperatorList.push(tensors[this_operator.outputs[0]].calc_size()); // NEED TO CHANGE THIS TO MAKE IT WORK FOR NONLINEAR NETWORKS\n\t\t\t}\n\n\t\t\tvar next_operator = operators[tensors[this_operator.outputs[0]].input_to[0]]\n\n\t\t\t// Push operator function\n\t\t\tif ((this_operator.func == 5 || this_operator.func == 10) && (next_operator.func == 7 || next_operator.func == 12)){\n\t\t\t\tif (next_operator.func == 7){        // Soft Max\n\t\t\t\t\toperatorList.push(3);\n\t\t\t\t} else if (next_operator.func == 12){ // ReLU\n\t\t\t\t\toperatorList.push(2);\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Activation function expected, non given\")\n\t\t\t\toperatorList.push(0);\n\t\t\t}\n\n\t\t\t//If convolution, we need kernel\n\t\t\tif(this_operator.func == 10){\n\n\t\t\t\tvar kernel_str = \"(\" + tensors[this_operator.inputs[1]].form[0] + \",\" + tensors[this_operator.inputs[1]].form[1] + \")\"\n\t\t\t\toperatorList.push(kernel_str)\n\t\t\t}\n\n\n\t\t\tnetList.push(operatorList);\n\n\t\t}\n\n\n\t\treturn netList\n\t}\n\n\tfunction setGenerate(res){\n\t\tgenerate_selection=res\n\t}\n\n\n\tfunction optimize(){\n\t\tvar code = gen_python_file();\n\n\t\t\n\t\tvar element = document.createElement('a');\n\t\telement.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(code));\n\t\telement.setAttribute('download', \"temp.py\");\n\n\t\telement.style.display = 'none';\n\t\tdocument.body.appendChild(element);\n\n\t\telement.click();\n\n\t\tdocument.body.removeChild(element);\n\t\t\n\n\t\tconsole.log(\"HELLO\")\n\t}\n  \n</script>\n  \n<main>\n\t<!-- Navigation Bar (At top of page) -->\n\t<nav>\n\t\t<div class=\"left\">\n\t\t\t<ul class=\"navbar-list\">\n\t\t\t\t<li><a href={home_link}><img src={bar_logo} alt=\"Neurula logo.\" style=\"max-height: 60px\" ></a></li>\n\t\t\t</ul>\n\t\t</div>\n\t\t<div class=\"right\">\n\t\t\t<ul class=\"navbar-list\">\n\t\t\t\t<li><a href={undefined} class=\"nav-button\" on:click={()=>getModal('clear').open(setClear)}>Clear Canvas</a></li>\n\t\t\t\t<li><a href={undefined} class=\"nav-button\" on:click={optimize}>Optimize</a></li>\n\t\t\t\t<li><a href={undefined} class=\"nav-button\" on:click={()=>getModal('generate').open(setGenerate)}>Generate Code</a></li>\n\t\t\t\t<li><a href={undefined} class=\"nav-button\" on:click={()=>getModal('tutorial').open()}>?</a></li>\n\t\t\t</ul>\n\t\t</div>\n\t</nav>\n\n\t<!-- Neural Network Workspace -->\n\t<div id=\"workspace\">\n\t\t<!-- Workspace Toolbar -->\n\t\t<div id=\"toolbar\">\n\t\t\t<!-- Left-aligned side of nav bar -->\n\t\t\t<div id=\"toolbar_title\">\n\t\t\t\t<a href={undefined} class=\"add_op_button\" on:click={()=>getModal('add_operator').open()}>+ add operator</a>\n\t\t\t</div>\n\t\t\t<!-- Right-aligned side of nav bar -->\n\t\t\t<div id=\"toolbar_list\">\n\t\t\t\t<div id=\"toolbar_add_operator\">\n\t\t\t\t\t<!-- <strong>Current Operators: </strong> -->\n\t\t\t\t\t<p id=\"layers-title\">Added Layers: </p>\n\t\t\t\t</div>\n\t\t\t\t<!-- Displays list of placeholder navItems as set in <script> -->\n\t\t\t\t{#each toolbarItems as item}\n\t\t\t\t\t<!-- Dense Operator -->\n\t\t\t\t\t{#if item.operator_type === \"Fully Connected\"}\n\t\t\t\t\t\t<li id={\"list_item\"+item.id} class=\"{item.hovered === \"true\" ? 'hovered' : ''}\" on:click={()=>{getModal('edit_fully_connected').open();set_edit_operator(item.id)}} on:focus={()=>{}} on:mouseleave={() => {gui_logic.highlight_operators([])}} on:mouseover={() => {gui_logic.highlight_operators([item.id])}}>\n\t\t\t\t\t\t\t<p><img src={fully_connected_icon} alt=\"Fully Connected List icon.\" style=\"max-height: 20px; margin-right: 10px\">{item.operator_name}</p>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t<!-- Convolution Operator -->\n\t\t\t\t\t{:else if item.operator_type === \"Convolution\"}\n\t\t\t\t\t\t<li id={\"list_item\"+item.id} class=\"{item.hovered === \"true\" ? 'hovered' : ''}\" on:click={()=>{getModal('edit_convolution').open();set_edit_operator(item.id)}} on:focus={()=>{}} on:mouseleave={() => {gui_logic.highlight_operators([])}} on:mouseover={() => {gui_logic.highlight_operators([item.id])}}>\n\t\t\t\t\t\t\t<p><img src={convolution_icon} alt=\"Convolution List icon.\" style=\"max-height: 20px; margin-right: 10px\">{item.operator_name}</p>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t<!-- PReLU Operator -->\n\t\t\t\t\t{:else if item.operator_type === \"PReLU\"}\n\t\t\t\t\t\t<li id={\"list_item\"+item.id} class=\"{item.hovered === \"true\" ? 'hovered' : ''}\" on:click={()=>{getModal('edit_prelu').open();set_edit_operator(item.id)}} on:focus={()=>{}} on:mouseleave={() => {gui_logic.highlight_operators([])}} on:mouseover={() => {gui_logic.highlight_operators([item.id])}}>\n\t\t\t\t\t\t\t<p><img src={prelu_icon} alt=\"PReLU List icon.\" style=\"max-height: 20px; margin-right: 10px\">{item.operator_name}</p>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t<!-- Softmax Operator -->\n\t\t\t\t\t{:else if item.operator_type === \"Softmax\"}\n\t\t\t\t\t\t<li id={\"list_item\"+item.id} class=\"{item.hovered === \"true\" ? 'hovered' : ''}\" on:click={()=>{getModal('edit_softmax').open();set_edit_operator(item.id)}}  on:focus={()=>{}} on:mouseleave={() => {gui_logic.highlight_operators([])}} on:mouseover={() => {gui_logic.highlight_operators([item.id])}}>\n\t\t\t\t\t\t\t<p><img src={softmax_icon} alt=\"Softmax List icon.\" style=\"max-height: 20px; margin-right: 10px\">{item.operator_name}</p>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t{/if}\n\t\t\t\t{/each}\n\t\t\t</div>\n\t\t</div>\n\n\t\t<!-- Workspace Canvas (For drawing the neural network) -->\n        <div id=\"canvas_container\">\n            <canvas id=\"gui_canvas\"></canvas>\n\t\t\t<div id=\"canvas_footer\">\n\t\t\t\tNetwork Parameters: _\tLayers: _\n\t\t\t</div>\n        </div>\n\n    </div>\n\n\t<!-- Footer (at bottom of page) -->\n\t<div class=\"footer\">\n\t\t<a href={undefined} class=\"footer-button\" on:click={()=>getModal('about').open()}>About</a>\n\t\t<a href={github_link}><img id=\"git\" src={github_logo} alt=\"Github logo.\" style=\"max-height: 20px\">Github</a>\n\t\t<a href={feedback_link}><img id=\"git\" src={forms_logo} alt=\"Google Forms logo.\" style=\"max-height: 20px\">Feedback</a>\n\t</div>\n\n\t<!-- Modal Popups for Navigation Bar-->\n\t<Modal id=\"clear\">\n\t\tAre you sure?\n\t\t<!-- Passing a value back to the callback function; Choice is saved in 'clear_selection' -->\n\t\t<button class=\"option\" on:click={yes_clear}>\n\t\t\tYes\n\t\t</button>\n\t\t<button class=\"option\" on:click={()=>getModal('clear').close(0)}>\n\t\t\tNo\n\t\t</button>\n\t</Modal>\n\n\t<Modal id=\"generate\">\n\t\tHow would you like to download your neural network? <br><br>\n\t\t<!-- Passing a value back to the callback function; Choice is saved in 'generate_selection' -->\n\t\t<button class=\"option\" on:click={generatePyTorch}>\n\t\t\tPytorch\n\t\t</button>\n\t\t<button class=\"option\" on:click={generateTensor}>\n\t\t\tTensorflow\n\t\t</button>\n\t</Modal>\n\n\t<Modal id=\"tutorial\">\n\t\t<h1>Tutorial</h1>\n\t</Modal>\n\n\t<Modal id=\"about\">\n\t\t<h1>About Neurula</h1>\n\t\t<p>Machine learning can appear obscure and complicated, posing a barrier to people who are unfamiliar but interested.<br>\n\t\t\tHowever, designing working neural networks doesn’t have to be difficult.<br><br>\n\t\t\tThat's why we created Neurula: a website in which you can drag and drop blocks allowing you to design\n\t\t\tneural networks in an intuitive fashion. Once you design a network, you can download auto-generated code that implements\n\t\t\tthat network in tensorflow or pytorch. <br><br>\n\t\t\t<i>Made for UCSC's CSE 115A Spring 2022</i><br>\n\t\t\t<i>Developers: Nicolas Ayala, Anish Pahilajani, Kat Negrete, Mahesh Vegiraju, and Alexandra Hutchins</i>\n\t\t</p>\n\t</Modal>\n\n\t<Modal id=\"add_operator\">\n\t\tAdd Operator: <br><br>\n\t\t<!-- Calls function to call specific operator -->\n\t\t<button class=\"option\" on:click={add_dense}>\n            Dense\n        </button>\n        <button class=\"option\" on:click={add_conv}>\n            Convolutional\n        </button>\n        <button class=\"option\" on:click={add_prelu}>\n            PReLU\n        </button>\n        <button class=\"option\" on:click={add_softmax}>\n            Softmax\n        </button>\n\t\t<button class=\"option\" on:click={add_maxpool}>\n            Max Pool\n        </button>\n\t</Modal>\n\n\t<!-- Modals for editing operators -->\n\t<Modal id=\"edit_fully_connected\">\n\t\tEdit Fully Connected Operator: <br><br>\n\t\t<Switch bind:value={I_switch} label=\"\" design=\"I\" />\n\t\t<Switch bind:value={O_switch} label=\"\" design=\"O\" />\n\t\t<form on:submit|preventDefault={addItem}>\n\t\t\t<label for=\"name\">Input:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={input} on:change={() => {update_tensor_shape(0)}}/><br>\n\t\t\t<label for=\"name\">Output:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={output} on:change={() => {update_tensor_shape(2)}}/><br>\n\t\t\t<label for=\"name\">Parameter Shape:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={parameter_shape} on:change={() => {update_tensor_shape(1)}}/>\n\t\t</form>\n\t\t<button class=\"submit\" on:click={()=>{getModal('edit_fully_connected').close();submit_edit()}}>\n            Submit\n        </button>\n\t</Modal>\n\n\t<Modal id=\"edit_convolution\">\n\t\tEdit Convolution Operator: <br><br>\n\t\t<Switch bind:value={I_switch} label=\"\" design=\"I\" />\n\t\t<Switch bind:value={O_switch} label=\"\" design=\"O\" />\n\t\t<form on:submit|preventDefault={addItem}>\n\t\t\t<label for=\"name\">Input:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={input} on:change={() => {update_tensor_shape(0)}}/><br>\n\t\t\t<label for=\"name\">Output:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={output} on:change={() => {update_tensor_shape(2)}}/><br>\n\t\t\t<label for=\"name\">Kernel Shape:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={parameter_shape} on:change={() => {update_tensor_shape(1)}}/>\n\t\t</form>\n\t\t<button class=\"submit\" on:click={()=>{getModal('edit_convolution').close();submit_edit()}}>\n            Submit\n        </button>\n\t</Modal>\n\n\t<Modal id=\"edit_prelu\">\n\t\tEdit PReLU Operator: <br><br>\n\t\t<Switch bind:value={I_switch} label=\"\" design=\"I\" />\n\t\t<Switch bind:value={O_switch} label=\"\" design=\"O\" />\n\t\t<form on:submit|preventDefault={addItem}>\n\t\t\t<label for=\"name\">Input/Output size:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={input} on:change={() => {update_tensor_shape(0)}}/><br>\n\t\t\t<!-- <label for=\"name\">Slope for -x:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={parameter_shape} /> -->\n\t\t</form>\n\t\t<button class=\"submit\" on:click={()=>{getModal('edit_prelu').close();submit_edit()}}>\n            Submit\n        </button>\n\t</Modal>\n\n\t<Modal id=\"edit_softmax\">\n\t\tEdit Softmax Operator: <br><br>\n\t\t<Switch bind:value={I_switch} label=\"\" design=\"I\" />\n\t\t<Switch bind:value={O_switch} label=\"\" design=\"O\" />\n\t\t<form on:submit|preventDefault={addItem}>\n\t\t\t<label for=\"name\">Input/Output size:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={input} on:change={() => {update_tensor_shape(0)}}/><br>\n\t\t</form>\n\t\t<button class=\"submit\" on:click={()=>{getModal('edit_softmax').close();submit_edit()}}>\n            Submit\n        </button>\n\t</Modal>\n\n</main>\n\n<style>\n\tmain {\n\t\tmargin: 0px;\n\t}\n\t.footer {\n\t\tposition: fixed;\n\t\tleft: 0;\n\t\tbottom: 10px;\n\t\twidth: 100%;\n\t\tcolor: rgba(0, 0, 0, 0.8);\n\t\ttext-align: center;\n\t}\n\tnav {\n\t\tbackground-color: rgba(0, 0, 0, 0.8);\n\t\tfont-family: \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n\t\theight: 80px;\n\t\tmargin-top: -10px;\n\t\tmargin-left: -10px;\n\t\tmargin-right: -10px;\n\t\tpadding: 0;\n\t}  \n\t.left {\n\t\tfloat: left;\n\t\talign-items: center;\n\t\tmargin-top: -5px;\n\t\tmargin-left: 15px;\n\t\tmargin-right: 15px;\n\t}\n\t.right {\n\t\tmax-width: 980px;\n\t\tpadding-left: 20px;\n\t\tpadding-right: 20px;\n\t\tmargin: auto;\n\t\tbox-sizing: border-box;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\theight: 100%;\n\t\tfloat: right;\n\t}\n  \n\t.navbar-list {\n\t\tdisplay: none;\n\t\twidth: 100%;\n\t\tjustify-content: space-between;\n\t\tpadding: 0 40px;\n\t}\n  \n\t.navbar-list li {\n\t\tlist-style-type: none;\n\t\tmargin-left: 20px;\n\t}\n\ta.nav-button {\n\t\tdisplay: inline-block;\n\t\tpadding: 0.5em 1.25em;\n\t\tborder: 0.1em solid #FFFFFF;\n\t\tmargin: 0;\n\t\tborder-radius: 0.4em;\n\t\tbox-sizing: border-box;\n\t\ttext-decoration: none;\n\t\tfont-family: 'Roboto', sans-serif;\n\t\tfont-weight: 300;\n\t\tfont-size: 15px;\n\t\tcolor: #FFFFFF;\n\t\ttext-align: center;\n\t\ttransition: all 0.4s;\n\t}\n\ta.nav-button:hover {\n\t\tcolor: rgba(0, 0, 0, 0.8);\n\t\tbackground-color: #FFFFFF;\n\t}\n\n\ta.add_op_button {\n\t\tdisplay: inline-block;\n\t\tpadding: 0.5em 1.25em;\n\t\tborder: 0.1em solid #FFFFFF;\n\t\tmargin: 0;\n\t\tborder-radius: 0.4em;\n\t\tbox-sizing: border-box;\n\t\ttext-decoration: none;\n\t\tfont-family: 'Roboto', sans-serif;\n\t\tfont-weight: 300;\n\t\tfont-size: 15px;\n\t\tcolor: #FFFFFF;\n\t\ttext-align: center;\n\t\ttransition: all 0.4s;\n\t\twidth: 100%;\n\t}\n\ta.add_op_button:hover {\n\t\tcolor: rgba(0, 0, 0, 0.8);\n\t\tbackground-color: #FFFFFF;\n\t}\n\n\t#workspace{\n        height: 100%;\n\t\tmargin: 30px;\n\t\tborder-radius: 0.4em;\n\t\tbox-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n    }\n    #toolbar {\n        float: left;\n        height: 500px;\n        width: 220px;\n\t\tfont-family: 'Roboto', sans-serif;\n\t\tborder-radius: 0.4em 0em 0em 0.4em;\n\t\tbackground-color: white;\n        display: flex;\n        flex-flow: column;\n    }\n\t#toolbar_title {\n\t\tbackground-color: #39c0ba;\n\t\tcolor: white;\n\t\tpadding-left: 10px;\n\t\tpadding-right: 10px;\n\t\tpadding-top: 10px;\n\t\tpadding-bottom: 10px;\n\t\tborder-radius: 0.4em 0em 0em 0em;\n\t}\n\t#layers-title {\n\t\tmargin-top: -5px;\n\t\tmargin-bottom: 5px;\n\t\tmargin-left: 10px;\n\t\tmargin-right: 10px;\n\t\tfont-size: 15px;\n\t}\n\t#toolbar_list {\n\t\toverflow-y: scroll;\n\t\tpadding-top: 10px;\n\t}\n\t#toolbar li {\n\t\tlist-style-type: none;\n\t}\n    #toolbar_add_operator{\n        flex: 1 1 auto;\n    }\n\t#toolbar li {\n\t\tpadding-left: 10px;\n\t\tpadding-bottom: 1px;\n\t\tborder-top: 0.1em solid whitesmoke;\n\t}\n\t#toolbar li:hover {\n\t\tbackground-color: whitesmoke;\n\t\ttext-decoration: underline;\n\t}\n\t#toolbar li.hovered {\n\t\tbackground-color: whitesmoke;\n\t\ttext-decoration: underline;\n\t}\n    #canvas_container{\n        overflow: hidden;\n\t\tborder-radius: 0em 0.4em 0.4em 0em;\n    }\n\t#canvas_footer {\n\t\theight: 20px;\n\t\tbackground-color: lightgrey;\n\t\tpadding-right: 10px;\n\t\tfont-size: 10px;\n\t\tmargin-top: -4px;\n\t\tfont-family: \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n\t\ttext-align: right;\n\t\tpadding-top: 4px;\n\t\tpadding-right: 10px;\n\t\tpadding-left: 10px;\n\t}\n    #gui_canvas{\n        width: 100%;\n        height: 500px;\n    }\n\t.footer a {\n\t\tfont-family: \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n\t\tmargin-top: 10px;\n\t\tmargin-bottom: 10px;\n\t\tmargin-right: 20px;\n\t\tmargin-left: 20px;\n\t\ttext-decoration: none;\n\t\tcolor: rgba(0, 0, 0, 0.8);\n\t}\n\t.footer:hover a {\n\t\tcursor: pointer;\n\t}\n\t#git {\n\t\tmargin-right: 5px;\n\t\tmargin-bottom: -3px;\n\t}\n\t@media only screen and (min-width: 768px) {\n\t\t.navbar-list {\n\t\t\tdisplay: flex;\n\t\t\tpadding: 0;\n\t\t}\n\t\t.navbar-list a {\n\t\t\tdisplay: inline-flex;\n\t\t}\n\t}\n\t@media only screen and (max-width: 767px) {\n\t\t#workspace {\n\t\t\tmargin: 25px;\n\t\t}\n\t\t#toolbar {\n\t\t\twidth: 175px;\n\t\t\tfont-size: 12px;\n\t\t}\n\t\t.left {\n\t\t\tdisplay: none;\n\t\t}\n\t}\n</style>\n\n","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {\n\t\tname: 'world'\n\t}\n});\n\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","src_url_equal_anchor","current_component","src_url_equal","element_src","url","document","createElement","href","get_slot_context","definition","ctx","$$scope","tar","src","k","assign","slice","null_to_empty","value","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","svg_element","createElementNS","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","prevent_default","preventDefault","call","this","attr","attribute","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_input_value","input","set_style","key","important","style","removeProperty","setProperty","toggle_class","toggle","classList","set_current_component","component","get_current_component","Error","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","add_flush_callback","seen_callbacks","Set","flushidx","flush","saved_component","update","$$","pop","callback","has","add","clear","fragment","before_update","dirty","p","after_update","outroing","onTop","transition_in","block","local","delete","transition_out","o","outros","c","bind","index","props","undefined","bound","create_component","mount_component","customElement","on_mount","on_destroy","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","append_styles","parent_component","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","$on","type","indexOf","splice","$set","$$props","obj","$$set","keys","slot_ctx","div2","div1","svg","circle","line0","line1","div0","stopPropagation","slot","slot_definition","slot_changes","get_slot_context_fn","slot_context","lets","merged","len","Math","max","modals","getModal","id","topDiv","prevOnTop","closeCallback","visible","keyPress","ev","close","retVal","window","body","overflow","$$invalidate","open","$$value","div","span","button","span0","span1","span2","input_id_value","label_1","label_1_for_value","t1","t1_value","create_if_block","create_if_block_1","create_if_block_2","create_if_block_3","label","design","fontSize","checked","uniqueID","floor","random","state","__value","Network","constructor","tensors","operators","input_tensors","param_tensors","output_tensors","truth_tensors","loss","add_tensor","t","add_operator","op","clone","inputs","input_to","outputs","output_of","update_tensors","expand","func","network","inner_net","abstraction","old_operators_length","new_id","includes","j","index_of_op","op_index","to_string","str","form","String","Tensor","live","scalar","x","y","tx","ty","selected","calc_size","size_of_tensor","size","Func","num_inputs","calc_form","out","console","log","form1","form2","form1_total","form2_total","out_form","Operator","highlighted","function_table","apply","tensorRadius","get_tensor_bounds","operator_index","tensor_index","ans","x_min","x_max","y_min","y_max","output","input_index","inp0","inp1","rightest","highest","min","placeTensor","bounds","grid","getHoveredTensorIndices","hovered_tensors_list","getHoveredOperatorIndices","grabbedList","unmergeTensor","t0","functions","fi","op1","tnewind","todeleteind","findIndex","elem","mergeTensors","tensor_index0","tensor_index1","one_is_an_output","one_is_an_input","toDeleteIndex","noDeleteIndex","tmp","ind","deleteTensor","canvas","width","height","down","draggedIndex","dragged_operator_index","mouseX","mouseY","tmX","tmY","networks","selecting","inputs_margin","outputs_margin","input_box","list_index","input_boxes","output_boxes","get_network","new_operator","clear_selected","new_op","t_index","CanvasRenderingContext2D","prototype","roundRect","w","h","r","beginPath","moveTo","arcTo","closePath","Buttons","bool","press","grid_icon","Image","edit_tensor_by_operator","new_shape","propogate_shape","edit_tensor","forward","intra_operator_index","input1","input0","getElementById","doMouseDown","doMouseMove","doMouseUp","doDoubleClick","getContext","getBoundingClientRect","box","add_input_box","requestAnimationFrame","draw","drawTensor","tensorIndex","fillStyle","lineWidth","setLineDash","strokeStyle","rect","scalarTensorRadius","stroke","draw_grill","x1","y1","x2","y2","x3","y3","x4","y4","bars","solid","bar_gap","lineTo","drawOperator","operatorIndex","input2","functionGradient","createLinearGradient","addColorStop","drawImage","e","fillRect","input_box_height","abs","arc","PI","output_box_height","highlight_operators","op_list","clickedList","clickedIndex","t2","draggedList","dragged_operators","offsetX","offsetY","layerX","layerY","t0_value","operator_name","softmax_icon","img","img_src_value","li","li_class_value","hovered","prelu_icon","convolution_icon","fully_connected_icon","operator_type","button0","button1","br0","br1","h1","button2","button3","button4","label0","br2","label1","br3","label2","input_1","bar_logo","img0","img0_src_value","home_link","github_logo","img1","img1_src_value","github_link","forms_logo","img2","img2_src_value","feedback_link","main","nav","ul0","li0","a0","ul1","li1","a1","li2","a2","li3","a3","li4","a4","div8","div5","a5","div4","div3","div7","div9","a6","a7","a8","optimize","code","gen_python_file","encodeURIComponent","display","click","brython","gui_logic.init","toolbarItems","ops","update_operator_list","op_names","gui_logic.get_network","objects.function_table","op_names_with_numbers","count","new_name","update_tensor_shape","tensor","shape_str","parameter_shape","shape","current_num","parseInt","gui_logic.edit_tensor_by_operator","operator_id","update_fields","n","input0_str","output_str","input1_str","submit_edit","I_switch","O_switch","gui_logic.set_op_as_output","set_edit_operator","op_id","items","setClear","res","generate_network_list","net","netList","operatorList","this_operator","next_operator","kernel_str","setGenerate","gui_logic.new_operator","pytorch_code_generator","tf_code_generator","item","gui_logic.highlight_operators"],"mappings":"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"}