{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/Modal.svelte","../../src/define_network_objects.js","../../src/mouse_network_interaction.js","../../src/network_logic.js","../../src/gui_logic.js","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape_attribute_value(value.toString())}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.46.6' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","<!-- Taken from Svelte website exmaples -->\n<!-- \t* Modified as needed -->\n\n<script context=\"module\" lang=\"ts\">\n\tlet onTop   //keeping track of which open modal is on top\n\tconst modals={}  //all modals get registered here for easy future access\n\t\n\t// \treturns an object for the modal specified by `id`, which contains the API functions (`open` and `close` )\n\texport function getModal(id=''){\n\t\treturn modals[id]\n\t}\n</script>\n\n<script lang=\"ts\">\nimport {onDestroy} from 'svelte'\n\t\nlet topDiv\nlet visible=false\nlet prevOnTop\nlet closeCallback\n\nexport let id=''\n\nfunction keyPress(ev){\n\t//only respond if the current modal is the top one\n\tif(ev.key==\"Escape\" && onTop==topDiv) close() //ESC\n}\n\n/**  API **/\nfunction open(callback){\n\tcloseCallback=callback\n\tif(visible) return\n\tprevOnTop=onTop\n\tonTop=topDiv\n\twindow.addEventListener(\"keydown\",keyPress)\n\t\n\t//this prevents scrolling of the main window on larger screens\n\tdocument.body.style.overflow=\"hidden\" \n\n\tvisible=true\n\t//Move the modal in the DOM to be the last child of <BODY> so that it can be on top of everything\n\tdocument.body.appendChild(topDiv)\n}\n\t\nfunction close(retVal){\n\tif(!visible) return\n\twindow.removeEventListener(\"keydown\",keyPress)\n\tonTop=prevOnTop\n\tif(onTop==null) document.body.style.overflow=\"\"\n\tvisible=false\n\tif(closeCallback) closeCallback(retVal)\n}\n\t\n//expose the API\nmodals[id]={open,close}\n\t\nonDestroy(()=>{\n\tdelete modals[id]\n\twindow.removeEventListener(\"keydown\",keyPress)\n})\n\t\n</script>\n\n<div id=\"topModal\" class:visible bind:this={topDiv} on:click={()=>close()}>\n\t<div id='modal' on:click|stopPropagation={()=>{}}>\n\t\t<svg id=\"close\" on:click={()=>close()} viewBox=\"0 0 12 12\">\n\t\t\t<circle cx=6 cy=6 r=6 />\n\t\t\t<line x1=3 y1=3 x2=9 y2=9 />\n\t\t\t<line x1=9 y1=3 x2=3 y2=9 />\n\t\t</svg>\n\t\t<div id='modal-content'>\n\t\t\t<slot></slot>\n\t\t</div>\n\t</div>\n</div>\n\n<style>\n\t#topModal {\n\t\tvisibility: hidden;\n\t\tz-index: 9999;\n\t\tposition: fixed;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tbackground: #4448;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t}\n\t#modal {\n\t\tfont-family: \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n\t\tfont-size: 20px;\n\t\tposition: relative;\n\t\tborder-radius: 6px;\n\t\tbackground: white;\n\t\tfilter: drop-shadow(5px 5px 5px #555);\n\t\tpadding: 1em;\n\t\ttop: 50px;\n\t\tbottom: 500px;\n\t\tmargin: 200px;\n\t}\n\n\t.visible {\n\t\tvisibility: visible !important;\n\t}\n\n    #close {\n\t\tposition: absolute;\n\t\ttop: -12px;\n\t\tright: -12px;\n\t\twidth: 24px;\n\t\theight: 24px;\n\t\tcursor: pointer;\n\t\tborder: 0.07em solid rgba(0, 0, 0, 0.8);\n\t\tborder-radius: 50%;\n\t\tfill: white;\n\t}\t\n\n\t#close:hover {\n\t\tfill: rgba(0, 0, 0, 0.8);\n\t\tborder: 0.07em solid rgba(0, 0, 0, 0.8);\n\t\tborder-radius: 50%;\n\t}\n\n\t#close line {\n\t\tstroke: rgba(0, 0, 0, 0.8);\n\t\tstroke-width: 1;\n\t}\n\t#close:hover line {\n\t\tstroke: white;\n\t\tstroke-width: 1;\n\t}\n\n\t#close:focus {\n    \tborder-color: #3399ff;\n    \tbox-shadow: 0 0 0 2px #3399ff;\n  \t}\n\n\t#modal-content {\n\t\tmax-width: calc(100vw - 20px);\n\t\tmax-height: calc(100vh - 20px);\n\t\toverflow: auto;\n\t}\n</style>","\n\n\n/*\n    Network object\n\n    A network can be thought of as a DAG,\n        where the edges are tensors\n        and the vertecies are operators\n    \n*/\nexport class Network{\n    constructor(){\n        this.tensors = []         //actual tensor objects\n        this.operators = []       //actual operator objects\n\n        this.input_tensors = []   //indexes of this.tensors which are inputs to the net\n        this.param_tensors = []   //indexes of this.tensors which are params of the net\n        this.output_tensors = []  //indexes of this.tensors which are outputs to the net\n        this.truth_tensors = []   //indexes of this.tensors which are the ground truth  //UNUSED\n        this.loss = null          //index of this.operator which is the loss function   //UNUSED\n    }\n\n    //Adds a tensor to the network\n    // returns the index of the newly added tensor\n    add_tensor(t){\n        this.tensors.push(t);\n        return this.tensors.length - 1\n    }\n\n    //Adds an operator to the network\n    // returns the index of the newly added operator\n    // updates the references within the tensors of the operator\n    add_operator(op){\n        \n        var o = op.clone()\n\n        this.operators.push(o);\n        \n        for(let i = 0; i < o.inputs.length; i++){\n            this.tensors[o.inputs[i]].input_to.push(this.operators.length - 1)\n        }\n        \n        for(let i = 0; i < o.outputs.length; i++){\n            this.tensors[o.outputs[i]].output_of = this.operators.length - 1\n        }\n\n        return this.operators.length - 1\n    }\n\n\n    //Update the references that tensors hold of their operators \n    update_tensors(){\n\n        for(let i = 0; i < this.tensors.length; i++){\n            this.tensors[i].input_to = []\n            this.tensors[i].output_of = null\n        }\n        for(let k = 0; k < this.operators.length; k++){\n\n            for(let i = 0; i < this.operators[k].inputs.length; i++){\n                this.tensors[this.operators[k].inputs[i]].input_to.push(k)\n            }\n            \n            for(let i = 0; i < this.operators[k].outputs.length; i++){\n                this.tensors[this.operators[k].outputs[i]].output_of = k\n            }\n\n        }\n\n    }\n\n    //This function finds all abstraction operators and replaces them with their\n    // inner network\n    expand(){\n        //assumes that network is alright, ok, and doin well\n        //inner networks shouldn't have parameter tensors\n\n        \n        for(let i = 0; i < this.operators.length; i++){\n\n            //finding an abstraction operator to expand\n            if(this.operators[i].func == 0 && this.operators[i].network){\n                \n                //recursively expanding inner networks\n                var inner_net = this.operators[i].network;\n                inner_net.expand();\n\n                //Take out abstraction operator\n                var abstraction = this.operators[i]\n                \n                \n                //add new operators\n                var old_operators_length = this.operators.length\n\n                \n                this.operators[i] = inner_net.operators[0]\n                for(let k = 1; k < inner_net.operators.length; k++){\n                    this.add_operator(inner_net.operators[k])\n                }\n                \n\n                //Loop through each inner net tensor\n                //  this tensor will have a new id under the outer network\n                //    we determine this new id\n                //  in each tensor, find all operators it is associated with\n                //      by checking inputs_to and output_of\n                //    we then update the associations of these operators so that they\n                //      point to the new id\n                for(let k = 0; k < inner_net.tensors.length; k++){\n\n                    //these tensors will have a new id as measured by the outer network\n                    var new_id = k;\n\n                    \n                    if(inner_net.input_tensors.includes(k)){\n                        var index = inner_net.input_tensors.indexOf(k)\n\n                        new_id = abstraction.inputs[index]\n                    }else if(inner_net.output_tensors.includes(k)){\n                        var index = inner_net.output_tensors.indexOf(k)\n\n                        new_id = abstraction.outputs[index]\n                    }else{\n                        this.add_tensor(inner_net.tensors[k])\n                        new_id = this.tensors.length - 1\n                    }\n\n                    \n\n                    //finding all associated operators\n                    for(let j = 0; j < inner_net.tensors[k].input_to.length; j++){\n                        \n                        var index_of_op = inner_net.tensors[k].input_to[j]\n                        var op_index = inner_net.operators[ index_of_op ].inputs.indexOf(k)\n                        \n                        \n\n                        if(index_of_op == 0){\n                            \n                            this.operators[i].inputs[op_index] = new_id\n                        }else{\n                            \n                            this.operators[index_of_op + old_operators_length - 1].inputs[op_index] = new_id\n                        }\n                    }\n                    \n\n                    if(inner_net.tensors[k].output_of || inner_net.tensors[k].output_of == 0){\n\n                        \n                        var index_of_op = inner_net.tensors[k].output_of\n                        var op_index = inner_net.operators[ index_of_op ].outputs.indexOf(k)\n                        \n                        if(index_of_op == 0){\n                            this.operators[i].outputs[op_index] = new_id\n                        }else{\n                            this.operators[index_of_op + old_operators_length - 1].outputs[op_index] = new_id\n                        }\n                    }\n\n\n\n                }\n                \n                this.update_tensors()\n            }\n        }\n        \n    }\n\n    //Peer inside network, for debugging\n    to_string(){\n\n        var str = \"\"\n        \n        str += \"Tensors: \\n\"\n        \n        for(let i = 0; i < this.tensors.length; i++){\n            str += \"\\t\"+i+\":\\n\"\n            if(this.tensors[i].form){\n                str += \"\\t\\tform: \"+String(this.tensors[i].form)+\"\\n\"\n            }\n\n            str += \"\\t\\tinput_to:\\n\"\n            for(let k = 0; k < this.tensors[i].input_to.length; k++){\n                str += \"\\t\\t\\t\" + this.tensors[i].input_to[k] + \"\\n\"\n            }\n            \n\n            str += \"\\t\\toutput_of\\n\"\n            str += \"\\t\\t\\t\"+this.tensors[i].output_of + \"\\n\"\n        }\n\n        str += \"Operators: \\n\"\n        for(let i = 0; i < this.operators.length; i++){\n            str += \"\\t\"+i+\":\\n\"\n\n            str += \"\\t\\tinputs:\\n\"\n            for(let k = 0; k < this.operators[i].inputs.length; k++){\n                str += \"\\t\\t\\t\" + this.operators[i].inputs[k] + \"\\n\"\n            }\n\n            str += \"\\t\\toutputs:\\n\"\n            for(let k = 0; k < this.operators[i].outputs.length; k++){\n                str += \"\\t\\t\\t\" + this.operators[i].outputs[k] + \"\\n\"\n            }\n\n            str += \"\\t\\tfunc: \"+this.operators[i].func + \"\\n\"\n        }\n        \n        str += \"input_tensors:\\n\"\n        for(let i = 0; i < this.input_tensors.length; i++){\n            str += \"\\t\"+this.input_tensors[i]+\"\\n\"\n        }\n        \n        str += \"param_tensors:\\n\"\n        for(let i = 0; i < this.param_tensors.length; i++){\n            str += \"\\t\"+this.param_tensors[i]+\"\\n\"\n        }\n        \n        str += \"output_tensors:\\n\"\n        for(let i = 0; i < this.output_tensors.length; i++){\n            str += \"\\t\"+this.output_tensors[i]+\"\\n\"\n        }\n\n        return str\n    }\n}\n\n/*\n    Tensor object\n        in machine learning, a tensor is a multidimensional array\n        the size of these dimensions are held in 'form'\n            this is 'shape' in numpy\n        the tensor hold references to operators its associated with\n*/\nexport class Tensor{\n    constructor(live, form) {\n        this.scalar = false //I dont think I ever use this, i just check if this.size == 1\n\n        // live is boolean, it means the tensor form has been defined\n        if (live)\n            this.live = live\n        else\n            this.live = false\n\n        // form is like numpy shape\n        if(form)\n            this.form = form\n        else\n            this.form = []\n        \n        //center of tensor square, where it appears on canvas\n        this.x = 0;\n        this.y = 0;\n\n        this.tx = 0;\n        this.ty = 0;\n\n        this.selected = false //bool: iff selected by the mouse\n\n        //Which operators this tensor is an input to (as indexes in the network.operators)\n        this.input_to = []\n        //Which operator this tensor is an output of (as an index in the network.operators)\n        this.output_of = null;\n    }\n\n    // Number of elements in this tensor\n    calc_size(){\n        if(this.form){\n\n            var size_of_tensor = 1;\n\n            for(let k = 0; k < this.form.length; k++){\n                size_of_tensor *= this.form[k]\n            }\n\n            this.size = size_of_tensor\n            \n        }else{\n            this.size = 0\n        }\n        return this.size\n    }\n}\n\n\n\n//Class for the actual function that operators perform\n//There are three types:\n//  0: unary\n//  1: side binary\n//  2: top binary\nexport class Func{\n    constructor(name, num_inputs, type, layer = false){\n        this.name = name\n        this.num_inputs = num_inputs\n        this.type = type\n        this.layer = layer\n    }\n}\n\n\n/*\n    Operator Object\n        holds references to the tensors its associated with\n*/\nexport class Operator{\n    constructor(func){\n\n        //input and output tensors of this operator\n        // as indexes in the networks.tensors\n        this.inputs = []  \n        this.outputs = []\n\n        \n        this.func = func //Integer defining which function this operator is, as an entry in function_table\n        this.size = null //UNUSED\n\n        this.network = null //If this operator is an abstraction, this is the network it abstracts\n\n        this.highlighted = false //If highlighted by toolbar\n        \n    }\n\n    //Create deep copy of this operator\n    clone(){\n        var clone = new Operator(this.func)\n        clone.inputs = [...this.inputs]\n        clone.outputs = [...this.outputs]\n        clone.network = this.network\n        return clone\n    }\n\n}\n\n\nexport var function_table = Array.apply(null, Array(12)).map(function () {})\nfunction_table[0] = new Func(\"abstraction\", 0, 1)\nfunction_table[1] = new Func(\"Identity\",1, 0)\nfunction_table[2] = new Func(\"Fully Connected\", 2, 2, true)\nfunction_table[3] = new Func(\"Convolution\", 2, 2, true)\nfunction_table[4] = new Func(\"ReLU\", 1, 0)\nfunction_table[5] = new Func(\"Softmax\", 1, 0)\nfunction_table[6] = new Func(\"MaxPool\", 1, 0)\nfunction_table[7] = new Func(\"Zero Padding Layer\", 1, 0, true)\nfunction_table[8] = new Func(\"Batch Normalization\", 1, 0, true)\nfunction_table[9] = new Func(\"Avg Pooling\", 1, 0, true)\nfunction_table[10] = new Func(\"Global Avg Pooling\", 1, 0, true)\nfunction_table[11] = new Func(\"Prelu\", 1, 0, true) //gonna pretend its unary\nfunction_table[12] = new Func(\"Sigmoid\", 1, 0)\nfunction_table[13] = new Func(\"Softplus\", 1, 0)\nfunction_table[14] = new Func(\"Swish\", 1, 0)\nfunction_table[15] = new Func(\"Softsign\", 1, 0)\nfunction_table[16] = new Func(\"Tanh\", 1, 0)\n\n/* OLD FUNCTION TABLE\nfunction_table[0] = new Func(\"abstraction\", 0, 1)\nfunction_table[1] = new Func(\"identity\",1, 0)\nfunction_table[2] = new Func(\"add\", 2, 1)\nfunction_table[3] = new Func(\"subtract\", 2, 1)\nfunction_table[4] = new Func(\"scale\", 2, 2)\nfunction_table[5] = new Func(\"Fully Connected\", 2, 2, true)\nfunction_table[6] = new Func(\"amass\", 1, 0)\nfunction_table[7] = new Func(\"Softmax\", 1, 0) // softmax exponent base is 2s\nfunction_table[8] = new Func(\"hardmax\", 1, 0)\nfunction_table[9] = new Func(\"max\", 1, 0)\nfunction_table[10] = new Func(\"Convolution\", 2, 2, true)\nfunction_table[11] = new Func(\"squared dist\", 2, 1)\nfunction_table[12] = new Func(\"PReLU\", 1, 0)\nfunction_table[13] = new Func(\"LeakyReLU\", 1, 0) //negative slope is 0.1\nfunction_table[14] = new Func(\"Leaky to ReLU\", 1, 0) //LeakyReLU in training, ReLU in deployment\nfunction_table[15] = new Func(\"MaxPool\", 1, 0)\n*/\n","import {Network} from \"./define_network_objects\"\nimport {Tensor} from \"./define_network_objects\"\nimport {Operator} from \"./define_network_objects\"\nimport { function_table } from \"./define_network_objects\"\n\n\nconst tensorRadius = 10\n\n//Gets boundary of where tensor is allowed to move around\n// given the operators its associated with\nfunction get_tensor_bounds(network, operator_index, tensor_index){\n    var ans = {\n        x_min: -9999,\n        x_max: 10000,\n        y_min: -9999,\n        y_max: 10000\n    };\n\n    var o = network.operators[operator_index]\n\n    //Find out how this tensor is associated with this operator, \n    // whether it is an output or input\n    var output = false;\n    var output_index = 0;\n    for(let i = 0; i < o.outputs.length; i++){\n        if(o.outputs[i] == tensor_index){\n            output = true;\n            output_index = i;\n        }\n    }\n    //checking if this tensor is an input\n    var input_index = 0;\n    if(!output){\n        for(let i = 0; i < o.inputs.length; i++){\n            if(o.inputs[i] == tensor_index){\n                input_index = i;\n            }\n        }\n    }\n\n\n    var inp0 = network.tensors[o.inputs[0]]\n    var inp1 = network.tensors[o.inputs[1]]\n    var out  = network.tensors[o.outputs[0]]\n\n    //unary\n    if(function_table[o.func].type == 0){\n        if(output){\n            ans.x_min = inp0.x + 4 * tensorRadius\n        }else{\n            ans.x_max = out.x - 4 * tensorRadius\n        }\n    }\n\n    //side binary\n    if(function_table[o.func].type == 1){\n        if(output){\n            var rightest = Math.max(inp0.x, inp1.x)\n            ans.x_min = rightest + 4 * tensorRadius\n        }else{\n            if(input_index == 1){ //top tensor\n                ans.x_max = out.x - 4 * tensorRadius\n                \n                ans.y_max = inp0.y - 2 * tensorRadius\n            }else{\n                ans.x_max = out.x - 4 * tensorRadius\n\n                ans.y_min = inp1.y + 2 * tensorRadius\n            }\n        }\n    }\n\n    //top binary\n    if(function_table[o.func].type == 2){\n        if(output){\n            ans.x_min = inp1.x + 2 * tensorRadius\n            ans.y_min = inp1.y + 2 * tensorRadius\n        }else{\n            if(input_index == 1){ //top tensor\n                ans.x_min = inp0.x + 2 * tensorRadius\n                ans.x_max = out.x - 2 * tensorRadius\n\n                var highest = Math.min(out.y, inp0.y)\n                ans.y_max = highest - 2 * tensorRadius\n            }else{\n                ans.x_max = inp1.x - 2 * tensorRadius\n\n                ans.y_min = inp1.y + 2 * tensorRadius\n            }\n        }\n    }\n    \n\n    return ans;\n}\n\n\n\n\n\n\n\n//Tries to move the tensor to the give point,\n// accounts for all of the boundaries imposed on the tensor\nexport function placeTensor(network, tensor_index, x, y, bounds, grid = false){\n\n    network.tensors[tensor_index].x = x\n    network.tensors[tensor_index].y = y\n\n    //If grid, place tensor to nearest grid point\n    if(grid){\n        network.tensors[tensor_index].x -= (network.tensors[tensor_index].x + tensorRadius) % (tensorRadius * 2) - tensorRadius\n        network.tensors[tensor_index].y -= (network.tensors[tensor_index].y + tensorRadius) % (tensorRadius * 2) - tensorRadius\n    }\n\n\n    \n    \n    // get bounds of operators this tensor is an input to\n    for(let i = 0; i < network.tensors[tensor_index].input_to.length; i++){\n        let ans = get_tensor_bounds(network,network.tensors[tensor_index].input_to[i],tensor_index)\n        bounds.x_min = Math.max(bounds.x_min, ans.x_min)\n        bounds.x_max = Math.min(bounds.x_max, ans.x_max)\n        bounds.y_min = Math.max(bounds.y_min, ans.y_min)\n        bounds.y_max = Math.min(bounds.y_max, ans.y_max)\n    }\n    \n    // get bounds of operator this tensor is an output of\n    if(network.tensors[tensor_index].output_of != null){\n        let ans = get_tensor_bounds(network,network.tensors[tensor_index].output_of,tensor_index)\n        bounds.x_min = Math.max(bounds.x_min, ans.x_min)\n        bounds.x_max = Math.min(bounds.x_max, ans.x_max)\n        bounds.y_min = Math.max(bounds.y_min, ans.y_min)\n        bounds.y_max = Math.min(bounds.y_max, ans.y_max)\n    }\n\n    //Enforce the boundaries on the tensor\n    if( network.tensors[tensor_index].x < bounds.x_min){\n        network.tensors[tensor_index].x = bounds.x_min\n    }\n    if( network.tensors[tensor_index].x > bounds.x_max){\n        network.tensors[tensor_index].x = bounds.x_max\n    }\n    if( network.tensors[tensor_index].y < bounds.y_min){\n        network.tensors[tensor_index].y = bounds.y_min\n    }\n    if( network.tensors[tensor_index].y > bounds.y_max){\n        network.tensors[tensor_index].y = bounds.y_max\n    }\n    \n}\n\n\n\n\n\n\n\n//move tensors, accounting for obstructions, UNUSED\nexport function nudgeTensor(network, tensor_index, delta_x, delta_y){\n\n    placeTensor(network, tensor_index,\n         network.tensors[tensor_index].x + delta_x,\n         network.tensors[tensor_index].y + delta_y\n    )\n    \n}\n\n\n// returns list of indices of tensors\n//  that are intersecting with the given point\nexport function getHoveredTensorIndices(network, x, y) {\n    \n    var hovered_tensors_list = []\n\n    \n    for (let j = 0; j < network.tensors.length; j++) {\n        if (network.tensors[j].x - tensorRadius < x &&\n            network.tensors[j].x + tensorRadius > x &&\n            network.tensors[j].y - tensorRadius < y &&\n            network.tensors[j].y + tensorRadius > y) \n        {\n            hovered_tensors_list.push(j)\n        }\n    }\n\n    return hovered_tensors_list\n}\n\n\n\n// returns list of indices of Operators with mouse hovered over\n// We define 'hovering over' an operator as having the mouse\n// over the region that is to the right of the leftmost tensor in the operator, \n// and to the left of the rightmost tensor in the operator, \n// and under the topmost...\n\n//TODO: TENSORRESHAPE\nexport function getHoveredOperatorIndices(network, x, y) {\n\n    var grabbedList = []\n    \n    for (let j = 0; j < network.operators.length; j++) {\n        \n        var o = network.operators[j]\n\n        var inp0 = network.tensors[o.inputs[0]]\n        var inp1 = network.tensors[o.inputs[1]]\n        var out  = network.tensors[o.outputs[0]]\n\n        var x_min =  1000000\n        var x_max = -1000000\n        var y_min =  1000000\n        var y_max = -1000000\n\n        if(o.func < 0){\n            continue\n        }\n\n        if(function_table[o.func].type == 0){\n            x_min = inp0.x + tensorRadius\n            x_max = out.x  - tensorRadius\n            y_min = Math.min(inp0.y - tensorRadius, out.y - tensorRadius)\n            y_max = Math.max(inp0.y + tensorRadius, out.y + tensorRadius)\n        }\n\n        if(function_table[o.func].type == 2){\n            x_min = inp0.x + tensorRadius\n            x_max = out.x  - tensorRadius\n            y_min = inp1.y + tensorRadius\n            y_max = Math.max(inp0.y + tensorRadius, out.y + tensorRadius)\n        }\n\n        if(function_table[o.func].type == 1){\n            x_min = Math.min(inp0.x + tensorRadius, inp1.x + tensorRadius)\n            x_max = out.x  - tensorRadius\n            y_min = inp1.y - tensorRadius\n            y_max = inp0.y + tensorRadius\n        }\n        \n        if (x_min < x &&\n            x_max > x &&\n            y_min < y &&\n            y_max > y) {\n            grabbedList.push(j)\n        }\n    }\n    \n    return grabbedList\n}\n","import {Network} from \"./define_network_objects\"\nimport {Tensor} from \"./define_network_objects\"\nimport {function_table} from \"./define_network_objects\"\nimport {Operator} from \"./define_network_objects\"\n\n\n\nconst unmergeDist = 20\n\n// Returns a boolean answer to the question of wether the given network is sequential\n//  A network is sequential if it can be modeled by the tf.keras.sequential API\nexport function is_sequential(network){\n    \n    //Ensuring the network only has one input and one output\n    if(network.input_tensors.length != 1 || network.output_tensors.length != 1){\n        \n        return false\n    }\n    \n    \n    //Ensuring each tensor is only input to a single operator at most\n    for(let i = 0; i < network.tensors.length; i++){\n        \n        if(network.tensors[i].input_to.length > 1) {\n            return false\n        }\n    }\n\n    //Ensure parameter tensors have no inputs\n    for(let i = 0; i < network.operators.length; i++){\n        \n        if(network.operators[i].inputs.length > 1){\n            \n            if(network.tensors[network.operators[i].inputs[1]].inputs_of > 0){\n                \n                return false\n            }\n\n            if(network.operators[i].inputs[1] in network.input_tensors){\n\n                return false\n            }\n        }\n    }\n\n    \n    var visited = Array(network.operators.length).fill(false)\n    var current = network.tensors[network.input_tensors[0]].input_to[0]\n    if(isNaN(current)){\n        \n        return false\n    }\n\n    \n    //Ensuring each operator flows from the input tensor, with no cycles\n    for(let i = 0; i < network.operators.length - 1; i++){\n        \n        if(visited[current]){\n            \n            return false\n        }\n        \n        visited[current] = true\n\n        current = network.tensors[network.operators[current].outputs[0]].input_to[0]\n\n        if(isNaN(current)){\n            \n            return false\n        }\n    }\n    \n    if(network.output_tensors[0] != network.operators[current].outputs[0]){\n        \n        return false\n    }\n    \n    return true\n}\n\n\n// This function returns a list of operator indecies\n// such that computing in this order creates\n// no dependency hazards\nexport function operator_ordering(network){\n    \n    var ordered_operators = []\n    var computed_tensors = network.input_tensors.concat(network.param_tensors)\n\n    console.log(network.param_tensors)\n    console.log(\"a\", computed_tensors)\n    while(computed_tensors.length != 0){\n        var no_computation = true\n\n        //find operators which can now be computed\n        for(let i = 0; i < network.operators.length; i++){\n\n            //only check operators we have not already computed\n            if(!ordered_operators.includes(i)){\n                var all_inputs_are_computed = true\n\n                //check if all inputs have been computed\n                for(let k = 0; k < network.operators[i].inputs.length; k++){\n                    if(!computed_tensors.includes(network.operators[i].inputs[k])){\n                        all_inputs_are_computed = false\n                    }\n                }\n                \n                //if all inputs have been computed, then the operator may be computed\n                // and all of the operators outputs can be computed\n                if(all_inputs_are_computed){\n                    no_computation = false\n\n                    ordered_operators.push(i)\n\n                    for(let k = 0; k < network.operators[i].outputs.length; k++){\n                        computed_tensors.push(network.operators[i].outputs[k])\n                    }\n                }\n            }\n        }\n\n        if(computed_tensors.length == network.tensors.length){\n            break\n        }else if(no_computation){\n            //If we can perform no more computations, and we have not computed every tensor\n            // then the network is ill-formed\n            return [];\n        }\n    }\n\n\n    return ordered_operators\n}\n\n\n\n\nexport function unmergeTensor(network, tensor_index) {\n    var t0 = network.tensors[tensor_index]\n\n    // Save function we are inputting to, and delete that shit\n    var functions = t0.input_to\n    t0.input_to = []\n\n    for (let i = 0; i < functions.length; i++) {\n        var fi = functions[i]\n        var op1 = network.operators[fi]\n\n        // create new tensor\n        var tnewind = network.tensors.length\n        network.add_tensor(new Tensor(true))\n        \n        var todeleteind = op1.inputs.findIndex((elem) => elem == tensor_index)\n        op1.inputs[todeleteind] = tnewind\n\n        // update position\n        network.tensors[tnewind].x = t0.x + unmergeDist\n        network.tensors[tnewind].y = t0.y\n\n        network.tensors[tnewind].input_to = [fi]\n        network.tensors[tnewind].output_of = null\n        network.tensors[tnewind].live = false\n    }\n\n    t0.x -= unmergeDist\n    t0.live = false\n\n}\n\n\n// Take two tensors and replace them with a single tensor\nexport function mergeTensors(network, tensor_index0, tensor_index1) {\n\n    if (network.tensors[tensor_index0].live && network.tensors[tensor_index1].live) {\n        console.log(\"Both merged tensors are live, so don't do anything.\")\n        return\n    }\n\n    \n    var one_is_an_output = false\n    var output_index = 0\n    var one_is_an_input = false\n    var input_index = 0\n    for(let i = 0; i < network.output_tensors.length; i++){\n        if(network.output_tensors[i] == tensor_index0 || network.output_tensors[i] == tensor_index1){\n            if(one_is_an_output){\n                console.log(\"Cant merge two outputs\")\n                return\n            }\n            one_is_an_output = true;\n        }\n    }\n    for(let i = 0; i < network.input_tensors.length; i++){\n        if(network.input_tensors[i] == tensor_index0 || network.input_tensors[i] == tensor_index1){\n            if(one_is_an_input){\n                console.log(\"Cant merge two inputs\")\n                return\n            }\n            one_is_an_input = true;\n        }\n    }\n\n\n    if(one_is_an_output && one_is_an_input){\n        console.log(\"Cant merge, one is an input and one is an output\")\n        return\n    }\n\n    if(one_is_an_output){\n        network.output_tensors.splice(output_index, 1)\n    }\n    if(one_is_an_input){\n        network.input_tensors.splice(input_index, 1)\n    }\n    \n        \n    let t0 = network.tensors[tensor_index0]\n    let t1 = network.tensors[tensor_index1]\n\n    let toDeleteIndex = tensor_index1\n    let noDeleteIndex = tensor_index0\n\n\n\n    // t0 is already an output to a function and stays, t1 is an input to a function and is deleted\n    if (t0.output_of != null && t1.output_of == null) {}\n    else if (t1.output_of != null && t0.output_of == null) {\n        var tmp = t1\n        t1 = t0\n        t0 = tmp\n        toDeleteIndex = tensor_index0\n        noDeleteIndex = tensor_index1\n    } else if (t0.output_of == null && t1.output_of == null) {}\n    else {\n        console.log(\"Error merging, only one input must have an output\")\n        return\n    }\n\n    // check that they aren't input and output to the same function\n    if (t1.input_to.length > 0 && t0.output_of == t1.input_to[0]) {\n        console.log(\"Error merging, these are input and output of the same function\")\n        return\n    }\n    \n    if(t1.input_to.length > 0){\n        let ind = network.operators[t1.input_to[0]].inputs.indexOf(toDeleteIndex)\n        network.operators[t1.input_to[0]].inputs[ind] = noDeleteIndex\n    }\n\n    t0.input_to = t1.input_to\n    \n    t0.live = (t0.live || t1.live)\n\n\n    network.tensors[noDeleteIndex].selected = true\n\n    if(one_is_an_output){\n        network.output_tensors.push(noDeleteIndex)\n    }else if(one_is_an_input){\n        network.input_tensors.push(noDeleteIndex)\n    }\n    \n    deleteTensor(network, toDeleteIndex)\n}\n\n\n\nfunction deleteTensor(network, index) {\n\n    // in operators, decrement input and output indices if greater than deleted indices\n    for (let i = 0; i < network.operators.length; i++) {\n        for (let j = 0; j < network.operators[i].inputs.length; j++) {\n            if (network.operators[i].inputs[j] > index) {\n                network.operators[i].inputs[j] -= 1\n            }\n        }\n        for (let j = 0; j < network.operators[i].outputs.length; j++) {\n            if (network.operators[i].outputs[j] > index) {\n                network.operators[i].outputs[j] -= 1\n            }\n        }\n    }\n\n    // update indexes in input_tensors and output_tensors lists\n    for(let i = 0; i < network.input_tensors.length; i++){\n        if (network.input_tensors[i] > index) {\n            network.input_tensors[i] -= 1\n        }\n    }\n    for(let i = 0; i < network.param_tensors.length; i++){\n        if (network.param_tensors[i] > index) {\n            network.param_tensors[i] -= 1\n        }\n    }\n    for(let i = 0; i < network.output_tensors.length; i++){\n        if (network.output_tensors[i] > index) {\n            network.output_tensors[i] -= 1\n        }\n    }\n\n   \n    // delete relevant tensor\n    return network.tensors.splice(index, 1)\n}\n\nexport function deleteOperator(network, index){\n\n    var op = network.operators[index]\n\n    //First we deal with the tensors associated with this operator\n    //\n    // We delete any tensor which is associated only with this operator\n    for(let i = 0; i < op.inputs.length; i++){\n        let tensor = network.tensors[op.inputs[i]]\n        let ops_associated_with_this_tensor = tensor.input_to\n        \n        if(tensor.output_of != null){\n            ops_associated_with_this_tensor.push(tensor.output_of)\n        }\n\n        //delete if this tensor is only associated with this op\n        if(ops_associated_with_this_tensor.length == 1){\n            deleteTensor(network, op.inputs[i])\n        }\n    }\n    for(let i = 0; i < op.outputs.length; i++){\n        let tensor = network.tensors[op.outputs[i]]\n        let ops_associated_with_this_tensor = tensor.input_to\n        \n        if(tensor.output_of != null){\n            ops_associated_with_this_tensor.push(tensor.output_of)\n        }\n\n        //delete if this tensor is only associated with this op\n        if(ops_associated_with_this_tensor.length == 1){\n            deleteTensor(network, op.outputs[i])\n        }\n    }\n\n    //Remove operator\n    network.operators.splice(index, 1)\n    \n    //Update references to operators in tensors\n    network.update_tensors()\n}\n\n","import {Network} from \"./define_network_objects\"\nimport {Tensor} from \"./define_network_objects\"\nimport {Operator} from \"./define_network_objects\"\nimport { function_table } from \"./define_network_objects\"\n\nimport { placeTensor } from \"./mouse_network_interaction\"\nimport {nudgeTensor} from \"./mouse_network_interaction\"\nimport {getHoveredTensorIndices} from \"./mouse_network_interaction\"\nimport {getHoveredOperatorIndices} from \"./mouse_network_interaction\"\n\nimport {unmergeTensor} from \"./network_logic\"\nimport {mergeTensors} from \"./network_logic\"\n\n\n\n\nvar canvas    //html canvas object\nvar ctx       //context rendering object\n\n\nvar width = 0;   //width of canvas\nvar height = 0;  //height of canvas\n\n\nconst tensorRadius = 10\n\n\nvar down = false                  //iff mouse down\nvar draggedIndex = -1             //index of tensor being dragged\nvar dragged_operator_index = -1   //index of operator being dragged\n\n\nvar last_mouseX = 0;              //mouseX on last frame\nvar last_mouseY = 0;              //mouseY on last frame\nvar mouseX = 0;                   //mouseX\nvar mouseY = 0;                   //mouseY\nvar tmX = 0;                      //starting X of selection\nvar tmY = 0;                      //starting Y of selection\n\nvar last_frame = Date.now()       //Time last frame was drawn\nvar this_frame = Date.now()       //Time in this frame\n\nvar networks = []                 //list of networks we are working with\nvar networkIndex = 0              //network we are working with\nnetworks.push(new Network())      //Inital network\n\n\nvar selecting = false             //iff selecting\nvar grid = true                   //iff grid is on\n\n\nvar inputs_margin = tensorRadius*2 * 5     // width of inputs area\nvar outputs_margin = tensorRadius*2 * 5    // width of outputs area\n\nvar input_box_width = tensorRadius*2 * 4\nvar input_box_height = tensorRadius*2 * 3\n\n// What appears in the inputs or outputs area\nclass input_output_box{\n    constructor(y){\n        this.list_index = -1 //index in the network input_tensors or output_tensors list\n        this.y = y\n    }\n}\n\n\nvar input_boxes = []   // boxes on the left\n\nvar output_boxes = []  // boxes on the right\n\n\nvar output_box_width  = tensorRadius*2 * 4 \nvar output_box_height = tensorRadius*2 * 3\n\nvar box_seperation    = tensorRadius*0.75\n\n\n\n\n\n//Draws a rounded rectangle\n// x: x corner\n// y: y corner\n// w: width\n// h: height\n// r: radius of circle of rounded edge\nCanvasRenderingContext2D.prototype.roundRect = function (x, y, w, h, r) {\n    if (w < 0) {\n        w = -w\n        x -= w\n    }\n    if (h < 0) {\n        h = -h\n        y -= h\n    }\n\n\n    if (w < 2 * r) r = w / 2;\n    if (h < 2 * r) r = h / 2;\n    this.beginPath();\n    this.moveTo(x+r, y);\n    this.arcTo(x+w, y,   x+w, y+h, r);\n    this.arcTo(x+w, y+h, x,   y+h, r);\n    this.arcTo(x,   y+h, x,   y,   r);\n    this.arcTo(x,   y,   x+w, y,   r);\n    this.closePath();\n    return this;\n}\n\n\n\n\n// Adds a new input box the inputs area\nfunction add_input_box(y, tensor_index = null){\n    \n    // If tensor doesnt exist, create it\n    if (tensor_index == null){\n\n        tensor_index = networks[networkIndex].add_tensor(new Tensor(false))\n        \n        // Set position of tensor\n        networks[networkIndex].tensors[tensor_index].y = y\n        networks[networkIndex].tensors[tensor_index].x = inputs_margin + tensorRadius * 2\n\n        //Add tensor to network inputs\n        networks[networkIndex].input_tensors.push(tensor_index)\n    }\n\n    \n    var box = new input_output_box(y)\n\n    for (let i = 0; i < networks[networkIndex].input_tensors.length; i++){\n        if(networks[networkIndex].input_tensors[i] == tensor_index) {\n            box.list_index = i;\n        }\n    }\n    \n    input_boxes.push(box)\n}\n\n\nfunction add_output_box(y, tensor_index = null){\n    \n    // If tensor doesnt exist, create it\n    if (tensor_index == null){\n\n        tensor_index = networks[networkIndex].add_tensor(new Tensor(false))\n        \n        // Set position of tensor\n        networks[networkIndex].tensors[tensor_index].y = y\n        networks[networkIndex].tensors[tensor_index].x = (width - outputs_margin - tensorRadius * 2) - ( (width - outputs_margin - tensorRadius * 2) % (tensorRadius*2) )\n        \n        //Add tensor to network outputs\n        networks[networkIndex].output_tensors.push(tensor_index)\n    }\n\n    var box = new input_output_box(y)\n    for(let i = 0; i < networks[networkIndex].output_tensors.length; i++){\n        if(networks[networkIndex].output_tensors[i] == tensor_index){\n            box.list_index = i;\n        }\n    }\n    \n    output_boxes.push(box)\n}\n\n\n// Returns the network object of the network we are working on\nexport function get_network(){\n    return networks[networkIndex]\n}\n\n// Removes everything from network\nexport function clear_network(){\n    networks[networkIndex] = new Network()\n    network_init()\n}\n\n\n\n\n//Introduce a new operator to the canvas and network\n// func is and int, which is the type of operator\n// x and y are the positions of the top left corner of the operator\nexport function new_operator(func, x = inputs_margin + tensorRadius*2 * 2, y = tensorRadius*2 * 3){\n    clear_selected()\n\n    let new_op = new Operator()\n    new_op.func = func\n\n    var t_index = networks[networkIndex].tensors.length\n    \n    //unary operator\n    if(function_table[func].type == 0){\n\n        //Add input tensor\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 0].x = x + tensorRadius*2 * 0\n        networks[networkIndex].tensors[t_index + 0].y = y + tensorRadius*2 * 0\n        new_op.inputs  = [t_index + 0]\n\n        //Add output tensor\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 1].x = x + tensorRadius*2 * 3\n        networks[networkIndex].tensors[t_index + 1].y = y + tensorRadius*2 * 0\n        new_op.outputs = [t_index + 1]\n\n    }\n\n    //top binary operator\n    if(function_table[func].type == 2){\n        \n        //Add first tensor \n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 0].x = x + tensorRadius*2 * 0\n        networks[networkIndex].tensors[t_index + 0].y = y + tensorRadius*2 * 2\n\n        //Add second tensor\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 1].x = x + tensorRadius*2 * 2\n        networks[networkIndex].tensors[t_index + 1].y = y + tensorRadius*2 * 0\n\n        //Add output tensor\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 2].x = x + tensorRadius*2 * 4\n        networks[networkIndex].tensors[t_index + 2].y = y + tensorRadius*2 * 2\n\n        new_op.inputs  = [t_index + 0, t_index + 1]\n        new_op.outputs = [t_index + 2]\n\n        networks[networkIndex].param_tensors.push(t_index + 1)\n    }\n    \n    //side binary operator\n    if(function_table[func].type == 1){\n\n        //Add first input tensor\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 0].x = x + tensorRadius*2 * 0\n        networks[networkIndex].tensors[t_index + 0].y = y + tensorRadius*2 * 2\n\n        //Add second input tensor\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 1].x = x + tensorRadius*2 * 0\n        networks[networkIndex].tensors[t_index + 1].y = y + tensorRadius*2 * 0\n\n        //Add output tensor\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 2].x = x + tensorRadius*2 * 3\n        networks[networkIndex].tensors[t_index + 2].y = y + tensorRadius*2 * 1\n\n        new_op.inputs  = [t_index + 0, t_index + 1]\n        new_op.outputs = [t_index + 2]\n    }\n\n    networks[networkIndex].add_operator(new_op)\n}\n\n\n//Button object, for toggle buttons on canvas\nclass Button{\n    constructor(x, y, w, h, bool=false){\n        this.x = x\n        this.y = y\n        this.w = w\n        this.h = h\n        this.bool = bool;\n    }\n\n    //Detects if a click here is on the button, if so, flip the bool\n    press(x, y){\n        if(this.x <= x && this.x + this.w >= x\n        && this.y <= y && this.y + this.h >= y){\n            this.bool = !this.bool\n        }\n    }\n}\n\n\n\n\nvar Buttons = []\n\n//Add grid button\nvar b = new Button(inputs_margin + tensorRadius*1, tensorRadius*1, tensorRadius*2, tensorRadius*2, true);\nButtons.push(b)\nvar grid_icon = new Image()\ngrid_icon.src = \"grid_icon.png\"\n\n\n\n//edit an tensor from the operator edit screen\n//  input is bool, whether the tensor is an input to the operator or not\nexport function edit_tensor_by_operator(operator_index, tensor_index, input, new_shape){\n    \n    if(input){\n        tensor_index = networks[networkIndex].operators[operator_index].inputs[tensor_index]\n    }else{\n        tensor_index = networks[networkIndex].operators[operator_index].outputs[tensor_index]\n    }\n    edit_tensor(tensor_index, new_shape)\n}\n\n\n// Update shape or form of the tensor, propogates the effects to other tensors\nexport function edit_tensor(tensor_index, new_shape){\n    var t = networks[networkIndex].tensors[tensor_index]\n    t.form = new_shape\n    t.calc_size()\n    \n    t.live = true\n    for(let i = 0; i < t.input_to.length; i++){\n        propogate_shape(t.input_to[i], tensor_index, true)\n    }\n    if(t.output_of != null){\n        propogate_shape(t.output_of, tensor_index, false)\n    }\n}\n\n\n//Propogates the effects of a tensor shape change\n//  forward is bool, meaning we are propogating from inputs to outputs, or vice versa if false\n//TODO: for DAG i gotta worry about infinite loops\n//This code assumes that convolution is only 2D\nfunction propogate_shape(operator_index,tensor_index, forward){\n\n    if(operator_index == null){\n        return;\n    }\n\n    \n    var intra_operator_index = 0; //index of tensor in either operator.inputs or operator.outputs\n    var operator = networks[networkIndex].operators[operator_index]\n\n    //Finding the intra_operator_index of the tensor\n    if(forward){\n        for(let i = 0; i < operator.inputs.length; i++){\n            if(operator.inputs[i] == tensor_index){\n                intra_operator_index = i\n            }\n        }\n    }else{\n        for(let i = 0; i < operator.outputs.length; i++){\n            if(operator.outputs[i] == tensor_index){\n                intra_operator_index = i\n            }\n        }\n    }\n\n    var input0 = networks[networkIndex].tensors[operator.inputs[0]]\n    var output = networks[networkIndex].tensors[operator.outputs[0]]\n    var input1\n    if(operator.inputs.length > 1)\n        input1 = networks[networkIndex].tensors[operator.inputs[1]]\n    \n    var unary_input_output_share_shape = false\n\n    switch(operator.func){\n        case 1:// Identity\n            unary_input_output_share_shape = true\n            break;\n        case 2://Fully Connected\n            if(forward){\n                if(intra_operator_index == 0){\n                    if(output.live){\n                        input1.form = [input0.size, output.size]\n                        input1.live = true\n                        input1.calc_size()\n                        propogate_shape(input1.output_of, operator.inputs[1], false)\n                    }else if(input1.live){\n                        output.form = [input1.form[1]]\n                        output.live = true\n                        output.calc_size()\n                        for(let i = 0; i < output.input_to; i++){\n                            propogate_shape(output.input_to[i], operator.outputs[0], true)\n                        }\n                    }\n                }else{\n                    input0.form = [input1.form[0]]\n                    input0.live = true\n                    input0.calc_size()\n                    propogate_shape(input0.output_of, operator.inputs[0], false)\n\n                    output.form = [input1.form[1]]\n                    output.live = true\n                    output.calc_size()\n                    for(let i = 0; i < output.input_to; i++){\n                        propogate_shape(output.input_to[i], operator.outputs[0], true)\n                    }\n                }\n            }else{\n                if(input0.live){\n                    input1.form = [input0.size, output.size]\n                    input1.live = true\n                    input1.calc_size()\n                    propogate_shape(input1.output_of, operator.inputs[1], false)\n                }\n            }\n            break;\n        case 3://Convolution\n            if(forward){\n                if(intra_operator_index == 0){\n                    if(output.live){\n                        input1.form = [input0.form[0] - output.form[0] + 1, input0.form[1] - output.form[1] + 1, output.form[2]]\n                        input1.live = true\n                        input1.calc_size()\n                        propogate_shape(input1.output_of, operator.inputs[1], false)\n                    }else if(input1.live){\n                        output.form = [input0.form[0] - input1.form[0] + 1, input0.form[1] - input1.form[1] + 1, input1.form[2]]\n                        output.live = true\n                        output.calc_size()\n                        for(let i = 0; i < output.input_to; i++){\n                            propogate_shape(output.input_to[i], operator.outputs[0], true)\n                        }\n                    }\n                }else{\n                    if(output.live){\n                        input0.form = [input1.form[0] + output.form[0] - 1, input1.form[1] + output.form[1] - 1]\n                        input0.live = true\n                        input0.calc_size()\n                        propogate_shape(input1.output_of, operator.inputs[1], false)\n                    }else if(input0.live){\n                        output.form = [input0.form[0] - input1.form[0] + 1, input0.form[1] - input1.form[1] + 1, input1.form[2]]\n                        output.live = true\n                        output.calc_size()\n                        for(let i = 0; i < output.input_to; i++){\n                            propogate_shape(output.input_to[i], operator.outputs[0], true)\n                        }\n                    }\n                }\n            }else{\n                if(input0.live){\n                    input1.form = [input0.form[0] - output.form[0] + 1, input0.form[1] - output.form[1] + 1, output.form[2]]\n                    input1.live = true\n                    input1.calc_size()\n                    propogate_shape(input1.output_of, operator.inputs[1], false)\n                }else if(input1.live){\n                    input0.form = [input1.form[0] + output.form[0] - 1, input1.form[1] + output.form[1] - 1]\n                    input0.live = true\n                    input0.calc_size()\n                    propogate_shape(input1.output_of, operator.inputs[1], false)\n                }\n            }\n            break;\n        case 4://ReLU\n            unary_input_output_share_shape = true;\n            break;\n        case 5://Softmax\n            unary_input_output_share_shape = true;\n            break;\n        case 6:// Maxpool\n            //No shape propogation\n            break;\n        case 7://Zero Padding layer\n            //No shape propogation\n            break;\n        case 8:// Batch Normalization\n            unary_input_output_share_shape = true;\n            break;\n        case 9:// Avg Pool\n            //No shape propogation\n            break;\n        case 10:// Global Average Pool\n            \n            //TODO\n            \n            break;\n        case 11:// Prelu\n            unary_input_output_share_shape = true;\n            break;\n        case 12:// Sigmoid\n            unary_input_output_share_shape = true;\n            break;\n        case 13:// Softplus\n            unary_input_output_share_shape = true;\n            break;\n        case 14:// Swish\n            unary_input_output_share_shape = true;\n            break;\n        case 15:// Softsign\n            unary_input_output_share_shape = true;\n            break;\n        case 16:// Tanh\n            unary_input_output_share_shape = true;\n            break;\n        default:\n            break;\n    }\n\n    if(unary_input_output_share_shape){\n        if(forward){\n            output.form = input0.form\n            output.live = true\n            output.calc_size()\n            for(let i = 0; i < output.input_to; i++){\n                propogate_shape(output.input_to[i], operator.outputs[0], true)\n            }\n        }else{\n            input0.form = output.form\n            input0.live = true\n            input0.calc_size()\n            propogate_shape(input0.output_of, operator.inputs[0], false)\n        }\n    }\n\n}\n\n\n//Sets this operator as an input\nexport function set_op_as_input(operator_index){\n    \n    var n = networks[networkIndex]\n    n.input_tensors.push(n.operators[operator_index].inputs[0])\n    \n}\n\n//Sets this operator as an output\nexport function set_op_as_output(operator_index){\n    \n    var n = networks[networkIndex]\n    n.output_tensors.push(n.operators[operator_index].outputs[0])\n    \n}\n\n\n//Initializes the input and output boxes\nfunction network_init(){\n    //Add initial input box , cus every network must have at least one input\n    add_input_box(height/2 - (height/2 % (tensorRadius*2)))\n\n    //Add initial output box, cus every network must have at least one output\n    add_output_box(height/2 - (height/2 % (tensorRadius*2)))\n\n}\n\n// Initialize the canvas and some objects\n//   is called after html canvas objects loads\nexport function init() {\n\n    //Initliaze canvas so we can draw on it and listen to mouse events\n    canvas = document.getElementById(\"gui_canvas\")\n    canvas.addEventListener(\"mousedown\", doMouseDown, false)\n    canvas.addEventListener(\"mousemove\", doMouseMove, false)\n    canvas.addEventListener(\"mouseup\", doMouseUp, false)\n    canvas.addEventListener(\"dblclick\", doDoubleClick, false)\n    ctx = canvas.getContext(\"2d\");\n\n    //making sure canvas takes up the space its given\n    canvas.width = canvas.getBoundingClientRect().width\n    canvas.height = canvas.getBoundingClientRect().height\n\n    width = canvas.width;\n    height = canvas.height;\n\n    //Initializing frame times\n    last_frame = Date.now()\n    this_frame = Date.now()\n\n    //Creating input and output boxes\n    network_init()\n\n    \n    //Drawing the first frame\n    window.requestAnimationFrame(draw);\n}\n\n\n\n\n// Draws the tensor specified by tensorIndex\nfunction drawTensor(network, tensorIndex) {\n    let t = network.tensors[tensorIndex]\n\n    // find out if tensor is an input or output of the network\n    // we will draw it a different color if so ////////////////\n    var input = false                                        //\n    var output = false\n\n    for(let i = 0; i < network.input_tensors.length; i++){\n        if(network.input_tensors[i] == tensorIndex){\n            input = true\n        }\n    }\n    for(let i = 0; i < network.output_tensors.length; i++){\n        if(network.output_tensors[i] == tensorIndex){\n            output = true\n        }\n    }                                                        //\n    ///////////////////////////////////////////////////////////\n\n    // If the tensor is live, draw it solid, otherwise draw it see through\n    if (t.live) {\n\n        if(input){\n            ctx.fillStyle = \"#F2C8A6\"\n        }else if(output){\n            ctx.fillStyle = \"#A6D0F2\"\n        }else{\n            ctx.fillStyle = \"#FFFFFF\"\n        }\n        ctx.lineWidth = 1\n        ctx.setLineDash([])\n        ctx.strokeStyle = 'black'\n    }\n    else {\n        ctx.fillStyle = \"rgba(255,255,255,0)\"\n        ctx.lineWidth = 1\n        ctx.setLineDash([3,4])\n        ctx.strokeStyle = 'Grey'\n        if(input){\n            ctx.strokeStyle = \"#F2C8A6\"\n        }else if(output){\n            ctx.strokeStyle = \"#A6D0F2\"\n        }else\n            ctx.strokeStyle = \"#888888\"\n    }\n\n    //Draw outline\n    ctx.beginPath()\n    if (t.scalar) {\n        ctx.rect(t.x - scalarTensorRadius, t.y - scalarTensorRadius, 2 * scalarTensorRadius, 2 * scalarTensorRadius)\n    }\n    else {\n        ctx.rect(t.x - tensorRadius, t.y - tensorRadius, 2 * tensorRadius, 2 * tensorRadius)\n    }\n    ctx.fill()\n    ctx.stroke()\n    \n    //Draw inside\n    if(t.selected){\n        ctx.fillStyle = \"rgba(255,255,255,0)\"\n        ctx.lineWidth = 1\n        ctx.strokeStyle = '#5dd2f0'\n        ctx.setLineDash([])\n        ctx.beginPath()\n        ctx.roundRect(t.x - tensorRadius*1.5, t.y - tensorRadius*1.5, 3 * tensorRadius, 3 * tensorRadius, tensorRadius * 0.2)\n        ctx.stroke()\n    }\n}\n\n//Draws 'parallel' solid bars.\n// the bars will be in a quadrilateral defined by the four points\n//  (x1, y1), (x2, y2), (x3, y3), (x4, y4)\n// bars is the number of bars\n// solid is the proportion of the size of the solid bar, to the gap between bars\nfunction draw_grill(x1, y1, x2, y2, x3, y3, x4, y4, bars, solid){\n    if(bars < 1){\n        return\n    }\n\n    var bar_gap = 1/(bars*solid + (bars-1)*(1-solid))\n\n    ctx.beginPath()\n    ctx.moveTo(x1, y1)\n    ctx.lineTo(x3, y3)\n    ctx.lineTo(x3 + (x4 - x3) * (0*bar_gap + solid*bar_gap),\n               y3 + (y4 - y3) * (0*bar_gap + solid*bar_gap))\n    ctx.lineTo(x1 + (x2 - x1) * (0*bar_gap + solid*bar_gap),\n               y1 + (y2 - y1) * (0*bar_gap + solid*bar_gap))\n    \n    for(let i = 1; i < bars; i++){\n        ctx.lineTo(x1 + (x2 - x1) * (i*bar_gap),\n                   y1 + (y2 - y1) * (i*bar_gap))\n        ctx.lineTo(x3 + (x4 - x3) * (i*bar_gap),\n                   y3 + (y4 - y3) * (i*bar_gap))\n        ctx.lineTo(x3 + (x4 - x3) * (i*bar_gap + solid*bar_gap ),\n                   y3 + (y4 - y3) * (i*bar_gap + solid*bar_gap ))\n        ctx.lineTo(x1 + (x2 - x1) * (i*bar_gap + solid*bar_gap ),\n                   y1 + (y2 - y1) * (i*bar_gap + solid*bar_gap ))\n    }\n\n    ctx.closePath()\n    ctx.fill()\n}\n\n\n//Drawing the operator defined by operatorIndex\nfunction drawOperator(network, operatorIndex) {\n    let o = network.operators[operatorIndex]\n    \n    let input1\n    let input2\n\n    var input = network.tensors[o.inputs[0]]\n    var output = network.tensors[o.outputs[0]]\n\n    function x_proportion(prop){\n        return input.x + tensorRadius + prop*(output.x - input.x - tensorRadius*2)\n    }\n    function y_proportion(prop){\n        return input.y + prop*(output.y - input.y)\n    }\n\n    var halfx = x_proportion(0.5)\n\n    //The orange to blue gradient\n    let functionGradient = ctx.createLinearGradient(0, 0, width, 0)\n    if(o.highlighted){\n        functionGradient.addColorStop(0, \"#E5914D\")\n        functionGradient.addColorStop(1, \"#4DA1E5\")\n    }else{\n        functionGradient.addColorStop(0, \"#DE7521\")\n        functionGradient.addColorStop(1, \"#218ADE\")\n    }\n\n    ctx.fillStyle = functionGradient\n\n    switch (o.func) {\n        case 0: // abstraction\n            break\n        case 1: // identity\n            input = network.tensors[o.inputs[0]]\n            output = network.tensors[o.outputs[0]]\n\n            ctx.beginPath()\n            ctx.moveTo(input.x + tensorRadius, input.y + tensorRadius)\n            ctx.lineTo(input.x + tensorRadius, input.y - tensorRadius)\n\n            ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y + tensorRadius)\n\n            ctx.closePath()\n            ctx.fill()\n            break\n        \n        case 2: // Fully Connected\n            input1 = network.tensors[o.inputs[0]]\n            input2 = network.tensors[o.inputs[1]]\n            output = network.tensors[o.outputs[0]]\n\n            ctx.beginPath()\n            ctx.moveTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y + tensorRadius)\n\n            ctx.lineTo(input1.x + tensorRadius, input1.y + tensorRadius)\n            ctx.lineTo(input1.x + tensorRadius, input1.y - tensorRadius)\n\n            ctx.lineTo(input2.x - tensorRadius, input2.y + tensorRadius)\n            ctx.lineTo(input2.x + tensorRadius, input2.y + tensorRadius)\n           \n            ctx.closePath()\n            ctx.fill()\n            break\n        case 3: // convolution\n            input1 = network.tensors[o.inputs[0]]\n            input2 = network.tensors[o.inputs[1]]\n            output = network.tensors[o.outputs[0]]\n\n            ctx.beginPath()\n            ctx.moveTo(input1.x + tensorRadius, input1.y - tensorRadius)\n            \n            ctx.lineTo(input2.x - tensorRadius, input2.y + tensorRadius)\n            ctx.lineTo(input2.x + tensorRadius, input2.y + tensorRadius)\n\n            ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.closePath()\n            ctx.fill()\n            \n            draw_grill(input1.x + tensorRadius, input1.y - tensorRadius - 1, \n                       input1.x + tensorRadius, input1.y + tensorRadius,\n                       output.x - tensorRadius, output.y - tensorRadius - 1,\n                       output.x - tensorRadius, output.y + tensorRadius,\n                        3, 0.6)\n            \n            break\n        case 4: // ReLU\n            input = network.tensors[o.inputs[0]]\n            output = network.tensors[o.outputs[0]]\n\n            \n            ctx.beginPath()\n            ctx.moveTo(input.x + tensorRadius, input.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius)\n\n            ctx.lineTo(output.x - tensorRadius, output.y)\n            ctx.lineTo(input.x + tensorRadius + 0.5*(output.x - tensorRadius - input.x - tensorRadius), (input.y + output.y)/2 )\n\n            ctx.lineTo(input.x + tensorRadius + 0.5*(output.x - tensorRadius - input.x - tensorRadius), (input.y + output.y)/2 +tensorRadius)\n            ctx.lineTo(input.x + tensorRadius, input.y + tensorRadius)\n\n            ctx.closePath()\n            ctx.fill()\n            \n            break\n        case 5:{ // Softmax\n            input = network.tensors[o.inputs[0]]\n            output = network.tensors[o.outputs[0]]\n\n            let x_curve_end_prop = 0.3\n            let y_skinny = 0.4\n\n            ctx.beginPath()\n            ctx.moveTo(input.x + tensorRadius, input.y + tensorRadius)\n            ctx.lineTo(input.x + tensorRadius, input.y - tensorRadius)\n\n            ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y - (1-y_skinny)*tensorRadius)\n\n            ctx.lineTo(x_proportion(x_curve_end_prop), y_proportion(x_curve_end_prop) - (1-y_skinny)*tensorRadius)\n            ctx.bezierCurveTo(\n                x_proportion(x_curve_end_prop/2), y_proportion(x_curve_end_prop/2) - (1-y_skinny)*tensorRadius,\n                x_proportion(x_curve_end_prop/2), y_proportion(x_curve_end_prop/2) + tensorRadius,\n                x_proportion(0), y_proportion(0) + tensorRadius\n            )\n        \n            ctx.closePath()\n            ctx.fill()\n\n            break\n        }\n        case 6: // MaxPool\n            input = network.tensors[o.inputs[0]]\n            output = network.tensors[o.outputs[0]]\n\n            \n            var center_portion  = 0.6\n\n            ctx.beginPath()\n            ctx.moveTo(input.x + tensorRadius, input.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius)\n\n            ctx.lineTo(output.x - tensorRadius, output.y)\n            ctx.lineTo(halfx, (input.y + output.y)/2 - center_portion*tensorRadius)\n\n            ctx.lineTo(halfx, (input.y + output.y)/2)\n            ctx.lineTo(output.x - tensorRadius, output.y)\n\n            ctx.lineTo(output.x - tensorRadius, output.y + tensorRadius)\n            ctx.lineTo(halfx, (input.y + output.y)/2 + tensorRadius - center_portion*tensorRadius)\n\n            ctx.lineTo(halfx, (input.y + output.y)/2 + tensorRadius)\n            ctx.lineTo(input.x + tensorRadius, input.y + tensorRadius)\n\n            ctx.closePath()\n            ctx.fill()\n            break\n        case 7: //Zero padding layer\n            input = network.tensors[o.inputs[0]]\n            output = network.tensors[o.outputs[0]]\n            \n            let skinnyness = 0.7;\n\n            ctx.beginPath()\n            ctx.moveTo(input.x + tensorRadius, input.y + tensorRadius * skinnyness)\n            ctx.lineTo(input.x + tensorRadius, input.y - tensorRadius * skinnyness)\n\n            ctx.lineTo(halfx, (input.y + output.y)/2 - tensorRadius * skinnyness)\n            ctx.lineTo(halfx, (input.y + output.y)/2 - tensorRadius)\n\n            ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y + tensorRadius)\n\n            \n            ctx.lineTo(halfx, (input.y + output.y)/2 + tensorRadius)\n            ctx.lineTo(halfx, (input.y + output.y)/2 + tensorRadius * skinnyness)\n\n            ctx.closePath()\n            ctx.fill()\n\n            break;\n        case 8: //Batch Normalization\n            \n            let stub_size = 0.3;\n\n            ctx.beginPath()\n            ctx.moveTo(input.x + tensorRadius, input.y + tensorRadius)\n            ctx.lineTo(input.x + tensorRadius, input.y - tensorRadius)\n\n            ctx.lineTo(input.x + tensorRadius + 1.0/8*(output.x - input.x - tensorRadius*2),input.y + 1.0/8*(output.y - input.y) - tensorRadius)\n            ctx.lineTo(input.x + tensorRadius + 1.0/8*(output.x - input.x - tensorRadius*2),input.y + 1.0/8*(output.y - input.y) - (1+stub_size)*tensorRadius)\n            \n            ctx.lineTo(input.x + tensorRadius + 2.0/8*(output.x - input.x - tensorRadius*2),input.y + 2.0/8*(output.y - input.y) - (1+stub_size)*tensorRadius)\n            ctx.lineTo(input.x + tensorRadius + 2.0/8*(output.x - input.x - tensorRadius*2),input.y + 2.0/8*(output.y - input.y) - tensorRadius)\n                \n            ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y + tensorRadius)\n\n            ctx.lineTo(input.x + tensorRadius + 3.0/8*(output.x - input.x - tensorRadius*2),input.y + 3.0/8*(output.y - input.y) + tensorRadius)\n            ctx.lineTo(input.x + tensorRadius + 3.0/8*(output.x - input.x - tensorRadius*2),input.y + 3.0/8*(output.y - input.y) + (1+stub_size)*tensorRadius)\n\n            ctx.lineTo(input.x + tensorRadius + 2.0/8*(output.x - input.x - tensorRadius*2),input.y + 2.0/8*(output.y - input.y) + (1+stub_size)*tensorRadius)\n            ctx.lineTo(input.x + tensorRadius + 2.0/8*(output.x - input.x - tensorRadius*2),input.y + 2.0/8*(output.y - input.y) + tensorRadius)\n            \n            ctx.closePath()\n            ctx.fill()\n\n            break;\n        case 9:{//avg pooling\n            let pinch_size = 0.5\n            let pinch_x_prop = 0.55\n\n            ctx.beginPath()\n            ctx.moveTo(input.x + tensorRadius, input.y + tensorRadius)\n            ctx.lineTo(input.x + tensorRadius, input.y - tensorRadius)\n\n            ctx.lineTo(x_proportion(0.5),y_proportion(0.5) - tensorRadius)\n            ctx.lineTo(x_proportion(pinch_x_prop),y_proportion(pinch_x_prop) - (tensorRadius/2)-(tensorRadius/2)*pinch_size)\n\n            ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y)\n\n            ctx.lineTo(x_proportion(pinch_x_prop),y_proportion(pinch_x_prop) - (tensorRadius/2)+(tensorRadius/2)*pinch_size)\n            ctx.lineTo(x_proportion(0.5),y_proportion(0.5))\n            ctx.lineTo(x_proportion(pinch_x_prop),y_proportion(pinch_x_prop) + (tensorRadius/2)-(tensorRadius/2)*pinch_size)\n\n            ctx.lineTo(output.x - tensorRadius, output.y)\n            ctx.lineTo(output.x - tensorRadius, output.y + tensorRadius)\n\n            ctx.lineTo(x_proportion(pinch_x_prop),y_proportion(pinch_x_prop) + (tensorRadius/2)+(tensorRadius/2)*pinch_size)\n            ctx.lineTo(x_proportion(0.5),y_proportion(0.5) + tensorRadius)\n            \n            ctx.closePath()\n            ctx.fill()\n            break;\n        }\n        case 10:{ //Global Avg Pooling\n\n            let pinch_size = 0.5\n            let pinch_x_prop = 0.55\n            \n            ctx.beginPath()\n            ctx.moveTo(input.x + tensorRadius, input.y + tensorRadius)\n            ctx.lineTo(input.x + tensorRadius, input.y - tensorRadius)\n\n            ctx.lineTo(x_proportion(0.5),y_proportion(0.5) - tensorRadius)\n            ctx.lineTo(x_proportion(pinch_x_prop),y_proportion(pinch_x_prop) - tensorRadius*pinch_size)\n\n            ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y + tensorRadius)\n\n            ctx.lineTo(x_proportion(pinch_x_prop),y_proportion(pinch_x_prop) + tensorRadius*pinch_size)\n            ctx.lineTo(x_proportion(0.5),y_proportion(0.5) + tensorRadius)\n\n            ctx.closePath()\n            ctx.fill()\n            break;\n        }\n        case 11:{ //Prelu\n            let x_prop_extent = 0.1\n\n            ctx.beginPath()\n            ctx.moveTo(input.x + tensorRadius, input.y + tensorRadius)\n            ctx.lineTo(input.x + tensorRadius, input.y - tensorRadius)\n\n            ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y)\n\n            ctx.lineTo(x_proportion(0.5 + x_prop_extent), y_proportion(0.5 + x_prop_extent))\n            ctx.lineTo(x_proportion(0.5 - x_prop_extent), y_proportion(0.5 - x_prop_extent) + tensorRadius)\n\n            ctx.closePath()\n            ctx.fill()\n\n            break;\n        }\n        case 12:{ //Sigmoid\n            let y_skinny = 0.2\n\n            ctx.beginPath()\n            ctx.moveTo(input.x + tensorRadius, input.y + tensorRadius)\n            ctx.lineTo(input.x + tensorRadius, input.y - tensorRadius)\n\n            ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y - (1 - y_skinny)*tensorRadius)\n\n            ctx.bezierCurveTo(\n                x_proportion(0.3), y_proportion(0.3) - (1 - y_skinny)*tensorRadius,\n                x_proportion(0.3), y_proportion(0.3),\n                x_proportion(1), y_proportion(1)\n            )\n            ctx.lineTo(output.x - tensorRadius, output.y + y_skinny*tensorRadius)\n\n            ctx.bezierCurveTo(\n                x_proportion(0.5), y_proportion(0.5) + y_skinny*tensorRadius,\n                x_proportion(0.5), y_proportion(0.5) + tensorRadius,\n                x_proportion(0), y_proportion(0) + tensorRadius\n            )\n\n            ctx.closePath()\n            ctx.fill()\n\n            break;\n        }\n        case 13:{ //Softplus\n            let x_prop_extent = 0.1\n\n            ctx.beginPath()\n            ctx.moveTo(input.x + tensorRadius, input.y + tensorRadius)\n            ctx.lineTo(input.x + tensorRadius, input.y - tensorRadius)\n\n            ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y)\n\n            ctx.lineTo(x_proportion(0.5 + x_prop_extent), y_proportion(0.5 + x_prop_extent))\n            ctx.bezierCurveTo(\n                x_proportion(0.5 - x_prop_extent/2), y_proportion(0.5 - x_prop_extent/2),\n                x_proportion(0.5 + x_prop_extent/2), y_proportion(0.5 + x_prop_extent/2) + tensorRadius,\n                x_proportion(0.5 - x_prop_extent), y_proportion(0.5 - x_prop_extent) + tensorRadius\n            )\n            \n\n            ctx.closePath()\n            ctx.fill()\n            break;\n        }\n        case 14:{ //Swish\n            let x_prop_extent = 0.1\n\n            ctx.beginPath()\n            ctx.moveTo(input.x + tensorRadius, input.y + tensorRadius)\n            ctx.lineTo(input.x + tensorRadius, input.y - tensorRadius)\n\n            ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y)\n\n            ctx.lineTo(x_proportion(0.5 + x_prop_extent), y_proportion(0.5 + x_prop_extent))\n            ctx.bezierCurveTo(\n                x_proportion(0.5 - x_prop_extent*2), y_proportion(0.5 - x_prop_extent*2),\n                x_proportion(0.5 + x_prop_extent*2), y_proportion(0.5 + x_prop_extent*2) + tensorRadius,\n                x_proportion(0.5 - x_prop_extent), y_proportion(0.5 - x_prop_extent) + tensorRadius\n            )\n            \n\n            ctx.closePath()\n            ctx.fill()\n            break;\n        }\n        case 15:{ //Softsign\n            let y_skinny = 0.2\n\n            ctx.beginPath()\n            ctx.moveTo(input.x + tensorRadius, input.y + tensorRadius)\n            ctx.lineTo(input.x + tensorRadius, input.y - tensorRadius)\n\n            ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y - (1 - y_skinny)*tensorRadius)\n\n            ctx.bezierCurveTo(\n                x_proportion(0.3), y_proportion(0.3) + (1 - y_skinny)*tensorRadius,\n                x_proportion(0.3), y_proportion(0.3) - (1 - y_skinny)*tensorRadius,\n                x_proportion(1), y_proportion(1) + (1 - y_skinny)*tensorRadius\n            )\n\n            ctx.lineTo(output.x - tensorRadius, output.y + tensorRadius)\n            \n            ctx.closePath()\n            ctx.fill()\n\n            break;\n        }\n        case 16:{ //Tanh\n            let y_skinny = 0.2\n\n            ctx.beginPath()\n            ctx.moveTo(input.x + tensorRadius, input.y + tensorRadius)\n            ctx.lineTo(input.x + tensorRadius, input.y - tensorRadius)\n\n            ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y - (1 - y_skinny)*tensorRadius)\n\n            ctx.bezierCurveTo(\n                x_proportion(0.3), y_proportion(0.3) - (1 - y_skinny)*tensorRadius,\n                x_proportion(0.3), y_proportion(0.3) + (1 - y_skinny)*tensorRadius,\n                x_proportion(1), y_proportion(1) + (1 - y_skinny)*tensorRadius\n            )\n\n            ctx.lineTo(output.x - tensorRadius, output.y + tensorRadius)\n            \n            ctx.closePath()\n            ctx.fill()\n\n            break;\n        }\n        case 19: // add, NOT IN USE\n            input1 = network.tensors[o.inputs[0]]\n            input2 = network.tensors[o.inputs[1]]\n            output = network.tensors[o.outputs[0]]\n\n            ctx.beginPath()\n            ctx.moveTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y + tensorRadius)\n\n            ctx.lineTo(input1.x + tensorRadius, input1.y + tensorRadius)\n            ctx.lineTo(input1.x + tensorRadius, input1.y - tensorRadius)\n            ctx.closePath()\n            ctx.fill()\n\n            ctx.beginPath()\n            ctx.moveTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y + tensorRadius)\n\n            ctx.lineTo(input2.x + tensorRadius, input2.y + tensorRadius)\n            ctx.lineTo(input2.x + tensorRadius, input2.y - tensorRadius)\n            ctx.closePath()\n            ctx.fill()\n\n\n            break\n        default:\n            break\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar seconds = 0;\n//Update function, this is called for every frame\nfunction draw() {\n    canvas.width = canvas.getBoundingClientRect().width\n    canvas.height = canvas.getBoundingClientRect().height\n    width = canvas.width\n    height = canvas.height\n\n    //Calculating time that has passed since last frame was drawn\n    last_frame = this_frame\n    this_frame = Date.now()\n    var sec = (this_frame - last_frame) / 1000.0\n    seconds += sec;\n\n    //Draw grid lines\n    if(grid){\n        ctx.beginPath()\n\n        for(let i = -tensorRadius; i < width; i+= tensorRadius*2){\n            ctx.moveTo(i, 0)\n            ctx.lineTo(i, height)\n        }\n        for(let i = -tensorRadius; i < height; i+= tensorRadius*2){\n            ctx.moveTo(0, i)\n            ctx.lineTo(width, i)\n        }\n        ctx.lineWidth = 0.5\n        ctx.setLineDash([1,4])\n        ctx.strokeStyle = 'Grey'\n\n        ctx.closePath()\n        ctx.stroke();\n    }\n    \n    //Draw all operators\n    for (let i = 0; i < networks[0].operators.length; i++) {\n        drawOperator(networks[0], i)\n    }\n\n    //Draw all tensors, and handle movement\n    for (let i = 0; i < networks[0].tensors.length; i++) {\n        drawTensor(networks[0], i)\n\n        //If tensor is being dragged, move it\n        if(networks[networkIndex].tensors[i].selected && !selecting && down){\n\n            // These bounds restrict the tensor movement\n            var bounds = {\n                x_min: tensorRadius*2 + inputs_margin,\n                x_max: (canvas.width - tensorRadius*2 - outputs_margin) - (canvas.width % (tensorRadius*2)),\n                y_min: tensorRadius*2,\n                y_max: (canvas.height - tensorRadius*2) - ((canvas.height - tensorRadius*2) % tensorRadius*2)\n            }\n            \n            placeTensor(networks[networkIndex],i,\n                networks[networkIndex].tensors[i].tx + mouseX - tmX,\n                networks[networkIndex].tensors[i].ty + mouseY - tmY, bounds, grid)\n        }\n    }\n\n\n    \n\n    //Draw selection box\n    if(selecting){\n        ctx.fillStyle = \"rgba(255,255,255,0)\"\n        ctx.lineWidth = 1\n        ctx.strokeStyle = '#5dd2f0'\n        ctx.setLineDash([3,2])\n        ctx.beginPath()\n        \n        ctx.roundRect(tmX, tmY, mouseX-tmX, mouseY-tmY, tensorRadius * 0.2)\n            \n        ctx.stroke()\n    }\n\n\n\n    // Draw grid button\n    grid = Buttons[0].bool\n    try{\n        ctx.drawImage(grid_icon, Buttons[0].x, Buttons[0].y, Buttons[0].w, Buttons[0].h)\n    }catch(e){\n        ctx.fillStyle = \"black\"\n        ctx.fillRect(Buttons[0].x, Buttons[0].y, Buttons[0].w, Buttons[0].h)\n    }\n\n\n    \n    // Draw input box zone\n    ctx.fillStyle = \"#E0E0E0\"\n    ctx.fillRect(0, 0, inputs_margin, height + tensorRadius * 2)\n\n\n    // Draw input boxes\n    for(let i = 0; i < input_boxes.length; i++){\n\n        //draw actual box\n        ctx.fillStyle = \"#F2C8A6\"\n        ctx.roundRect((inputs_margin - input_box_width)/2, input_boxes[i].y - input_box_height/2, input_box_width, input_box_height, tensorRadius)\n        ctx.fill()\n\n        // The rest of this draws the line that connects the box to the input tensor\n        var t = networks[networkIndex].tensors[networks[networkIndex].input_tensors[input_boxes[i].list_index]]\n\n        ctx.lineWidth = 1\n        ctx.strokeStyle = \"black\"\n        ctx.setLineDash([])\n        ctx.beginPath()\n        ctx.moveTo(inputs_margin - (inputs_margin - input_box_width)/2, input_boxes[i].y)\n        \n        \n        if(Math.abs(input_boxes[i].y - t.y) < tensorRadius*2) {\n\n            ctx.lineTo(inputs_margin - Math.abs(input_boxes[i].y - t.y)/2, input_boxes[i].y)\n            if(input_boxes[i].y - t.y > 0){\n                ctx.arc(  inputs_margin - Math.abs(input_boxes[i].y - t.y)/2, (input_boxes[i].y + t.y)/2, Math.abs(t.y - input_boxes[i].y)/2, Math.PI/2, 0, true)\n                ctx.arc(  inputs_margin + Math.abs(input_boxes[i].y - t.y)/2, input_boxes[i].y - (input_boxes[i].y - t.y)/2, Math.abs(t.y - input_boxes[i].y)/2, Math.PI, 3*Math.PI/2)\n            }else{\n                ctx.arc(  inputs_margin - Math.abs(input_boxes[i].y - t.y)/2, (input_boxes[i].y + t.y)/2, Math.abs(t.y - input_boxes[i].y)/2, 3*Math.PI/2, 0)\n                ctx.arc(  inputs_margin + Math.abs(input_boxes[i].y - t.y)/2, input_boxes[i].y - (input_boxes[i].y - t.y)/2, Math.abs(t.y - input_boxes[i].y)/2, Math.PI, Math.PI/2, true)\n            }\n            ctx.lineTo(t.x - tensorRadius, t.y)\n\n        }else{\n            \n            if(input_boxes[i].y - t.y > 0){\n                ctx.arc(  inputs_margin - tensorRadius, input_boxes[i].y - tensorRadius, tensorRadius, Math.PI/2, 0, true)\n                ctx.arc(  inputs_margin + Math.min(Math.abs(input_boxes[i].y - t.y)/2, t.x-tensorRadius-inputs_margin) , t.y + Math.min( Math.abs(t.y - input_boxes[i].y)/2, t.x-tensorRadius-inputs_margin), Math.min( Math.abs(t.y - input_boxes[i].y)/2, t.x-tensorRadius-inputs_margin), Math.PI, 3*Math.PI/2)\n            }else{\n                ctx.arc(  inputs_margin - tensorRadius, input_boxes[i].y + tensorRadius, tensorRadius, 3*Math.PI/2, 0)\n                ctx.arc(  inputs_margin + Math.min(Math.abs(input_boxes[i].y - t.y)/2, t.x-tensorRadius-inputs_margin) , t.y - Math.min( Math.abs(t.y - input_boxes[i].y)/2, t.x-tensorRadius-inputs_margin), Math.min( Math.abs(t.y - input_boxes[i].y)/2, t.x-tensorRadius-inputs_margin),  Math.PI, Math.PI/2, true)\n            }\n            ctx.lineTo(t.x - tensorRadius, t.y)\n        }\n\n        ctx.stroke()\n\n    }\n\n\n    // Draw output box zone\n    ctx.fillStyle = \"#E0E0E0\"\n    ctx.fillRect(width - outputs_margin , 0, width, height + tensorRadius * 2)\n\n    // Draw output boxes\n    for(let i = 0; i < output_boxes.length; i++){\n\n        //Draw the actual output box\n        ctx.fillStyle = \"#A6D0F2\"\n        ctx.roundRect( width - outputs_margin + (outputs_margin - output_box_width)/2, output_boxes[i].y - output_box_height/2, output_box_width, output_box_height, tensorRadius)\n        ctx.fill()\n\n        // The rest of this draws the line that connects the output box to the output tensor\n        var t = networks[networkIndex].tensors[networks[networkIndex].output_tensors[output_boxes[i].list_index]]\n\n        ctx.lineWidth = 1\n        ctx.strokeStyle = \"black\"\n        ctx.setLineDash([])\n        ctx.beginPath()\n        ctx.moveTo(width - outputs_margin + (outputs_margin - output_box_width)/2, output_boxes[i].y)\n        \n        \n        if(Math.abs(output_boxes[i].y - t.y) < tensorRadius*2) {\n\n            ctx.lineTo(width - outputs_margin + Math.abs(output_boxes[i].y - t.y)/2, output_boxes[i].y)\n            if(output_boxes[i].y - t.y > 0){\n                ctx.arc(  width - outputs_margin + Math.abs(output_boxes[i].y - t.y)/2, (output_boxes[i].y + t.y)/2, Math.abs(t.y - output_boxes[i].y)/2, Math.PI/2, Math.PI)\n                ctx.arc(  width - outputs_margin - Math.abs(output_boxes[i].y - t.y)/2, output_boxes[i].y - (output_boxes[i].y - t.y)/2, Math.abs(t.y - output_boxes[i].y)/2, 0, -Math.PI/2, true )\n            }else{\n                ctx.arc(  width - outputs_margin + Math.abs(output_boxes[i].y - t.y)/2, (output_boxes[i].y + t.y)/2, Math.abs(t.y - output_boxes[i].y)/2, 3*Math.PI/2, Math.PI, true)\n                ctx.arc(  width - outputs_margin - Math.abs(output_boxes[i].y - t.y)/2, output_boxes[i].y - (output_boxes[i].y - t.y)/2, Math.abs(t.y - output_boxes[i].y)/2, 0, Math.PI/2)\n            }\n            ctx.lineTo(t.x + tensorRadius, t.y)\n\n        }else{\n            \n            if(output_boxes[i].y - t.y > 0){\n                ctx.arc(  width - outputs_margin + tensorRadius, output_boxes[i].y - tensorRadius, tensorRadius, Math.PI/2, Math.PI)\n                ctx.arc(  width - outputs_margin - Math.min(Math.abs(output_boxes[i].y - t.y)/2, width - outputs_margin - t.x-tensorRadius) , t.y + Math.min( Math.abs(t.y - output_boxes[i].y)/2, width - outputs_margin - t.x-tensorRadius), Math.min( Math.abs(t.y - output_boxes[i].y)/2, width - outputs_margin - t.x-tensorRadius), 0, -Math.PI/2, true)\n            }else{\n                ctx.arc(  width - outputs_margin + tensorRadius, output_boxes[i].y + tensorRadius, tensorRadius, 3*Math.PI/2, Math.PI, true)\n                ctx.arc(  width - outputs_margin - Math.min(Math.abs(output_boxes[i].y - t.y)/2, width - outputs_margin - t.x-tensorRadius) , t.y - Math.min( Math.abs(t.y - output_boxes[i].y)/2, width - outputs_margin - t.x-tensorRadius), Math.min( Math.abs(t.y - output_boxes[i].y)/2, width - outputs_margin - t.x-tensorRadius),  0, Math.PI/2)\n            }\n            ctx.lineTo(t.x + tensorRadius, t.y)\n        }\n\n        ctx.stroke()\n\n    }\n\n    //re draw frame, for an infinite loop\n    window.requestAnimationFrame(draw);\n}\n\n\n\n\n\n\n// Un select all tensors\nfunction clear_selected(){\n    for(let i = 0; i < networks[networkIndex].tensors.length; i++){\n        networks[networkIndex].tensors[i].selected = false;\n    }\n}\n\n// sets the operators in op_list to highlighted\nexport function highlight_operators(op_list){\n    for(let i = 0; i < networks[networkIndex].operators.length; i++){\n        networks[networkIndex].operators[i].highlighted = false\n    }\n    for(let i = 0; i < op_list.length; i++){\n        networks[networkIndex].operators[op_list[i]].highlighted = true\n    }\n}\n\n\n\nfunction doDoubleClick(e) {\n\n    let clickedList = getHoveredTensorIndices(networks[networkIndex], mouseX, mouseY)\n\n    //Unmerge when we double click\n    for (let i = 0; i < clickedList.length; i++) {\n        var clickedIndex = clickedList[i]\n        var t0 = networks[networkIndex].tensors[clickedIndex]\n        if (t0.output_of == null || t0.input_to.length == 0) {\n\n        }\n        else {\n            console.log(\"Unmerge\")\n            unmergeTensor(networks[networkIndex], clickedIndex)\n        }\n    }\n}\n\n\nfunction doMouseUp(e) {\n    \n    selecting = false;\n\n    //If we placed tensors over eatchother, merge them\n    for(let i = 0; i < networks[networkIndex].tensors.length; i++){\n        for(let j = 0; j < networks[networkIndex].tensors.length; j++){\n                \n\n            if(j == i){\n                continue\n            }\n            var t1 = networks[networkIndex].tensors[i];\n            var t2 = networks[networkIndex].tensors[j];\n\n            if(Math.abs(t1.x - t2.x) < tensorRadius * 2 && Math.abs(t1.y - t2.y) < tensorRadius * 2){\n                mergeTensors(networks[networkIndex], i, j);\n            }\n        }\n    }\n    \n    // Reset mousedown variables\n    down = false\n    draggedIndex = -1\n    dragged_operator_index = -1\n}\n\nfunction doMouseDown(e) {\n\n    down = true\n\n    //Record location of tensors when mouse was pressed down\n    for(let i = 0; i < networks[networkIndex].tensors.length; i++){\n        networks[networkIndex].tensors[i].tx = networks[networkIndex].tensors[i].x\n        networks[networkIndex].tensors[i].ty = networks[networkIndex].tensors[i].y\n    }\n    tmX = mouseX;\n    tmY = mouseY;\n\n\n    //Find out which tensor is pressed\n    let draggedList = getHoveredTensorIndices(networks[networkIndex], mouseX, mouseY)\n    if (draggedList.length != 0) {\n        draggedIndex = draggedList[0]\n\n        //selecting the pressed tensor\n        networks[networkIndex].tensors[draggedIndex].selected = true\n\n        console.log(networks[networkIndex].tensors[draggedIndex].form)\n    }\n\n    //Find out which operator is pressed\n    let dragged_operators = getHoveredOperatorIndices(networks[networkIndex], mouseX, mouseY)\n    if (dragged_operators.length != 0 && draggedList.length == 0){\n        \n        dragged_operator_index = dragged_operators[0]\n        \n        var operator = networks[networkIndex].operators[dragged_operator_index]\n        \n        //Selecting all tensors associated with the pressed operator\n        for(let i = 0; i < operator.inputs.length; i++){\n            networks[networkIndex].tensors[operator.inputs[i]].selected = true\n        }\n        for(let i = 0; i < operator.outputs.length; i++){\n            networks[networkIndex].tensors[operator.outputs[i]].selected = true\n        }\n    }\n\n    //If we pressed nothing, unselect everything\n    if(draggedList.length == 0 && dragged_operators.length == 0){\n        selecting = true\n        clear_selected()\n    }\n\n    //Check for button pressed\n    for(let i = 0; i < Buttons.length; i++){\n        Buttons[i].press(mouseX, mouseY)\n    }\n}\n\n\nfunction doMouseMove(e) {\n    if (e.offsetX) {\n        mouseX = e.offsetX;\n        mouseY = e.offsetY;\n    }\n    else if (e.layerX) {\n        mouseX = e.layerX;\n        mouseY = e.layerY;\n    }\n\n    //Check if our selection box is over a tensor, if so, select it\n    if(selecting){\n        for(let i = 0; i < networks[networkIndex].tensors.length; i++){\n            var t = networks[networkIndex].tensors[i]\n\n            if(Math.abs(t.x - (tmX + mouseX)/2) < Math.abs(tmX - (tmX + mouseX)/2)\n            && Math.abs(t.y - (tmY + mouseY)/2) < Math.abs(tmY - (tmY + mouseY)/2)){\n                t.selected = true\n            }else{\n                t.selected = false\n            }\n        }\n    }\n\n}","\n<script>\n\timport Modal,{getModal} from './Modal.svelte'\n\timport Switch from './Switch.svelte'\n    import { onMount } from \"svelte\";\n\timport * as objects from \"./define_network_objects\"\n    import * as gui_logic from \"./gui_logic\"\n    import * as network_logic from \"./network_logic\"\n\timport * as mouse_network_interaction from \"./mouse_network_interaction\"\n\timport { time_ranges_to_array } from 'svelte/internal';\n\n\t// Connecting python scripts\n\tbrython()\n\n\t\n\t//This function is called after the html elements load\n    onMount(() => {\n        gui_logic.init()\n\n\t\t// We listen for the mouse in App.svelte se we can detect\n\t\t// a mouse hovering over an operator, so we can highlight\n\t\t// the corresponding entry on the toolbar\n\t\tvar canvas = document.getElementById(\"gui_canvas\")\n\t\tcanvas.addEventListener(\"mousemove\", doMouseMove, false)\n\t\t\n    })\n\n\t//list toolbar entries, each one corresponding to an operator on the network\n\tvar toolbarItems = [];\n\n\t\n\tfunction doMouseMove(e) {\n\n\t\tvar mouseX\n\t\tvar mouseY\n\n\t\tif (e.offsetX) {\n\t\t\tmouseX = e.offsetX;\n\t\t\tmouseY = e.offsetY;\n\t\t}\n\t\telse if (e.layerX) {\n\t\t\tmouseX = e.layerX;\n\t\t\tmouseY = e.layerY;\n\t\t}\n\t\t\n\t\tvar ops = mouse_network_interaction.getHoveredOperatorIndices(gui_logic.get_network(),mouseX,mouseY)\n\n\t\t//clear all toolbar hovered statuses first\n\t\tfor(let i = 0; i < toolbarItems.length;i++) {\n\t\t\ttoolbarItems[i].hovered=\"false\"\n\t\t}\n\n\t\t//set hovered for the toolbar entries corresponding to the highlighted operators \n\t\tfor(let i = 0; i < ops.length;i++) {\n\t\t\ttoolbarItems[ops[i]].hovered=\"true\"\n\t\t}\n\t}\n\t\n\n\t// Wrapper for yes clear function\n\tfunction yes_clear() {\n\t\tgetModal('clear').close(1)\n\n      \tgui_logic.clear_network()\n    }\n\t\n\t// Called when a new operator is added, or one is deleted\n\tfunction update_operator_list() {\n\n\t\ttoolbarItems = []\n\n\t\t// get names for all operator types\n\t\tvar op_names = gui_logic.get_network().operators.map((e) => (objects.function_table[e.func].name));\n\t\t\n\t\t// we are going to add numbers to the names, so that repeated types can be identified\n\t\tvar op_names_with_numbers = []\n\t\t\n\t\tif(op_names.length == 0){\n\t\t\treturn\n\t\t}\n\n\t\top_names_with_numbers.push(op_names[0])\n\t\tfor(let i = 1; i < op_names.length; i++){\n\n\t\t\tvar count = 0; // operators with the same name before this one\n\t\t\tfor(let j = 0; j < i; j++){\n\t\t\t\tif(op_names[i] == op_names[j]){\n\t\t\t\t\tcount ++\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar new_name = op_names[i]\n\t\t\tif(count > 0){\n\t\t\t\tnew_name += \" \"+String(count + 1)\n\t\t\t}\n\n\t\t\top_names_with_numbers.push(new_name)\n\t\t}\n\n\n\t\t// Populate toolbarItems\n\t\tfor(let i = 0; i < op_names_with_numbers.length; i++){\n\t\t\ttoolbarItems.push({operator_type: op_names[i], operator_name: op_names_with_numbers[i], id:i ,highlighted:'T'})\n\t\t}\n\t\tconsole.log(toolbarItems)\n\t\tupdate_network_info()\n\t}\n\n\t//Update a tensors shape in the operator we are editing, according to the text inputs\n\t//tensor parameter is an int, 0 means input[0], 1 means input[1], 2 means output[0]\n\t// of the operator we are editing\n\tfunction update_tensor_shape(tensor) {\n\t\tvar shape_str = \"\"\n\t\tswitch(tensor) {\n\t\t\tcase 0:\n\t\t\t\tshape_str = input\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tshape_str = parameter_shape\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tshape_str = output\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\tif(shape_str == undefined){\n\t\t\treturn\n\t\t}\n\n\t\tvar shape = []\n\n\t\t//convert text of list to shape\n\t\tvar current_num = \"\"\n\t\tfor(let i = 0; i < shape_str.length; i++){\n\t\t\tif(shape_str[i] == ','){\n\t\t\t\tshape.push(parseInt(current_num))\n\t\t\t\tcurrent_num = \"\"\n\t\t\t}else{\n\t\t\t\tcurrent_num += shape_str[i]\n\t\t\t}\n\t\t}\n\t\tshape.push(parseInt(current_num))\n\n\t\t\n\t\tswitch(tensor){\n\t\t\tcase 0:\n\t\t\t\tgui_logic.edit_tensor_by_operator(operator_id, 0, true, shape)\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tgui_logic.edit_tensor_by_operator(operator_id, 1, true, shape)\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tgui_logic.edit_tensor_by_operator(operator_id, 0, false, shape)\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\n\n\t\tupdate_network_info();\n\t\tupdate_fields()\n\t}\n\n\tfunction update_network_info(){\n\t\tvar network = gui_logic.get_network()\n\n\t\tparameters = 0;\n\t\tlayers = 0\n\n\t\tfor(let i = 0; i < network.operators.length; i++){\n\t\t\tvar operator = network.operators[i]\n\t\t\tif(objects.function_table[operator.func].layer){\n\t\t\t\tlayers++;\n\t\t\t}\n\t\t\tif(objects.function_table[operator.func].num_inputs > 1){\n\t\t\t\tparameters += network.tensors[operator.inputs[1]].calc_size()\n\t\t\t}\n\t\t\tif(operator.func == 11){\n\t\t\t\tparameters += 1\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/*\n\t\tupdates the following fields\n\t\t\tinput;\n\t\t\toutput;\n\t\t\tparameter_shape;\n\t*/\n\tfunction update_fields(){\n\n\t\tvar network = gui_logic.get_network()\n\t\tvar operator = network.operators[operator_id]\n\n\t\t//Some operators have special edit screens\n\t\tif(operator.func == 3){\n\t\t\tupdate_conv2d_fields()\n\t\t\treturn\n\t\t}\n\t\tif(operator.func == 7){\n\t\t\tupdate_zeropadding_fields()\n\t\t\treturn\n\t\t}\n\t\t\n\t\t//update input0 tensor text box\n\t\tvar input0_str = \"\"\n\t\tfor(let i = 0; i < network.tensors[operator.inputs[0]].form.length; i++){\n\n\t\t\t//include seperator between form elements\n\t\t\tif(i > 0){\n\t\t\t\tinput0_str += \",\"\n\t\t\t}\n\n\t\t\tinput0_str += String(network.tensors[operator.inputs[0]].form[i])\n\t\t}\n\t\tinput=input0_str\n\n\n\t\t//update output tensor text box\n\t\tvar output_str = \"\"\n\t\tfor(let i = 0; i < network.tensors[operator.outputs[0]].form.length; i++){\n\t\t\t\n\t\t\t//include seperator between form elements\n\t\t\tif(i > 0){\n\t\t\t\toutput_str += \",\"\n\t\t\t}\n\n\t\t\toutput_str += String(network.tensors[operator.outputs[0]].form[i])\n\t\t}\n\t\toutput=output_str\n\n\n\t\t//If this operator has no parameter then theres no need to update parameter_shape\n\t\tif(operator.inputs.length < 2){\n\t\t\treturn\n\t\t}\n\n\t\t//update parameter tensor text box\n\t\tvar input1_str = \"\"\n\t\tfor(let i = 0; i < network.tensors[operator.inputs[1]].form.length; i++){\n\t\t\t\n\t\t\t//include seperator between form elements\n\t\t\tif(i > 0){\n\t\t\t\tinput1_str += \",\"\n\t\t\t}\n\n\t\t\tinput1_str += String(network.tensors[operator.inputs[1]].form[i])\n\t\t}\n\t\tparameter_shape=input1_str\n\n\t\t\n\n\t}\n\n\n\t\n\t//Certain special operators need different input fields\n\n\tfunction update_conv2d_fields(){\n\t\tvar network = gui_logic.get_network()\n\t\tvar operator = network.operators[operator_id]\n\n\t\tfield_1 = String(network.tensors[operator.inputs[0]].form[0])\n\t\tif(field_1 === 'undefined') {\n\t\t\tfield_1 = \"\"\n\t\t}\n\t\tfield_2 = String(network.tensors[operator.inputs[0]].form[1])\n\t\tif(field_2 === 'undefined'){\n\t\t\tfield_2 = \"\"\n\t\t}\n\n\t\tfield_3 = String(network.tensors[operator.inputs[1]].form[0])\n\t\tif(field_3 === 'undefined'){\n\t\t\tfield_3 = \"\"\n\t\t}\n\t\tfield_4 = String(network.tensors[operator.inputs[1]].form[1])\n\t\tif(field_4 === 'undefined'){\n\t\t\tfield_4 = \"\"\n\t\t}\n\t\tfield_5 = String(network.tensors[operator.inputs[1]].form[2])\n\t\tif(field_5 === 'undefined'){\n\t\t\tfield_5 = \"\"\n\t\t}\n\t}\n\tfunction edit_conv2d(){\n\t\tgui_logic.edit_tensor_by_operator(operator_id, 0, true, [parseInt(field_1), parseInt(field_2), 1])\n\t\tgui_logic.edit_tensor_by_operator(operator_id, 1, true, [parseInt(field_3), parseInt(field_4), parseInt(field_5)])\n\t}\n\n\n\tfunction update_zeropadding_fields(){\n\t\tvar network = gui_logic.get_network()\n\t\tvar operator = network.operators[operator_id]\n\n\t\tfield_1 = String(network.tensors[operator.inputs[0]].form[0])\n\t\tif(field_1 === 'undefined') {\n\t\t\tfield_1 = \"\"\n\t\t}\n\t\tfield_2 = String(network.tensors[operator.inputs[0]].form[1])\n\t\tif(field_2 === 'undefined'){\n\t\t\tfield_2 = \"\"\n\t\t}\n\n\t\tfield_3 = String((network.tensors[operator.outputs[0]].form[0] - network.tensors[operator.inputs[0]].form[0])/2)\n\t\t\n\t\tif(field_3 === 'undefined' || field_3 === \"NaN\"){\n\t\t\tfield_3 = \"\"\n\t\t}\n\t}\n\t\n\tfunction edit_zeropadding(){\n\t\tvar network = gui_logic.get_network()\n\t\tvar operator = network.operators[operator_id]\n\n\t\tvar channels = 1\n\n\t\tif(network.tensors[operator.inputs[0]].form.length > 0){\n\t\t\tchannels = network.tensors[operator.inputs[0]].form[2]\n\t\t}else if(network.tensors[operator.outputs[0]].form.length > 0){\n\t\t\tchannels = network.tensors[operator.outputs[0]].form[2]\n\t\t}\n\n\t\tgui_logic.edit_tensor_by_operator(operator_id, 0, true, [parseInt(field_1), parseInt(field_2),channels])\n\t\tgui_logic.edit_tensor_by_operator(operator_id, 0, false, [parseInt(field_1)+2*parseInt(field_3), parseInt(field_1)+2*parseInt(field_3),channels])\n\t}\n\n\tfunction edit_localpool(){\n\t\tvar network = gui_logic.get_network()\n\t\tvar operator = network.operators[operator_id]\n\n\t\tvar channels = 1\n\n\t\tif(network.tensors[operator.inputs[0]].form.length > 0){\n\t\t\tchannels = network.tensors[operator.inputs[0]].form[2]\n\t\t}else if(network.tensoperatorors[operator.outputs[0]].form.length > 0){\n\t\t\tchannels = network.tensors[operator.outputs[0]].form[2]\n\t\t}\n\n\t\tgui_logic.edit_tensor_by_operator(operator_id, 0, true, [parseInt(field_1), parseInt(field_2),channels])\n\t\tgui_logic.edit_tensor_by_operator(operator_id, 0, false, [Math.floor((parseInt(field_1) - parseInt(field_3)) / parseInt(field_3)) + 1, Math.floor((parseInt(field_2) - parseInt(field_3)) / parseInt(field_3)) + 1,channels])\n\t}\n\n\n\n\t//Called when an operator is being edited\n\tfunction set_edit_operator(op_id){\n\t\tconsole.log(\"hello\")\n\t\toperator_id = op_id\n\t\tupdate_fields()\n\t}\n\n\tfunction add_operator_to_net(func){\n\t\tgui_logic.new_operator(func)\n\t\tgetModal('add_operator').close(1)\n\t\tupdate_operator_list()\n\t}\n\n\tfunction remove_op() {\n\t\tvar network = gui_logic.get_network();\n\t\tnetwork_logic.deleteOperator(network,operator_id)\n\t\tupdate_operator_list()\n\t}\n\t\n\t// Constant images\n    let bar_logo = './transparent_bar_logo.png'; // Neurula logo for nav bar\n\tlet circle_logo = './transparent_circle_logo.png'; // Neurula logo for tutorial\n\t\n\t// Tutorial Images\n\tlet generate_code_img = './generate_code.png';\n\tlet tutorial_img = './tutorial.png';\n\tlet clear_canvas_img = './clear_canvas.png';\n\tlet toolbar_img = './toolbar.png';\n\tlet add_img = './add.png';\n\n\t// Links\n    let home_link = 'http://127.0.0.1:8000'; // Main domain\n\tlet github_logo = 'https://cdn-icons-png.flaticon.com/512/25/25231.png';\n\tlet forms_logo = 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/c2/Google_Forms_logo_%282014-2020%29.svg/640px-Google_Forms_logo_%282014-2020%29.svg.png'; // google forms icon\n\tlet github_link = 'https://github.com/genicos/nn_gui'; // Link to github repo for project\n\tlet feedback_link = 'https://docs.google.com/forms/d/e/1FAIpQLSdMQYYT9P0cp507dm4xyCr9cvJJ9RUwAcFF21pWBhWLWyqPng/viewform?usp=sf_link'; // Link to google form for feedback\n\t\n\t// Function icons\n\tlet fully_connected_icon = './Fully_Connected.png'; // Icon for toolbar_list\n\tlet convolution_icon = './Convolution.png'; // Icon for toolbar_list\n\tlet relu_icon = './PReLU.png'; // Icon for toolbar_list\n\tlet softmax_icon = './Softmax.png'; // Icon for toolbar_list\n\tlet maxpool_icon = './Maxpool.png'; // Icon for toolbar_list\n\t\n\t// Variables\n\tlet clear_selection; // Value for Modal choice for clearing\n\tlet layers = 0; // no of layers\n\tlet parameters = 0;\n\t\n\t// Edit operator variables\n\tlet operator_id;\n\n\t//tensor shapes\n\tlet input;\n\tlet output;\n\tlet parameter_shape; // As tuple\n\n\t//Fields for special operators\n\tlet field_1;\n\tlet field_2;\n\tlet field_3;\n\tlet field_4;\n\tlet field_5;\n\n\t// Generate code variables\n\tlet code_selection; // Value for Modal choice for which code to generate network in\n\tlet code_options = [\n\t\t{ id: 0, text: `Tensorflow` },\n\t\t{ id: 1, text: `Pytorch` }\n\t];\n\n\t// The different types of loss functions the user can generate code with\n\tlet loss_selection; // Value of loss choice\n\tlet loss_options = [\n\t\t{ id: 0, text: `Categorical Cross Entropy` },\n\t\t{ id: 1, text: `Absolute Error` },\n\t\t{ id: 2, text: `Hinge Loss` },\n\t\t{ id: 3, text: `Huber Loss` },\n\t\t{ id: 4, text: `Mean Squared Error` }\n\t];\n\n\t// The different types of optimizers the user can generate code with\n\tlet optimizer_selection; // Value of optimizer choice\n\tlet optimizer_options = [\n\t\t{ id: 0, text: `Adam` },\n\t\t{ id: 1, text: `Nadam` },\n\t\t{ id: 2, text: `Adadelta` },\n\t\t{ id: 3, text: `Adagrad` },\n\t\t{ id: 4, text: `Adamax` },\n\t\t{ id: 5, text: `RMSprop` },\n\t\t{ id: 6, text: `SGD` }\n\t];\n\n\t// Downloads code and alert pop-up after generate code button is clicked\n\tfunction handleGenerate() {\n\t\tcode_selection.text == 'Tensorflow' ? generateTensor() : generatePyTorch(); // Calls function to download code\n\t\t\n\t\talert(`Generating ${code_selection.text} code with optimizer ${optimizer_selection.text} and loss function ${loss_selection.text}`);\n\t}\n\n\tlet items = [\n    { id: 1, name: \"Dense\"},\n    { id: 2, name: \"Convolutional\"},\n    { id: 3, name: \"ReLU\"},\n\t{ id: 4, name: \"Softmax\"},\n\t{ id: 5, name: \"Maxpool\"}\n  \t];\n\t\n  \tlet operator_type = \"\";\n\t\n\tconst addItem = () => {\n\t\titems = [\n\t\t...items,\n\t\t{\n\t\t\tid: Math.random(),\n\t\t\toperator_type,\n\t\t}\n\t\t];\n\t\toperator_type = \"\";\n  \t};\n\t\n\t// Function for nav bar Modal options\n\tfunction setClear(res){\n\t\tclear_selection=res\n\t}\n\t\n\t// called when the button for generating pytorch code is clicked\n\t// generates the pytorch code and then downloads it to the user\n\tasync function generatePyTorch(){\n\t\tvar net_list = generate_network_list()\n\t\tvar code = pytorch_code_generator(net_list)\n\n\t\t/*\n\t\tconst res = await fetch('http://127.0.0.1:8000/generate_pytorch', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\tbody: JSON.stringify(net_list)\n\t\t})\n\n\t\tcode = await res.json()  // waiting for the response back from the api\n\t\t*/\n\n\t\tdownload_string(\"pytorch.py\", code)\n\t\t// var opt = await generatePyTorchOpt()\n\t\t// console.log(net + opt)\n\t}\n\n\t// generates the optimizer for the pytorch code\n\t// still need to add a way for this function to get input on which optimizer\n\t// and which loss function to use\n\t// returns a string that represents the optimizer code\n\t// should concatenate this with the result of generateTensor\n\tasync function generatePyTorchOpt() { \n\t\t// var net = generatePyTorch()\n\t\tvar optimize = \"Adam\"\n\t\tvar loss = \"sparse_categorical_crossentropy\"\n\n\t\tconst res = await fetch('http://127.0.0.1:8000/optimize_pytorch', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\tbody: JSON.stringify([optimize, loss])\n\t\t})\n\n\t\tconst json = await res.json()\n\t\tvar optimizer = JSON.stringify(json)\n\t\treturn optimizer\n\t}\n\n\t// called when the button for generating tensor code is clicked\n\t// generates the tensor code and then downloads it to the user\n\tasync function generateTensor(){\n\t\tvar net_list = generate_network_list()\n\t\tvar code = tf_code_generator(net_list)\n\n\t\t/*\n\t\tconst res = await fetch('http://127.0.0.1:8000/generate_tensor', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\tbody: JSON.stringify(net_list)\n\t\t})\n\n\t\tcode = await res.json()  // waiting for the api's response\n\t\t*/\n\n\t\tdownload_string(\"tf.py\", code)\n\t\t// return net\n\t}\n\n\t// generates the optimizer for the tensor code\n\t// still need to add a way for this function to get input on which optimizer\n\t// and which loss function to use\n\t// returns a string that represents the optimizer code\n\t// should concatenate this with the result of generateTensor\n\tasync function generateTensorOpt() { \n\t\tvar optimize = \"Adam\"\n\t\tvar loss = \"sparse_categorical_crossentropy\"\n\n\t\tconst res = await fetch('http://127.0.0.1:8000/optimize_tensor', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\tbody: JSON.stringify(net_list)\n\t\t})\n\n\t\tconst json = await res.json()\n\t\tvar optimizer = JSON.stringify(json)\n\t\treturn optimizer\n\t}\n\n\t// takes in the network and then converts the implementation from the front end\n\t// to the backend format\n\t// STILL UNFINISHED FOR NONLINEAR NETWORKS\n\t// Need to do testing for linear networks\n\tfunction generate_network_list(){\n\t\tconst net = gui_logic.get_network();\n\n\t\tconst tensors = net.tensors;\n\t\tconst operators = net.operators;\n\n\t\tconst net_list = [];\n\n\t\tfor (let i = 0; i < operators.length; i++){\n\t\t\tconst operator_list = []; //Single layer, list of its attributes\n\n\t\t\tvar this_operator = operators[i];\n\n\t\t\t// storing the operator type to the code that anish uses\n\t\t\t// python code uses a different type standard than js code\n\n\t\t\tif (this_operator.func == 2){           // Dense/Fully Connected\n\t\t\t\toperator_list.push(0);\n\t\t\t} else if (this_operator.func == 3){   // Convolutional layer\n\t\t\t\t\n\t\t\t\t// push operator type\n\t\t\t\toperator_list.push(1);\n\t\t\t\t\n\t\t\t\t// push number of filters\n\t\t\t\toperator_list.push(tensors[this_operator.inputs[1]].form[2])\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Unexpected Operator\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t// push input size\n\t\t\toperator_list.push(tensors[this_operator.inputs[0]].calc_size()); // NEED TO CHANGE THIS TO MAKE IT WORK FOR NONLINEAR NETWORKS\n\n\t\t\t// if Dense, we need number of neurons\n\t\t\tif(this_operator.func == 2){\n\t\t\t\t// push output size (number of neurons in layer)\n\t\t\t\toperator_list.push(tensors[this_operator.outputs[0]].calc_size()); // NEED TO CHANGE THIS TO MAKE IT WORK FOR NONLINEAR NETWORKS\n\t\t\t}\n\n\t\t\tvar next_operator = operators[tensors[this_operator.outputs[0]].input_to[0]]\n\n\t\t\t// Push operator function\n\t\t\tif ((this_operator.func == 2 || this_operator.func == 3) && (next_operator.func == 4 || next_operator.func == 5)){\n\t\t\t\tif (next_operator.func == 4){        // ReLU\n\t\t\t\t\toperator_list.push(2);\n\t\t\t\t} else if (next_operator.func == 5){ // Softmax\n\t\t\t\t\toperator_list.push(3);\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tconsole.log(\"Activation function expected, none given\")\n\t\t\t\toperator_list.push(0);\n\t\t\t}\n\n\t\t\t//If convolution, we need kernel\n\t\t\tif(this_operator.func == 3){\n\n\t\t\t\tvar kernel_str = \"(\" + tensors[this_operator.inputs[1]].form[0] + \",\" + tensors[this_operator.inputs[1]].form[1] + \")\"\n\t\t\t\toperator_list.push(kernel_str)\n\t\t\t}\n\n\n\t\t\tnet_list.push(operator_list);\n\n\t\t}\n\n\t\treturn net_list\n\t}\n\n\n\tfunction javascript_python_interface(){\n\t\tvar net = gui_logic.get_network();\n\n\t\tvar tensors = net.tensors;\n\t\tvar operators = net.operators;\n\n\t\tvar net_list = [];\n\t\tvar layer_list = [];\n\n\t\tif( ! network_logic.is_sequential(net)){\n\t\t\tconsole.log(\"Network is non sequential\")\n\t\t\treturn\n\t\t}\n\n\t\tnet_list.push(optimizer_selection.id)\n\t\tnet_list.push(loss_selection.id)\n\n\t\tvar ordered_operators = network_logic.operator_ordering(net)\n\t\tconsole.log(\"ordering:\", ordered_operators)\n\n\t\tfor(let i = 0; i < ordered_operators.length; i++){\n\n\t\t\tvar this_op = operators[ordered_operators[i]]\n\n\t\t\tvar op_func = this_op.func\n\n\t\t\tif( ! objects.function_table[op_func].layer ) {\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tvar must_add_identity = false\n\n\t\t\tif(op_func == 2 || op_func == 3){\n\n\t\t\t\t// If the operator is a convolution or a dense layer, \n\t\t\t\t// it must be followed by an activation function\n\t\t\t\t// If it isnt, we must add an identity activation\n\t\t\t\tif(i == ordered_operators.length - 1\n\t\t\t\t\t|| objects.function_table[operators[ordered_operators[i + 1]].func].layer){\n\t\t\t\t\tmust_add_identity = true\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//A single layer list is as such: \n\t\t\t// [<layer id>, [input shape], <input size>, [output shape], <output size>, <misc info>, <activation id> ]\n\n\t\t\tvar this_layer = []\n\t\t\tthis_layer.push(op_func)\n\t\t\tthis_layer.push(tensors[this_op.inputs[0]].form)\n\t\t\tthis_layer.push(tensors[this_op.inputs[0]].calc_size())\n\t\t\tthis_layer.push(tensors[this_op.outputs[0]].form)\n\t\t\tthis_layer.push(tensors[this_op.outputs[0]].calc_size())\n\n\n\n\n\t\t\t//True layers (dense and conv) need an activation\n\t\t\tif(op_func == 2 || op_func == 3){\n\t\t\t\tif(must_add_identity){\n\t\t\t\t\tthis_layer.push(1)\n\t\t\t\t}else{\n\t\t\t\t\tthis_layer.push(operators[ordered_operators[i + 1]].func)\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tthis_layer.push(0)\n\t\t\t}\n\n\t\t\tlayer_list.push(this_layer)\n\t\t}\n\n\t\tnet_list.push(layer_list)\n\n\t\treturn net_list\n\t}\n\n\tfunction setGenerate(res){\n\t\t// generate_selection=res\n\t}\n\n\t//Downloads a file containing just (str), with the name (name)\n\tfunction download_string(name, str){\n\t\tvar element = document.createElement('a');\n\t\telement.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(str));\n\t\telement.setAttribute('download', name);\n\n\t\telement.style.display = 'none';\n\t\tdocument.body.appendChild(element);\n\n\t\telement.click();\n\n\t\tdocument.body.removeChild(element);\n\t}\n\n  \n</script>\n  \n<main>\n\t<!-- Navigation Bar (At top of page) -->\n\t<nav>\n\t\t<div class=\"left\">\n\t\t\t<ul class=\"navbar-list\">\n\t\t\t\t<li><a href={home_link}><img src={bar_logo} alt=\"Neurula logo.\" style=\"max-height: 60px\" ></a></li>\n\t\t\t</ul>\n\t\t</div>\n\t\t<div class=\"right\">\n\t\t\t<ul class=\"navbar-list\">\n\t\t\t\t<li><a href={undefined} class=\"nav-button\" on:click={()=>getModal('clear').open(setClear)}>Clear Canvas</a></li>\n\t\t\t\t<li><a href={undefined} class=\"nav-button\" on:click={()=>getModal('generate').open(setGenerate)}>Generate Code</a></li>\n\t\t\t\t<li><a href={undefined} class=\"nav-button\" on:click={()=>getModal('tutorial').open()}>?</a></li>\n\t\t\t</ul>\n\t\t</div>\n\t</nav>\n\n\t<!-- Neural Network Workspace -->\n\t<div id=\"workspace\">\n\t\t<!-- Workspace Toolbar -->\n\t\t<div id=\"toolbar\">\n\t\t\t<!-- Left-aligned side of nav bar -->\n\t\t\t<div id=\"toolbar_title\">\n\t\t\t\t<p style=\"display: inline-block; margin: 5px 0px 0px 5px\">Operator Toolbar</p>\n\t\t\t\t<div class=\"dropdown\" style=\"float:right\">\n\t\t\t\t\t<a href={undefined} class=\"add_op_button\" style=\"font-size: 20px; padding: 0px 5px;\">+</a>\n\t\t\t\t\t<div class=\"dropdown-content\">\n\t\t\t\t\t\t<a href={undefined} class=\"add_op_button\" style=\"margin: 5px\" on:click={()=>getModal('add_operator').open()}>+ add operator</a>\n\t\t\t\t\t\t<a href={undefined} class=\"add_op_button\" style=\"margin: 5px\" on:click={()=>getModal('add_block').open()}>+ add block</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<!-- Right-aligned side of nav bar -->\n\t\t\t<div id=\"toolbar_list\">\n\t\t\t\t<div id=\"toolbar_add_operator\">\n\t\t\t\t\t<!-- <strong>Current Operators: </strong> -->\n\t\t\t\t\t<p id=\"layers-title\">Added Layers: </p>\n\t\t\t\t</div>\n\t\t\t\t<!-- Displays list of placeholder navItems as set in <script> -->\n\t\t\t\t{#each toolbarItems as item}\n\n\t\t\t\t\t<!-- Dense Operator -->\n\t\t\t\t\t{#if item.operator_type === \"Fully Connected\"}\n\t\t\t\t\t\t<li id={\"list_item\"+item.id} class=\"{item.hovered === \"true\" ? 'hovered' : ''}\">\n\t\t\t\t\t\t\t<p   on:focus={()=>{}} on:mouseleave={() => {gui_logic.highlight_operators([])}} on:mouseover={() => {gui_logic.highlight_operators([item.id]);set_edit_operator(item.id)}}>\n\t\t\t\t\t\t\t\t<img src={fully_connected_icon} alt=\"Convolutional List icon.\" style=\"max-height: 20px; margin-right: 10px\">\n\t\t\t\t\t\t\t\t<b on:click={()=>{getModal('edit_fully_connected').open()}}>{item.operator_name}</b>\n\t\t\t\t\t\t\t\t<button id=\"remove-button\" style=\"margin-right: 10px\" on:click={() => {remove_op()}}>&times;</button>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<!-- remove button: to do ... -->\n\t\t\t\t\t\t</li>\n\n\t\t\t\t\t<!-- Convolution Operator -->\n\t\t\t\t\t{:else if item.operator_type === \"Convolution\"}\n\t\t\t\t\t\t<li id={\"list_item\"+item.id} class=\"{item.hovered === \"true\" ? 'hovered' : ''}\">\n\t\t\t\t\t\t\t<p  on:focus={()=>{}} on:mouseleave={() => {gui_logic.highlight_operators([])}} on:mouseover={() => {gui_logic.highlight_operators([item.id]);set_edit_operator(item.id)}}>\n\t\t\t\t\t\t\t\t<img src={convolution_icon} alt=\"Convolution List icon.\" style=\"max-height: 20px; margin-right: 10px\">\n\t\t\t\t\t\t\t\t<b on:click={()=>{getModal('edit_convolution').open()}}>{item.operator_name}</b>\n\t\t\t\t\t\t\t\t<button id=\"remove-button\" style=\"margin-right: 10px\" on:click={() => remove_op()}>&times;</button>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</li>\n\n\t\t\t\t\t<!-- ReLU Operator -->\n\t\t\t\t\t{:else if item.operator_type === \"ReLU\"}\n\t\t\t\t\t\t<li id={\"list_item\"+item.id} class=\"{item.hovered === \"true\" ? 'hovered' : ''}\">\n\t\t\t\t\t\t\t<p   on:focus={()=>{}} on:mouseleave={() => {gui_logic.highlight_operators([])}} on:mouseover={() => {gui_logic.highlight_operators([item.id]);set_edit_operator(item.id)}}>\n\t\t\t\t\t\t\t\t<img src={relu_icon} alt=\"ReLU List icon.\" style=\"max-height: 20px; margin-right: 10px\">\n\t\t\t\t\t\t\t\t<b on:click={()=>{getModal('edit_relu').open()}}>{item.operator_name}</b>\n\t\t\t\t\t\t\t\t<button id=\"remove-button\" style=\"margin-right: 10px\" on:click={() => remove_op()}>&times;</button>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</li>\n\n\t\t\t\t\t<!-- Softmax Operator -->\n\t\t\t\t\t{:else if item.operator_type === \"Softmax\"}\n\t\t\t\t\t\t<li id={\"list_item\"+item.id} class=\"{item.hovered === \"true\" ? 'hovered' : ''}\">\n\t\t\t\t\t\t\t<p   on:focus={()=>{}} on:mouseleave={() => {gui_logic.highlight_operators([])}} on:mouseover={() => {gui_logic.highlight_operators([item.id]);set_edit_operator(item.id)}}>\n\t\t\t\t\t\t\t\t<img src={softmax_icon} alt=\"Softmax List icon.\" style=\"max-height: 20px; margin-right: 10px\">\n\t\t\t\t\t\t\t\t<b on:click={()=>{getModal('edit_softmax').open()}}>{item.operator_name}</b>\n\t\t\t\t\t\t\t\t<button id=\"remove-button\" style=\"margin-right: 10px\" on:click={() => remove_op()}>&times;</button>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</li>\n\n\t\t\t\t\t<!-- Max Pool Operator -->\n\t\t\t\t\t{:else if item.operator_type === \"MaxPool\"}\n\t\t\t\t\t\t<li id={\"list_item\"+item.id} class=\"{item.hovered === \"true\" ? 'hovered' : ''}\">\n\t\t\t\t\t\t\t<p   on:focus={()=>{}} on:mouseleave={() => {gui_logic.highlight_operators([])}} on:mouseover={() => {gui_logic.highlight_operators([item.id]);set_edit_operator(item.id)}}>\n\t\t\t\t\t\t\t\t<img src={maxpool_icon} alt=\"Max Pool List icon.\" style=\"max-height: 20px; margin-right: 10px\">\n\t\t\t\t\t\t\t\t<b on:click={()=>{getModal('edit_maxpool').open()}} >{item.operator_name}</b>\n\t\t\t\t\t\t\t\t<button id=\"remove-button\" style=\"margin-right: 10px\" on:click={() => remove_op()}>&times;</button>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</li>\n\n\t\t\t\t\t<!-- Zero Padding Operator -->\n\t\t\t\t\t{:else if item.operator_type === \"Zero Padding Layer\"}\n\t\t\t\t\t\t<li id={\"list_item\"+item.id} class=\"{item.hovered === \"true\" ? 'hovered' : ''}\">\n\t\t\t\t\t\t\t<p   on:focus={()=>{}} on:mouseleave={() => {gui_logic.highlight_operators([])}} on:mouseover={() => {gui_logic.highlight_operators([item.id]);set_edit_operator(item.id)}}>\n\t\t\t\t\t\t\t\t<img src={maxpool_icon} alt=\"Max Pool List icon.\" style=\"max-height: 20px; margin-right: 10px\">\n\t\t\t\t\t\t\t\t<b on:click={()=>{getModal('edit_zeropadding').open()}} >{item.operator_name}</b>\n\t\t\t\t\t\t\t\t<button id=\"remove-button\" style=\"margin-right: 10px\" on:click={() => remove_op()}>&times;</button>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</li>\n\n\t\t\t\t\t<!-- Zero Padding Operator -->\n\t\t\t\t\t{:else if item.operator_type === \"Zero Padding Layer\"}\n\t\t\t\t\t\t<li id={\"list_item\"+item.id} class=\"{item.hovered === \"true\" ? 'hovered' : ''}\">\n\t\t\t\t\t\t\t<p   on:focus={()=>{}} on:mouseleave={() => {gui_logic.highlight_operators([])}} on:mouseover={() => {gui_logic.highlight_operators([item.id]);set_edit_operator(item.id)}}>\n\t\t\t\t\t\t\t\t<img src={maxpool_icon} alt=\"Max Pool List icon.\" style=\"max-height: 20px; margin-right: 10px\">\n\t\t\t\t\t\t\t\t<b on:click={()=>{getModal('edit_zeropadding').open()}} >{item.operator_name}</b>\n\t\t\t\t\t\t\t\t<button id=\"remove-button\" style=\"margin-right: 10px\" on:click={() => remove_op()}>&times;</button>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\n\t\t\t\t\t<!-- General Operator -->\n\t\t\t\t\t{:else}\n\t\t\t\t\t\t<li id={\"list_item\"+item.id} class=\"{item.hovered === \"true\" ? 'hovered' : ''}\">\n\t\t\t\t\t\t\t<p   on:focus={()=>{}} on:mouseleave={() => {gui_logic.highlight_operators([])}} on:mouseover={() => {gui_logic.highlight_operators([item.id]);set_edit_operator(item.id)}}>\n\t\t\t\t\t\t\t\t<img src={fully_connected_icon} alt=\"Convolutional List icon.\" style=\"max-height: 20px; margin-right: 10px\">\n\t\t\t\t\t\t\t\t<b on:click={()=>{(item.operator_type==\"MaxPool\" || (item.operator_type==\"Avg Pooling\") || (item.operator_type==\"Zero Padding Layer\"))?getModal('edit_unary').open():getModal('edit_unary_constant').open()}}>{item.operator_name}</b>\n\t\t\t\t\t\t\t\t<button id=\"remove-button\" style=\"margin-right: 10px\" on:click={() => {remove_op()}}>&times;</button>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t{/if}\n\t\t\t\t{/each}\n\t\t\t</div>\n\t\t</div>\n\n\t\t<!-- Workspace Canvas (For drawing the neural network) -->\n        <div id=\"canvas_container\">\n            <canvas id=\"gui_canvas\"></canvas>\n\t\t\t<div id=\"canvas_footer\">\n\t\t\t\tNetwork Parameters: {parameters}\tLayers: {layers}\n\t\t\t</div>\n        </div>\n\n    </div>\n\n\t<!-- Footer (at bottom of page) -->\n\t<div class=\"footer\">\n\t\t<a href={undefined} class=\"footer-button\" on:click={()=>getModal('about').open()}>About</a>\n\t\t<a href={github_link}><img id=\"git\" src={github_logo} alt=\"Github logo.\" style=\"max-height: 20px\">Github</a>\n\t\t<a href={feedback_link}><img id=\"git\" src={forms_logo} alt=\"Google Forms logo.\" style=\"max-height: 20px\">Feedback</a>\n\t</div>\n\n\t<!-- Modal Popups for Navigation Bar-->\n\t<Modal id=\"clear\">\n\t\tAre you sure?\n\t\t<!-- Passing a value back to the callback function; Choice is saved in 'clear_selection' -->\n\t\t<button class=\"custom-button\" on:click={yes_clear}>\n\t\t\tYes\n\t\t</button>\n\t\t<button class=\"custom-button\" on:click={()=>getModal('clear').close(0)}>\n\t\t\tNo\n\t\t</button>\n\t</Modal>\n\n\t<Modal id=\"generate\">\n\t\t<p>How would you like to download your neural network?</p>\n\n\t\t<!-- Select Code Generation Type-->\n\t\t<!-- OLD CODE FOR SWITCH I STILL SAVED FOR REFERENCE\n\t\t<p>Select Code: </p>\n\t\t<Switch bind:value={generate_selection} label=\"\" design=\"code\" /> \n\t\t<p style=\"color: red\">{generate_selection}</p>\n\t\t-->\n\n\t\t<!-- Generate Code Dropdowns with Optimizer and Loss -->\n\t\t<form on:submit|preventDefault={handleGenerate}>\n\t\t\t<!-- Select Code -->\n\t\t\t<p style=\"margin: 5px 0px 5px 0px; font-size: 20px\">Select Code: </p>\n\t\t\t<div class=\"generate-select\">\n\t\t\t\t<select bind:value={code_selection}>\n\t\t\t\t\t{#each code_options as option}\n\t\t\t\t\t\t<option value={option}>\n\t\t\t\t\t\t\t{option.text}\n\t\t\t\t\t\t</option>\n\t\t\t\t\t{/each}\n\t\t\t\t</select>\n\t\t\t</div><br>\n\n\t\t\t<!-- Select Optimizer -->\n\t\t\t<p style=\"margin: 5px 0px 5px 0px; font-size: 20px\">Select Optimizer: </p>\n\t\t\t<div class=\"generate-select\">\n\t\t\t\t<select bind:value={optimizer_selection}>\n\t\t\t\t\t{#each optimizer_options as option}\n\t\t\t\t\t\t<option value={option}>\n\t\t\t\t\t\t\t{option.text}\n\t\t\t\t\t\t</option>\n\t\t\t\t\t{/each}\n\t\t\t\t</select>\n\t\t\t</div><br>\n\n\t\t\t<!-- Select Loss-->\n\t\t\t<p style=\"margin: 5px 0px 5px 0px; font-size: 20px\">Select Loss Function: </p>\n\t\t\t<div class=\"generate-select\">\n\t\t\t\t<select bind:value={loss_selection}>\n\t\t\t\t\t{#each loss_options as option}\n\t\t\t\t\t\t<option value={option}>\n\t\t\t\t\t\t\t{option.text}\n\t\t\t\t\t\t</option>\n\t\t\t\t\t{/each}\n\t\t\t\t</select>\n\t\t\t</div><br>\n\n\t\t\t<!-- Values saved in: code_selection.text, optimizer_selection.text, and loss_selection.text -->\n\t\t\t<button class=\"custom-button\" type=submit on:click={()=>{getModal('generate').close()}}>\n\t\t\t\tGenerate\n\t\t\t</button>\n\t\t</form>\n\t</Modal>\n\n\t<Modal id=\"tutorial\">\n\t\t<h1>Welcome to Neurula's Tutorial</h1>\n\t\t<p>To learn more about this project, click the 'About' at the bottom of the page.</p>\n\n\t\t<p style=\"font-size: 16px\">Navigation Bar Options:</p>\n\t\t<ul style=\"list-style-type: none; padding: 0px;\">\n\t\t\t<li>\n\t\t\t\t<img src={clear_canvas_img} alt=\"Tutorial.\" style=\"max-width: 350px;\">\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<img src={generate_code_img} alt=\"Tutorial.\" style=\"max-width: 350px;\">\n\t\t\t\t<p style=\"font-size: 14px\">Generate and download your choice of Tensorflow or Pytorch code based on your canvas design. You must also select an optimizer and loss function.</p>\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<img src={tutorial_img} alt=\"Tutorial.\" style=\"max-width: 350px;\">\n\t\t\t</li>\n\t\t</ul>\n\n\t\t<p style=\"font-size: 16px\">Operator Toolbar Options:</p>\n\t\t<ul style=\"list-style-type: none; padding: 0px;\">\n\t\t\t<li>\n\t\t\t\t<img src={toolbar_img} alt=\"Tutorial.\" style=\"max-width: 350px;\">\n\t\t\t</li>\n\t\t\t<li>\n\t\t\t\t<img src={add_img} alt=\"Tutorial.\" style=\"max-width: 350px;\">\n\t\t\t</li>\n\t\t</ul>\n\t\t\n\t\t\n\t</Modal>\n\n\t<Modal id=\"about\">\n\t\t<h1>About Neurula</h1>\n\t\t<p>Machine learning can appear obscure and complicated, posing a barrier to people who are unfamiliar but interested.<br>\n\t\t\tHowever, designing working neural networks doesn’t have to be difficult.<br><br>\n\t\t\tThat's why we created Neurula: a website in which you can drag and drop blocks allowing you to design\n\t\t\tneural networks in an intuitive fashion. Once you design a network, you can download auto-generated code that implements\n\t\t\tthat network in tensorflow or pytorch. <br><br>\n\t\t\t<i>Made for UCSC's CSE 115A Spring 2022</i><br>\n\t\t\t<i>Developers: Nicolas Ayala, Anish Pahilajani, Kat Negrete, Mahesh Vegiraju, and Alexandra Hutchins</i>\n\t\t</p>\n\t</Modal>\n\n\t<Modal id=\"add_operator\">\n\t\tAdd Operator: <br>\n\n\t\t<!-- Calls function to call specific operator -->\n\t\t<p style=\"font-size: 14px\">Classification: </p>\n\t\t<button class=\"custom-button\" on:click={() => {add_operator_to_net(2)}}>\n            Dense\n        </button>\n\t\t<button class=\"custom-button\" on:click={() => {add_operator_to_net(5)}}>\n            Softmax\n        </button>\n\n\t\t<p style=\"font-size: 14px\">Linear Activations: </p>\n\t\t<button class=\"custom-button\" on:click={() => {add_operator_to_net(1)}}>\n            Identity\n        </button>\n        <button class=\"custom-button\" on:click={() => {add_operator_to_net(4)}}>\n            ReLU\n        </button>\n\t\t<button class=\"custom-button\" on:click={() => {add_operator_to_net(11)}}>\n            PReLU\n        </button>\n\t\t<button class=\"custom-button\" on:click={() => {add_operator_to_net(13)}}>\n            Softplus\n        </button>\n\t\t<button class=\"custom-button\" on:click={() => {add_operator_to_net(14)}}>\n            Swish\n        </button>\n\n\t\t<p style=\"font-size: 14px\">Image Processing: </p>\n        <button class=\"custom-button\" on:click={() => {add_operator_to_net(3)}}>\n            2DConvolutional\n        </button>\n        <button class=\"custom-button\" on:click={() => {add_operator_to_net(7)}}>\n            Zero Padding\n        </button>\n\t\t<button class=\"custom-button\" on:click={() => {add_operator_to_net(6)}}>\n            Max Pool\n        </button>\n\t\t<button class=\"custom-button\" on:click={() => {add_operator_to_net(9)}}>\n            Avg Pool\n        </button>\n\t\t<button class=\"custom-button\" on:click={() => {add_operator_to_net(10)}}>\n            Global Avg Pool\n        </button>\n\t\t<button class=\"custom-button\" on:click={() => {add_operator_to_net(8)}}>\n            Batchnorm\n        </button>\n\n\t\t<p style=\"font-size: 14px\">Sigmoid Activations: </p>\n\t\t<button class=\"custom-button\" on:click={() => {add_operator_to_net(12)}}> \n            Sigmoid\n        </button>\n\t\t<button class=\"custom-button\" on:click={() => {add_operator_to_net(15)}}>\n            Softsign\n        </button>\n\t\t<button class=\"custom-button\" on:click={() => {add_operator_to_net(16)}}>\n            Tanh\n        </button>\n\t</Modal>\n\n\t<Modal id=\"add_block\">\n\t\tAdd Operator Block: <br>\n\t\t<p style=\"font-size: 12px\">Add operator blocks for abstractions of common architecture patterns</p>\n\t\t<br>\n\t\t<!-- Calls function to call specific operator -->\n\t\t<button class=\"custom-button\" on:click={undefined}>\n            <i>option 1</i>\n        </button>\n        <button class=\"custom-button\" on:click={undefined}>\n            <i>option 2</i>\n        </button>\n        <button class=\"custom-button\" on:click={undefined}>\n            <i>option 3</i>\n        </button>\n\t</Modal>\n\n\t<!-- Modals for editing operators -->\n\n\t<!-- General Modal for binary operator (one with a parameter) -->\n\t<Modal id=\"edit_binary\">\n\t\t<p>Edit operator: </p><br>\n\t\t<form on:submit|preventDefault={addItem}>\n\t\t\t<label for=\"name\">Input:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={input} on:change={() => {update_tensor_shape(0)}}/><br>\n\t\t\t<label for=\"name\">Output:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={output} on:change={() => {update_tensor_shape(2)}}/><br>\n\t\t\t<label for=\"name\">Parameter Shape:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={parameter_shape} on:change={() => {update_tensor_shape(1)}}/>\n\t\t\n\t\t\t<br><br><button class=\"custom-button\" on:click={()=>{getModal('edit_binary').close()}}>\n\t\t\t\tSubmit\n\t\t\t</button>\n\t\t</form>\n\t</Modal>\n\n\t<!-- General Modal for unary operator where output shape = input shape -->\n\t<Modal id=\"edit_unary_constant\">\n\t\t<p>Edit operator: </p><br>\n\t\t<form on:submit|preventDefault={addItem}>\n\t\t\t<label for=\"name\">Input/Output size:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={input} on:change={() => {update_tensor_shape(0)}}/>\n\t\t\n\t\t\t<br><br><button class=\"custom-button\" on:click={()=>{getModal('edit_unary_constant').close()}}>\n\t\t\t\tSubmit\n\t\t\t</button>\n\t\t</form>\n\t</Modal>\n\n\t<!-- General Modal for unary operator -->\n\t<Modal id=\"edit_unary\">\n\t\t<p>Edit operator: </p><br>\n\t\t<form on:submit|preventDefault={addItem}>\n\t\t\t<label for=\"name\">Input:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={input} on:change={() => {update_tensor_shape(0)}}/><br>\n\t\t\t<label for=\"name\">Output:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={output} on:change={() => {update_tensor_shape(2)}}/><br>\n\t\t\n\t\t\t<br><br><button class=\"custom-button\" on:click={()=>{getModal('edit_unary').close()}}>\n\t\t\t\tSubmit\n\t\t\t</button>\n\t\t</form>\n\t</Modal>\n\n\n\t<Modal id=\"edit_fully_connected\">\n\t\t<p>Edit Dense/ Fully Connected Operator: </p><br><br>\n\t\t<!-- <Switch bind:value={I_switch} label=\"\" design=\"I\" />\n\t\t<p>{I_switch}</p>\n\t\t<Switch bind:value={O_switch} label=\"\" design=\"O\" />\n\t\t<p>{O_switch}</p> -->\n\t\t<form on:submit|preventDefault={addItem}>\n\t\t\t<label for=\"name\">Input:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={input} on:change={() => {update_tensor_shape(0)}}/><br>\n\t\t\t<label for=\"name\">Output:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={output} on:change={() => {update_tensor_shape(2)}}/><br>\n\t\t\t<label for=\"name\">Parameter Shape:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={parameter_shape} on:change={() => {update_tensor_shape(1)}}/>\n\t\t\n\t\t\t<br><br><button class=\"custom-button\" on:click={()=>{getModal('edit_fully_connected').close()}}>\n\t\t\t\tSubmit\n\t\t\t</button>\n\t\t</form>\n\t</Modal>\n\n\t<Modal id=\"edit_convolution\">\n\t\t<p>Edit Convolution Operator: </p><br><br>\n\t\t<!-- <Switch bind:value={I_switch} label=\"\" design=\"I\" />\n\t\t<p>{I_switch}</p>\n\t\t<Switch bind:value={O_switch} label=\"\" design=\"O\" />\n\t\t<p>{O_switch}</p> -->\n\t\t<form on:submit|preventDefault={addItem}>\n\t\t\t<label for=\"name\">Input image width:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={field_1}/><br>\n\t\t\t<label for=\"name\">Input image height:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={field_2}/><br>\n\t\t\t<label for=\"name\">Kernel width:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={field_3}/><br>\n\t\t\t<label for=\"name\">Kernel height:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={field_4}/><br>\n\t\t\t<label for=\"name\">Filters:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={field_5}/><br>\n\t\t\n\t\t\t<br><br><button class=\"custom-button\" on:click={()=>{getModal('edit_convolution').close();edit_conv2d()}}>\n\t\t\t\tSubmit\n\t\t\t</button>\n\t\t</form>\n\t</Modal>\n\n\t<Modal id=\"edit_relu\">\n\t\t<p>Edit ReLU Operator: </p><br><br>\n\t\t<!-- <Switch bind:value={I_switch} label=\"\" design=\"I\" />\n\t\t<p>{I_switch}</p>\n\t\t<Switch bind:value={O_switch} label=\"\" design=\"O\" />\n\t\t<p>{O_switch}</p> -->\n\t\t<form on:submit|preventDefault={addItem}>\n\t\t\t<label for=\"name\">Input/Output size:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={input} on:change={() => {update_tensor_shape(0)}}/>\n\t\t\t<!-- <label for=\"name\">Slope for -x:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={parameter_shape} /> -->\n\t\t\n\t\t\t<br><br><button class=\"custom-button\" on:click={()=>{getModal('edit_relu').close()}}>\n\t\t\t\tSubmit\n\t\t\t</button>\n\t\t</form>\n\t</Modal>\n\n\t<Modal id=\"edit_softmax\">\n\t\t<p>Edit Softmax Operator: </p><br><br>\n\t\t<!-- <Switch bind:value={I_switch} label=\"\" design=\"I\" />\n\t\t<p>{I_switch}</p>\n\t\t<Switch bind:value={O_switch} label=\"\" design=\"O\" />\n\t\t<p>{O_switch}</p> -->\n\t\t<form on:submit|preventDefault={addItem}>\n\t\t\t<label for=\"name\">Input/Output size:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={input} on:change={() => {update_tensor_shape(0)}}/>\n\t\t\n\t\t\t<br><br><button class=\"custom-button\" on:click={()=>{getModal('edit_softmax').close()}}>\n\t\t\t\tSubmit\n\t\t\t</button>\n\t\t</form>\n\t</Modal>\n\n\t<Modal id=\"edit_maxpool\">\n\t\t<p>Edit Maxpool Operator: </p><br><br>\n\t\t<!-- <Switch bind:value={I_switch} label=\"\" design=\"I\" />\n\t\t<p>{I_switch}</p>\n\t\t<Switch bind:value={O_switch} label=\"\" design=\"O\" />\n\t\t<p>{O_switch}</p> -->\n\t\t<form on:submit|preventDefault={addItem}>\n\t\t\t<label for=\"name\">Input/Output size:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={input} on:change={() => {update_tensor_shape(0)}}/>\n\n\t\t\t<br><br><button class=\"custom-button\" on:click={()=>{getModal('edit_softmax').close()}}>\n\t\t\t\tSubmit\n\t\t\t</button>\n\t\t</form>\n\t</Modal>\n\n\t\n\t<Modal id=\"edit_zeropadding\">\n\t\t<p>Edit Zero Padding Operator: </p><br><br>\n\t\t<form on:submit|preventDefault={addItem}>\n\t\t\t<label for=\"name\">Input image width:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={field_1}/><br>\n\t\t\t<label for=\"name\">Input image height:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={field_2}/><br>\n\t\t\t<label for=\"name\">Zero padding:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={field_3}/><br>\n\n\t\t\t<br><br><button class=\"custom-button\" on:click={()=>{getModal('edit_zeropadding').close(); edit_zeropadding()}}>\n\t\t\t\tSubmit\n\t\t\t</button>\n\t\t</form>\n\t</Modal>\n\n</main>\n\n<style>\n\tmain {\n\t\tmargin: 0px;\n\t}\n\t.footer {\n\t\tposition: fixed;\n\t\tleft: 0;\n\t\tbottom: 10px;\n\t\twidth: 100%;\n\t\tcolor: rgba(0, 0, 0, 0.8);\n\t\ttext-align: center;\n\t}\n\tnav {\n\t\tbackground-color: rgba(0, 0, 0, 0.8);\n\t\tfont-family: \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n\t\theight: 80px;\n\t\tmargin-top: -10px;\n\t\tmargin-left: -10px;\n\t\tmargin-right: -10px;\n\t\tpadding: 0;\n\t}  \n\t.left {\n\t\tfloat: left;\n\t\talign-items: center;\n\t\tmargin-top: -5px;\n\t\tmargin-left: 15px;\n\t\tmargin-right: 15px;\n\t}\n\t.right {\n\t\tmax-width: 980px;\n\t\tpadding-left: 20px;\n\t\tpadding-right: 20px;\n\t\tmargin: auto;\n\t\tbox-sizing: border-box;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\theight: 100%;\n\t\tfloat: right;\n\t}\n  \n\t.navbar-list {\n\t\tdisplay: none;\n\t\twidth: 100%;\n\t\tjustify-content: space-between;\n\t\tpadding: 0 40px;\n\t}\n  \n\t.navbar-list li {\n\t\tlist-style-type: none;\n\t\tmargin-left: 20px;\n\t}\n\ta.nav-button {\n\t\tdisplay: inline-block;\n\t\tpadding: 0.5em 1.25em;\n\t\tborder: 0.1em solid #FFFFFF;\n\t\tmargin: 0;\n\t\tborder-radius: 0.4em;\n\t\tbox-sizing: border-box;\n\t\ttext-decoration: none;\n\t\tfont-family: 'Roboto', sans-serif;\n\t\tfont-weight: 300;\n\t\tfont-size: 15px;\n\t\tcolor: #FFFFFF;\n\t\ttext-align: center;\n\t\ttransition: all 0.4s;\n\t}\n\ta.nav-button:hover {\n\t\tcolor: rgba(0, 0, 0, 0.8);\n\t\tbackground-color: #FFFFFF;\n\t}\n\n\ta.add_op_button {\n\t\tdisplay: inline-block;\n\t\tpadding: 0.5em 1.25em;\n\t\tborder: 0.1em solid #FFFFFF;\n\t\tmargin: 0;\n\t\tborder-radius: 0.4em;\n\t\tbox-sizing: border-box;\n\t\ttext-decoration: none;\n\t\tfont-family: 'Roboto', sans-serif;\n\t\tfont-weight: 300;\n\t\tfont-size: 15px;\n\t\tcolor: #FFFFFF;\n\t\ttext-align: center;\n\t\ttransition: all 0.4s;\n\t\twidth: 100%;\n\t}\n\ta.add_op_button:hover {\n\t\tcolor: rgba(0, 0, 0, 0.8);\n\t\tbackground-color: #FFFFFF;\n\t}\n\n\t#workspace{\n        height: 100%;\n\t\tmargin: 30px;\n\t\tborder-radius: 0.4em;\n\t\tbox-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n    }\n    #toolbar {\n        float: left;\n        height: 500px;\n        width: 220px;\n\t\tfont-family: 'Roboto', sans-serif;\n\t\tborder-radius: 0.4em 0em 0em 0.4em;\n\t\tbackground-color: white;\n        display: flex;\n        flex-flow: column;\n    }\n\t#toolbar_title {\n\t\tbackground-color: #39c0ba;\n\t\tcolor: white;\n\t\tpadding-left: 10px;\n\t\tpadding-right: 10px;\n\t\tpadding-top: 10px;\n\t\tpadding-bottom: 10px;\n\t\tborder-radius: 0.4em 0em 0em 0em;\n\t}\n\t#layers-title {\n\t\tmargin-top: -5px;\n\t\tmargin-bottom: 5px;\n\t\tmargin-left: 10px;\n\t\tmargin-right: 10px;\n\t\tfont-size: 15px;\n\t}\n\t.dropdown {\n  \t\tposition: relative;\n  \t\tdisplay: inline-block;\n\t}\n\n\t.dropdown-content {\n\t\tdisplay: none;\n\t\tposition: absolute;\n\t\tbackground-color: rgba(0,0,0,0.8);\n\t\tborder-radius: 0.4em;\n\t\tmin-width: 160px;\n\t\tbox-shadow: 0px 8px 16px 0px rgba(0,0,0,0.8);\n\t\tpadding: 5px 15px 5px 5px;\n\t\tz-index: 1;\n\t}\n\t.dropdown:hover .dropdown-content {\n\t\tdisplay: block;\n\t}\n\t#toolbar_list {\n\t\toverflow-y: scroll;\n\t\tpadding-top: 10px;\n\t}\n\t#toolbar li {\n\t\tlist-style-type: none;\n\t}\n    #toolbar_add_operator{\n        flex: 1 1 auto;\n    }\n\t#toolbar li {\n\t\tpadding-left: 10px;\n\t\tpadding-bottom: 1px;\n\t\tborder-top: 0.1em solid whitesmoke;\n\t}\n\t#toolbar li:hover {\n\t\tbackground-color: whitesmoke;\n\t\ttext-decoration: underline;\n\t}\n\t#toolbar li.hovered {\n\t\tbackground-color: whitesmoke;\n\t\ttext-decoration: underline;\n\t}\n    #canvas_container{\n        overflow: hidden;\n\t\tborder-radius: 0em 0.4em 0.4em 0em;\n    }\n\t#canvas_footer {\n\t\theight: 20px;\n\t\tbackground-color: lightgrey;\n\t\tpadding-right: 10px;\n\t\tfont-size: 10px;\n\t\tmargin-top: -4px;\n\t\tfont-family: \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n\t\ttext-align: right;\n\t\tpadding-top: 4px;\n\t\tpadding-right: 10px;\n\t\tpadding-left: 10px;\n\t}\n    #gui_canvas{\n        width: 100%;\n        height: 500px;\n    }\n\t.footer a {\n\t\tfont-family: \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n\t\tmargin-top: 10px;\n\t\tmargin-bottom: 10px;\n\t\tmargin-right: 20px;\n\t\tmargin-left: 20px;\n\t\ttext-decoration: none;\n\t\tcolor: rgba(0, 0, 0, 0.8);\n\t}\n\t.footer:hover a {\n\t\tcursor: pointer;\n\t}\n\t#git {\n\t\tmargin-right: 5px;\n\t\tmargin-bottom: -3px;\n\t}\n\t.custom-button {\n\t\tbackground-color: white;\n\t\tborder: 0.1em solid rgba(0, 0, 0, 0.8);\n\t\tcolor: rgba(0, 0, 0, 0.8);\n\t\tborder-radius: 2em;\n\t\ttext-decoration: none;\n\t\tfont-family: 'Roboto',sans-serif;\n\t\tfont-size: 15px;\n\t\ttext-align: center;\n\t\tpadding:0.3em 1.2em;\n\t\ttransition: all 0.2s;\n\t}\n\t.custom-button:hover {\n\t\tbackground-color: rgba(0, 0, 0, 0.8);\n\t\tborder: 0.1em solid rgba(0, 0, 0, 0.8);\n\t\tcolor: white;\n\t}\n\t#remove-button {\n\t\tfloat: right;\n\t\tborder: none;\n\t\tbackground: transparent;\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t\tcolor: #dc4f21;\n\t\tfont-size: 18px;\n\t\tcursor: pointer;\n\t}\n\t#remove-button:hover {\n    \ttransform: scale(1.5);\n  \t}\n\t.generate-select select{\n\t\tfont-family: 'Roboto',sans-serif;\n\t\tfont-size: 20px;\n\t}\n\t\n\t@media only screen and (min-width: 768px) {\n\t\t.navbar-list {\n\t\t\tdisplay: flex;\n\t\t\tpadding: 0;\n\t\t}\n\t\t.navbar-list a {\n\t\t\tdisplay: inline-flex;\n\t\t}\n\t}\n\t@media only screen and (max-width: 767px) {\n\t\t#workspace {\n\t\t\tmargin: 25px;\n\t\t}\n\t\t#toolbar {\n\t\t\twidth: 175px;\n\t\t\tfont-size: 12px;\n\t\t}\n\t\t.left {\n\t\t\tdisplay: none;\n\t\t}\n\t}\n</style>\n\n","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {\n\t\tname: 'world'\n\t}\n});\n\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","src_url_equal_anchor","current_component","src_url_equal","element_src","url","document","createElement","href","get_slot_context","definition","ctx","$$scope","tar","src","k","assign","slice","null_to_empty","value","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","svg_element","createElementNS","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","prevent_default","preventDefault","call","this","attr","attribute","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_input_value","input","set_style","key","important","style","removeProperty","setProperty","select_option","select","option","__value","selected","selectedIndex","select_value","selected_option","querySelector","toggle_class","toggle","classList","set_current_component","component","get_current_component","Error","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","seen_callbacks","Set","flushidx","flush","saved_component","update","$$","pop","callback","has","add","clear","fragment","before_update","dirty","p","after_update","outroing","onTop","transition_in","block","local","delete","transition_out","o","outros","c","create_component","mount_component","customElement","on_mount","on_destroy","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","$on","type","index","indexOf","splice","$set","$$props","obj","$$set","keys","slot_ctx","div2","div1","svg","circle","line0","line1","div0","stopPropagation","slot","slot_definition","slot_changes","get_slot_context_fn","slot_context","lets","undefined","merged","len","Math","max","modals","getModal","id","topDiv","prevOnTop","closeCallback","visible","keyPress","ev","close","retVal","window","body","overflow","$$invalidate","open","$$value","Network","constructor","tensors","operators","input_tensors","param_tensors","output_tensors","truth_tensors","loss","add_tensor","t","add_operator","op","clone","inputs","input_to","outputs","output_of","update_tensors","expand","func","network","inner_net","abstraction","old_operators_length","new_id","includes","j","index_of_op","op_index","to_string","str","form","String","Tensor","live","scalar","x","y","tx","ty","calc_size","size_of_tensor","size","Func","num_inputs","layer","Operator","highlighted","function_table","apply","tensorRadius","get_tensor_bounds","operator_index","tensor_index","ans","x_min","x_max","y_min","y_max","output","input_index","inp0","inp1","out","rightest","highest","min","placeTensor","bounds","grid","getHoveredTensorIndices","hovered_tensors_list","getHoveredOperatorIndices","grabbedList","unmergeTensor","t0","functions","fi","op1","tnewind","todeleteind","findIndex","elem","mergeTensors","tensor_index0","tensor_index1","console","log","one_is_an_output","one_is_an_input","t1","toDeleteIndex","noDeleteIndex","tmp","ind","deleteTensor","canvas","width","height","down","draggedIndex","dragged_operator_index","mouseX","mouseY","tmX","tmY","networks","selecting","inputs_margin","outputs_margin","input_output_box","list_index","input_boxes","output_boxes","get_network","CanvasRenderingContext2D","prototype","roundRect","w","h","r","beginPath","moveTo","arcTo","closePath","Buttons","bool","press","grid_icon","Image","edit_tensor_by_operator","new_shape","propogate_shape","edit_tensor","forward","intra_operator_index","operator","input1","input0","unary_input_output_share_shape","network_init","box","add_input_box","add_output_box","getElementById","doMouseDown","doMouseMove","doMouseUp","doDoubleClick","getContext","getBoundingClientRect","requestAnimationFrame","draw","drawTensor","tensorIndex","fillStyle","lineWidth","setLineDash","strokeStyle","rect","scalarTensorRadius","stroke","drawOperator","operatorIndex","input2","x_proportion","prop","y_proportion","halfx","functionGradient","createLinearGradient","addColorStop","lineTo","x1","y1","x2","y2","x3","y3","x4","y4","bars","solid","bar_gap","draw_grill","x_curve_end_prop","y_skinny","bezierCurveTo","center_portion","skinnyness","stub_size","pinch_size","pinch_x_prop","x_prop_extent","drawImage","e","fillRect","input_box_height","abs","arc","PI","output_box_height","clear_selected","highlight_operators","op_list","clickedList","clickedIndex","t2","draggedList","dragged_operators","offsetX","offsetY","layerX","layerY","t1_value","operator_name","fully_connected_icon","img","img_src_value","li","li_class_value","hovered","button","maxpool_icon","softmax_icon","relu_icon","convolution_icon","operator_type","create_if_block","create_if_block_1","create_if_block_2","create_if_block_3","create_if_block_4","create_if_block_5","create_if_block_6","button0","button1","t0_value","select0","select1","select2","p0","p1","br0","p2","br1","p3","br2","clear_canvas_img","img0","img0_src_value","generate_code_img","img1","img1_src_value","tutorial_img","img2","img2_src_value","toolbar_img","img3","img3_src_value","add_img","img4","img4_src_value","h1","ul0","li0","li1","li2","ul1","li3","li4","br","button2","button3","button4","button5","button6","button7","button8","button9","button10","button11","button12","button13","button14","button15","label0","label1","label2","br3","br4","label","input_1","br5","label3","input3","label4","input4","br6","br7","br8","bar_logo","home_link","github_logo","github_link","forms_logo","feedback_link","main","nav","a0","a1","a2","a3","div10","div7","div4","div3","a4","a5","a6","div6","div5","div9","div8","div11","a7","a8","a9","setGenerate","res","download_string","encodeURIComponent","display","click","brython","gui_logic.init","toolbarItems","ops","mouse_network_interaction.getHoveredOperatorIndices","gui_logic.get_network","update_operator_list","op_names","objects.function_table","op_names_with_numbers","count","new_name","update_network_info","update_tensor_shape","tensor","shape_str","parameter_shape","shape","current_num","parseInt","gui_logic.edit_tensor_by_operator","operator_id","update_fields","parameters","layers","input0_str","output_str","input1_str","field_1","field_2","field_3","update_zeropadding_fields","field_4","field_5","update_conv2d_fields","edit_conv2d","edit_zeropadding","channels","set_edit_operator","op_id","add_operator_to_net","new_op","t_index","gui_logic.new_operator","remove_op","ops_associated_with_this_tensor","network_logic.deleteOperator","code_selection","loss_selection","optimizer_selection","code_options","loss_options","optimizer_options","items","setClear","generate_network_list","net","net_list","operator_list","this_operator","next_operator","kernel_str","tf_code_generator","generateTensor","pytorch_code_generator","generatePyTorch","alert","random","gui_logic.highlight_operators","item"],"mappings":"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"}