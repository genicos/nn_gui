{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/Modal.svelte","../../src/define_network_objects.js","../../src/mouse_network_interaction.js","../../src/network_logic.js","../../src/gui_logic.js","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape_attribute_value(value.toString())}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.46.6' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","<!-- Taken from Svelte website exmaples -->\n<!-- \t* Modified as needed -->\n\n<script context=\"module\" lang=\"ts\">\n\tlet onTop   //keeping track of which open modal is on top\n\tconst modals={}  //all modals get registered here for easy future access\n\t\n\t// \treturns an object for the modal specified by `id`, which contains the API functions (`open` and `close` )\n\texport function getModal(id=''){\n\t\treturn modals[id]\n\t}\n</script>\n\n<script lang=\"ts\">\nimport {onDestroy} from 'svelte'\n\t\nlet topDiv\nlet visible=false\nlet prevOnTop\nlet closeCallback\n\nexport let id=''\n\nfunction keyPress(ev){\n\t//only respond if the current modal is the top one\n\tif(ev.key==\"Escape\" && onTop==topDiv) close() //ESC\n}\n\n/**  API **/\nfunction open(callback){\n\tcloseCallback=callback\n\tif(visible) return\n\tprevOnTop=onTop\n\tonTop=topDiv\n\twindow.addEventListener(\"keydown\",keyPress)\n\t\n\t//this prevents scrolling of the main window on larger screens\n\tdocument.body.style.overflow=\"hidden\" \n\n\tvisible=true\n\t//Move the modal in the DOM to be the last child of <BODY> so that it can be on top of everything\n\tdocument.body.appendChild(topDiv)\n}\n\t\nfunction close(retVal){\n\tif(!visible) return\n\twindow.removeEventListener(\"keydown\",keyPress)\n\tonTop=prevOnTop\n\tif(onTop==null) document.body.style.overflow=\"\"\n\tvisible=false\n\tif(closeCallback) closeCallback(retVal)\n}\n\t\n//expose the API\nmodals[id]={open,close}\n\t\nonDestroy(()=>{\n\tdelete modals[id]\n\twindow.removeEventListener(\"keydown\",keyPress)\n})\n\t\n</script>\n\n<div id=\"topModal\" class:visible bind:this={topDiv} on:click={()=>close()}>\n\t<div id='modal' on:click|stopPropagation={()=>{}}>\n\t\t<svg id=\"close\" on:click={()=>close()} viewBox=\"0 0 12 12\">\n\t\t\t<circle cx=6 cy=6 r=6 />\n\t\t\t<line x1=3 y1=3 x2=9 y2=9 />\n\t\t\t<line x1=9 y1=3 x2=3 y2=9 />\n\t\t</svg>\n\t\t<div id='modal-content'>\n\t\t\t<slot></slot>\n\t\t</div>\n\t</div>\n</div>\n\n<style>\n\t#topModal {\n\t\tvisibility: hidden;\n\t\tz-index: 9999;\n\t\tposition: fixed;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tbackground: #4448;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t}\n\t#modal {\n\t\tposition: relative;\n\t\tborder-radius: 6px;\n\t\tbackground: white;\n\t\tfilter: drop-shadow(5px 5px 5px #555);\n\t\tpadding: 1em;\n\t}\n\n\t.visible {\n\t\tvisibility: visible !important;\n\t}\n\n    #close {\n\t\tposition: absolute;\n\t\ttop:-12px;\n\t\tright:-12px;\n\t\twidth:24px;\n\t\theight:24px;\n\t\tcursor: pointer;\n\t\tborder-color: rgba(0, 0, 0, 0.8);\n\t\tborder-width: thin;\n\t\tfill: white;\n\t\ttransition: transform 0.3s;\n\t}\t\n\n\t#close:hover {\n\t\tfill: rgba(0, 0, 0, 0.8);\n\t}\n\n\t#close line {\n\t\tstroke: rgba(0, 0, 0, 0.8);\n\t\tstroke-width: 1;\n\t}\n\t#close:hover line {\n\t\tstroke: white;\n\t\tstroke-width: 1;\n\t}\n\n\t#close:focus {\n    \tborder-color: #3399ff;\n    \tbox-shadow: 0 0 0 2px #3399ff;\n  \t}\n\n\t#modal-content {\n\t\tmax-width: calc(100vw - 20px);\n\t\tmax-height: calc(100vh - 20px);\n\t\toverflow: auto;\n\t}\n</style>","\n\n\nexport class Network{\n    constructor(){\n        this.tensors = [] //actual tensor objects\n        this.operators = [] //actual operator objects\n\n        this.input_tensors = []\n        this.param_tensors = []\n        this.output_tensors = []\n        this.truth_tensors = []\n        this.loss = null\n    }\n\n    add_tensor(t){\n        this.tensors.push(t);\n    }\n\n    add_operator(op){\n        \n        var o = op.clone()\n\n        this.operators.push(o);\n        \n        for(let i = 0; i < o.inputs.length; i++){\n            this.tensors[o.inputs[i]].input_to.push(this.operators.length - 1)\n        }\n        \n        for(let i = 0; i < o.outputs.length; i++){\n            this.tensors[o.outputs[i]].output_of = this.operators.length - 1\n        }\n    }\n\n    update_tensors(){\n\n        for(let i = 0; i < this.tensors.length; i++){\n            this.tensors[i].input_to = []\n            this.tensors[i].output_of = null\n        }\n        for(let k = 0; k < this.operators.length; k++){\n\n            for(let i = 0; i < this.operators[k].inputs.length; i++){\n                this.tensors[this.operators[k].inputs[i]].input_to.push(k)\n            }\n            \n            for(let i = 0; i < this.operators[k].outputs.length; i++){\n                this.tensors[this.operators[k].outputs[i]].output_of = k\n            }\n\n        }\n\n    }\n\n    //This function finds all abstraction operators and replaces them with their\n    // inner network\n    expand(){\n        //assumes that network is alright, ok, and doin well\n        //inner networks shouldn't have parameter tensors\n\n        \n        for(let i = 0; i < this.operators.length; i++){\n\n            //finding an abstraction operator to expand\n            if(this.operators[i].func == 0 && this.operators[i].network){\n                \n                //recursively expanding inner networks\n                var inner_net = this.operators[i].network;\n                inner_net.expand();\n\n                //Take out abstraction operator\n                var abstraction = this.operators[i]\n                \n                \n                //add new operators\n                var old_operators_length = this.operators.length\n\n                \n                this.operators[i] = inner_net.operators[0]\n                for(let k = 1; k < inner_net.operators.length; k++){\n                    this.add_operator(inner_net.operators[k])\n                }\n                \n\n                //Loop through each inner net tensor\n                //  this tensor will have a new id under the outer network\n                //    we determine this new id\n                //  in each tensor, find all operators it is associated with\n                //      by checking inputs_to and output_of\n                //    we then update the associations of these operators so that they\n                //      point to the new id\n                for(let k = 0; k < inner_net.tensors.length; k++){\n\n                    //these tensors will have a new id as measured by the outer network\n                    var new_id = k;\n\n                    \n                    if(inner_net.input_tensors.includes(k)){\n                        var index = inner_net.input_tensors.indexOf(k)\n\n                        new_id = abstraction.inputs[index]\n                    }else if(inner_net.output_tensors.includes(k)){\n                        var index = inner_net.output_tensors.indexOf(k)\n\n                        new_id = abstraction.outputs[index]\n                    }else{\n                        this.add_tensor(inner_net.tensors[k])\n                        new_id = this.tensors.length - 1\n                    }\n\n                    \n\n                    //finding all associated operators\n                    for(let j = 0; j < inner_net.tensors[k].input_to.length; j++){\n                        \n                        var index_of_op = inner_net.tensors[k].input_to[j]\n                        var op_index = inner_net.operators[ index_of_op ].inputs.indexOf(k)\n                        \n                        \n\n                        if(index_of_op == 0){\n                            \n                            this.operators[i].inputs[op_index] = new_id\n                        }else{\n                            \n                            this.operators[index_of_op + old_operators_length - 1].inputs[op_index] = new_id\n                        }\n                    }\n                    \n\n                    if(inner_net.tensors[k].output_of || inner_net.tensors[k].output_of == 0){\n\n                        \n                        var index_of_op = inner_net.tensors[k].output_of\n                        var op_index = inner_net.operators[ index_of_op ].outputs.indexOf(k)\n                        \n                        if(index_of_op == 0){\n                            this.operators[i].outputs[op_index] = new_id\n                        }else{\n                            this.operators[index_of_op + old_operators_length - 1].outputs[op_index] = new_id\n                        }\n                    }\n\n\n\n                }\n                \n                this.update_tensors()\n            }\n        }\n        \n    }\n\n    //Peer inside network, for debugging\n    to_string(){\n\n        var str = \"\"\n        \n        str += \"Tensors: \\n\"\n        \n        for(let i = 0; i < this.tensors.length; i++){\n            str += \"\\t\"+i+\":\\n\"\n            if(this.tensors[i].form){\n                str += \"\\t\\tform: \"+String(this.tensors[i].form)+\"\\n\"\n            }\n\n            str += \"\\t\\tinput_to:\\n\"\n            for(let k = 0; k < this.tensors[i].input_to.length; k++){\n                str += \"\\t\\t\\t\" + this.tensors[i].input_to[k] + \"\\n\"\n            }\n            \n\n            str += \"\\t\\toutput_of\\n\"\n            str += \"\\t\\t\\t\"+this.tensors[i].output_of + \"\\n\"\n        }\n\n        str += \"Operators: \\n\"\n        for(let i = 0; i < this.operators.length; i++){\n            str += \"\\t\"+i+\":\\n\"\n\n            str += \"\\t\\tinputs:\\n\"\n            for(let k = 0; k < this.operators[i].inputs.length; k++){\n                str += \"\\t\\t\\t\" + this.operators[i].inputs[k] + \"\\n\"\n            }\n\n            str += \"\\t\\toutputs:\\n\"\n            for(let k = 0; k < this.operators[i].outputs.length; k++){\n                str += \"\\t\\t\\t\" + this.operators[i].outputs[k] + \"\\n\"\n            }\n\n            str += \"\\t\\tfunc: \"+this.operators[i].func + \"\\n\"\n        }\n        \n        str += \"input_tensors:\\n\"\n        for(let i = 0; i < this.input_tensors.length; i++){\n            str += \"\\t\"+this.input_tensors[i]+\"\\n\"\n        }\n        \n        str += \"param_tensors:\\n\"\n        for(let i = 0; i < this.param_tensors.length; i++){\n            str += \"\\t\"+this.param_tensors[i]+\"\\n\"\n        }\n        \n        str += \"output_tensors:\\n\"\n        for(let i = 0; i < this.output_tensors.length; i++){\n            str += \"\\t\"+this.output_tensors[i]+\"\\n\"\n        }\n\n        return str\n    }\n}\n\nexport class Tensor{\n    constructor(live, form) {\n        this.scalar = false //I dont think I ever use this, i just check if this.size == 1\n\n        // live is boolean, it means the tensor has been defined\n        if (live)\n            this.live = live\n        else\n            this.live = false\n\n        // form is like tensorflow shape\n        if(form)\n            this.form = form\n        else\n            form = []\n        \n        //center of tensor square\n        this.x = 0;\n        this.y = 0;\n\n        this.tx = 0;\n        this.ty = 0;\n\n        this.selected = false\n\n        //Which operators this tensor is an input to\n        this.input_to = []\n        //Which operator this tensor is an output of\n        this.output_of = null;\n    }\n\n    // Number of elements in this tensor\n    calc_size(){\n        if(this.form){\n\n            var size_of_tensor = 1;\n\n            for(let k = 0; k < this.form.length; k++){\n                size_of_tensor *= this.form[k]\n            }\n\n            this.size = size_of_tensor\n            \n        }else{\n            this.size = 0\n        }\n        return this.size\n    }\n}\n\n\nexport class Func{\n    constructor(name, num_inputs){\n        this.name = name\n        this.num_inputs = num_inputs\n    }\n\n    //takes array of tensors, with forms computed\n    //returns array of output forms\n    calc_form(inputs, network){\n        \n        var out = []\n        console.log(this.name)\n\n        switch(this.name){\n            case \"identity\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n            case \"add\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n            case \"subtract\":\n                out.push(network.tensors[inputs[0]].form)\n                break   \n            case \"scale\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n            case \"full\":\n\n                var form1 = network.tensors[inputs[0]].form\n                var form2 = network.tensors[inputs[1]].form\n\n                var form1_total = 1\n                for(let i = 0; i < form1.length; i++){\n                    form1_total *= form1[i]\n                }\n                var form2_total = 1\n                for(let i = 0; i < form2.length; i++){\n                    form2_total *= form2[i]\n                }\n\n                var out_form = []\n                out_form.push(form2_total/form1_total)\n                \n                out.push(out_form)\n                break\n            case \"amass\":\n                var out_form = []\n                out_form.push(1)\n                \n                out.push(out_form)\n                break\n            case \"softmax\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n            case \"hardmax\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n            case \"max\":\n                var out_form = []\n                out_form.push(1)\n                \n                out.push(out_form)\n                break\n            case \"convolution\":\n                form1 = network.tensors[inputs[0]].form\n                form2 = network.tensors[inputs[1]].form\n                var out_form = []\n\n                \n                for(let i = 0; i < form1.length; i++){\n                    if(form2.length <= i){\n                        out_form.push(form1[i])\n                    }else{\n                        out_form.push(form1[i] - form2[i] + 1)\n                    }\n                }\n                \n                out.push(out_form)\n                break\n            \n            case \"squared dist\":\n                out.push([1])\n                break\n            \n            case \"ReLU\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n\n            case \"LeakyReLU\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n\n            case \"Leaky to ReLU\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n                \n\n        }\n\n        return out\n    }\n}\n\n\n\nexport class Operator{\n    constructor(func){\n\n        //input and output tensors of this operator\n        this.inputs = []\n        this.outputs = []\n\n\n        this.func = func\n        this.size = null\n\n        this.network = null\n        \n    }\n\n    //Create deep copy of this operator\n    clone(){\n        var clone = new Operator(this.func)\n        clone.inputs = [...this.inputs]\n        clone.outputs = [...this.outputs]\n        clone.network = this.network\n        return clone\n    }\n\n}\n\n\n\nexport var function_table = Array.apply(null, Array(12)).map(function () {})\nfunction_table[0] = new Func(\"abstraction\", 0)\nfunction_table[1] = new Func(\"identity\", 1)\nfunction_table[2] = new Func(\"add\", 2)\nfunction_table[3] = new Func(\"subtract\", 2)\nfunction_table[4] = new Func(\"scale\", 2)\nfunction_table[5] = new Func(\"full\", 2)\nfunction_table[6] = new Func(\"amass\", 1)\nfunction_table[7] = new Func(\"softmax\", 1) // softmax exponent base is 2s\nfunction_table[8] = new Func(\"hardmax\", 1)\nfunction_table[9] = new Func(\"max\", 1)\nfunction_table[10] = new Func(\"convolution\", 2)\nfunction_table[11] = new Func(\"squared dist\", 2)\nfunction_table[12] = new Func(\"PReLU\", 1)\nfunction_table[13] = new Func(\"LeakyReLU\", 1) //negative slope is 0.1\nfunction_table[14] = new Func(\"Leaky to ReLU\", 1) //LeakyReLU in training, ReLU in deployment","import {Network} from \"./define_network_objects\"\nimport {Tensor} from \"./define_network_objects\"\nimport {Operator} from \"./define_network_objects\"\n\n\nconst tensorRadius = 10\n\n\nfunction get_tensor_bounds(network, operator_index, tensor_index){\n    var ans = {\n        x_min: -9999,\n        x_max: 10000,\n        y_min: -9999,\n        y_max: 10000\n    };\n\n    var o = network.operators[operator_index]\n\n    var output = false;\n    var output_index = 0;\n    for(let i = 0; i < o.outputs.length; i++){\n        if(o.outputs[i] == tensor_index){\n            output = true;\n            output_index = i;\n        }\n    }\n\n    var input_index = 0;\n    if(!output){\n    for(let i = 0; i < o.inputs.length; i++){\n        if(o.inputs[i] == tensor_index){\n            input_index = i;\n        }\n    }\n    }\n\n    var unary = false\n    var side_binary = false\n    var top_binary = false;\n\n    switch(o.func){\n        case 0:\n            break\n        case 1:\n            break\n        case 2: //add\n            side_binary = true;\n            break\n        case 4://subtract\n            side_binary = true;\n            break;\n        case 4://scalse\n            top_binary = true;\n            break;\n        case 5://full\n            top_binary = true;\n            break;\n        case 6://amass\n            unary = true;\n            break;\n        case 7://softmax\n            unary = true;\n            break;\n        case 8://hardmax\n            unary = true;\n            break;\n        case 9://max\n            unary = true;\n            break;\n        case 10://convolution\n            top_binary = true;\n            break;\n        case 11://squared_dist\n            side_binary = true\n            break;\n        case 12://ReLU\n            unary = true\n    }\n\n    var inp0 = network.tensors[o.inputs[0]]\n    var inp1 = network.tensors[o.inputs[1]]\n    var out  = network.tensors[o.outputs[0]]\n\n    if(unary){\n        if(output){\n            ans.x_min = inp0.x + 4 * tensorRadius\n        }else{\n            ans.x_max = out.x - 4 * tensorRadius\n        }\n    }\n\n    if(top_binary){\n        if(output){\n            ans.x_min = inp1.x + 2 * tensorRadius\n            ans.y_min = inp1.y + 2 * tensorRadius\n        }else{\n            if(input_index == 1){ //top tensor\n                ans.x_min = inp0.x + 2 * tensorRadius\n                ans.x_max = out.x - 2 * tensorRadius\n\n                var highest = Math.min(out.y, inp0.y)\n                ans.y_max = highest - 2 * tensorRadius\n            }else{\n                ans.x_max = inp1.x - 2 * tensorRadius\n\n                ans.y_min = inp1.y + 2 * tensorRadius\n            }\n        }\n    }\n    if(side_binary){\n        if(output){\n            var rightest = Math.max(inp0.x, inp1.x)\n            ans.x_min = rightest + 4 * tensorRadius\n        }else{\n            if(input_index == 1){ //top tensor\n                ans.x_max = out.x - 4 * tensorRadius\n                \n                ans.y_max = inp0.y - 2 * tensorRadius\n            }else{\n                ans.x_max = out.x - 4 * tensorRadius\n\n                ans.y_min = inp1.y + 2 * tensorRadius\n            }\n        }\n    }\n\n    return ans;\n}\n\n\n\n\n\n\n\n\nexport function placeTensor(network, tensor_index, x, y, grid = false){\n\n    network.tensors[tensor_index].x = x\n    network.tensors[tensor_index].y = y\n\n    if(grid){\n        network.tensors[tensor_index].x -= (network.tensors[tensor_index].x + tensorRadius) % (tensorRadius * 2) - tensorRadius\n        network.tensors[tensor_index].y -= (network.tensors[tensor_index].y + tensorRadius) % (tensorRadius * 2) - tensorRadius\n    }\n\n    var bounds = {\n        x_min: -9999,\n        x_max: 10000,\n        y_min: -9999,\n        y_max: 10000\n    };\n\n    for(let i = 0; i < network.tensors[tensor_index].input_to.length; i++){\n        let ans = get_tensor_bounds(network,network.tensors[tensor_index].input_to[i],tensor_index)\n        bounds.x_min = Math.max(bounds.x_min, ans.x_min)\n        bounds.x_max = Math.min(bounds.x_max, ans.x_max)\n        bounds.y_min = Math.max(bounds.y_min, ans.y_min)\n        bounds.y_max = Math.min(bounds.y_max, ans.y_max)\n    }\n    \n    \n    if(network.tensors[tensor_index].output_of != null){\n        let ans = get_tensor_bounds(network,network.tensors[tensor_index].output_of,tensor_index)\n        bounds.x_min = Math.max(bounds.x_min, ans.x_min)\n        bounds.x_max = Math.min(bounds.x_max, ans.x_max)\n        bounds.y_min = Math.max(bounds.y_min, ans.y_min)\n        bounds.y_max = Math.min(bounds.y_max, ans.y_max)\n    }\n\n    if( network.tensors[tensor_index].x < bounds.x_min){\n        network.tensors[tensor_index].x = bounds.x_min\n    }\n    if( network.tensors[tensor_index].x > bounds.x_max){\n        network.tensors[tensor_index].x = bounds.x_max\n    }\n    if( network.tensors[tensor_index].y < bounds.y_min){\n        network.tensors[tensor_index].y = bounds.y_min\n    }\n    if( network.tensors[tensor_index].y > bounds.y_max){\n        network.tensors[tensor_index].y = bounds.y_max\n    }\n    \n}\n\n\n\n\n\n\n\n//move tensors, accounting for obstructions\nexport function nudgeTensor(network, tensor_index, delta_x, delta_y){\n\n    placeTensor(network, tensor_index,\n         network.tensors[tensor_index].x + delta_x,\n         network.tensors[tensor_index].y + delta_y\n    )\n    \n}\n\n\n// returns list of indices of tensors with mouse hovered over\n//TODO: TENSORRESHAPE\nexport function getHoveredTensorIndices(network, x, y) {\n    \n    var hovered_tensors_list = []\n\n    \n    for (let j = 0; j < network.tensors.length; j++) {\n        if (network.tensors[j].x - tensorRadius < x &&\n            network.tensors[j].x + tensorRadius > x &&\n            network.tensors[j].y - tensorRadius < y &&\n            network.tensors[j].y + tensorRadius > y) \n        {\n            hovered_tensors_list.push(j)\n        }\n    }\n\n    return hovered_tensors_list\n}\n\n\n\n// returns list of indices of Operators with mouse hovered over\n// We define 'hovering over' an operator as having the mouse\n// over the region that is to the right of the leftmost tensor in the operator, \n// and to the left of the rightmost tensor in the operator, \n// and under the topmost...\n\n//TODO: TENSORRESHAPE\n//TODO: notice the plus and minus patterns, these patterns will differ \n// for different operator types\nexport function getHoveredOperatorIndices(network, x, y) {\n\n    var grabbedList = []\n    \n    for (let j = 0; j < network.operators.length; j++) {\n\n        var o = network.operators[j]\n        var unary = false\n        var side_binary = false\n        var top_binary = false;\n\n        switch(o.func){\n            case 0:\n                break\n            case 1:\n                break\n            case 2: //add\n                side_binary = true;\n                break\n            case 4://subtract\n                side_binary = true;\n                break;\n            case 4://scalse\n                top_binary = true;\n                break;\n            case 5://full\n                top_binary = true;\n                break;\n            case 6://amass\n                unary = true;\n                break;\n            case 7://softmax\n                unary = true;\n                break;\n            case 8://hardmax\n                unary = true;\n                break;\n            case 9://max\n                unary = true;\n                break;\n            case 10://convolution\n                top_binary = true;\n                break;\n            case 11://squared_dist\n                side_binary = true\n                break;\n            case 12://ReLU\n                unary = true\n        }\n\n        var inp0 = network.tensors[o.inputs[0]]\n        var inp1 = network.tensors[o.inputs[1]]\n        var out  = network.tensors[o.outputs[0]]\n\n        var x_min =  1000000\n        var x_max = -1000000\n        var y_min =  1000000\n        var y_max = -1000000\n\n        if(unary){\n            x_min = inp0.x + tensorRadius\n            x_max = out.x  - tensorRadius\n            y_min = Math.min(inp0.y - tensorRadius, out.y - tensorRadius)\n            y_max = Math.max(inp0.y + tensorRadius, out.y + tensorRadius)\n        }\n\n        if(top_binary){\n            x_min = inp0.x + tensorRadius\n            x_max = out.x  - tensorRadius\n            y_min = inp1.y + tensorRadius\n            y_max = Math.max(inp0.y + tensorRadius, out.y + tensorRadius)\n        }\n\n        if(side_binary){\n            x_min = Math.min(inp0.x + tensorRadius, inp1.x + tensorRadius)\n            x_max = out.x  - tensorRadius\n            y_min = inp1.y - tensorRadius\n            y_max = inp0.y + tensorRadius\n        }\n        \n        if (x_min < x &&\n            x_max > x &&\n            y_min < y &&\n            y_max > y) {\n            grabbedList.push(j)\n        }\n    }\n    \n    return grabbedList\n}\n\n\n\n//intersecting_with_operator(network, op_index, x, y)\n//intersecting_with_tensor(network, t_index, x, y)","import {Network} from \"./define_network_objects\"\nimport {Tensor} from \"./define_network_objects\"\nimport {Operator} from \"./define_network_objects\"\n\n\n\nconst unmergeDist = 20\n\n\nexport function unmergeTensor(network, tensor_index) {\n    var t0 = network.tensors[tensor_index]\n\n    // Save function we are inputting to, and delete that shit\n    var functions = t0.input_to\n    t0.input_to = []\n\n    for (let i = 0; i < functions.length; i++) {\n        var fi = functions[i]\n        var op1 = network.operators[fi]\n\n        // create new tensor\n        var tnewind = network.tensors.length\n        network.add_tensor(new Tensor(true))\n        \n        var todeleteind = op1.inputs.findIndex((elem) => elem == tensor_index)\n        op1.inputs[todeleteind] = tnewind\n\n        // update position\n        network.tensors[tnewind].x = t0.x + unmergeDist\n        network.tensors[tnewind].y = t0.y\n\n        network.tensors[tnewind].input_to = [fi]\n        network.tensors[tnewind].output_of = null\n        network.tensors[tnewind].live = false\n    }\n\n    t0.x -= unmergeDist\n    t0.live = false\n\n}\n\n\n\nexport function mergeTensors(network, tensor_index0, tensor_index1) {\n\n    if (network.tensors[tensor_index0].live && network.tensors[tensor_index1].live) {\n        console.log(\"Both merged tensors are live, so don't do anything.\")\n        return\n    }\n        \n    let t0 = network.tensors[tensor_index0]\n    let t1 = network.tensors[tensor_index1]\n\n    let toDeleteIndex = tensor_index1\n    let noDeleteIndex = tensor_index0 \n\n\n    // t0 is already an output to a function and stays, t1 is an input to a function and is deleted\n    if (t0.output_of != null && t1.output_of == null) {}\n    else if (t1.output_of != null && t0.output_of == null) {\n        var tmp = t1\n        t1 = t0\n        t0 = tmp\n        toDeleteIndex = tensor_index0\n        noDeleteIndex = tensor_index1\n    }\n    else {\n        console.log(\"Error merging, only one input must have an output\")\n        return\n    }\n\n    // check that they aren't input and output to the same function\n    console.log(t0.output_of, t1.input_to)\n    if (t0.output_of == t1.input_to) {\n        console.log(\"Error merging, these are input and output of the same function\")\n        return\n    }\n    \n    let ind = network.operators[t1.input_to].inputs.indexOf(toDeleteIndex)\n    network.operators[t1.input_to].inputs[ind] = noDeleteIndex\n\n    t0.input_to = t1.input_to\n    \n    t0.live = (t0.live || t1.live)\n\n    network.tensors[noDeleteIndex].selected = true\n\n    deleteTensor(network, toDeleteIndex)\n}\n\n\nfunction deleteTensor(network, index) {\n    // in operators, decrement input and output indices if greater than deleted indices\n    for (let i = 0; i < network.operators.length; i++) {\n        for (let j = 0; j < network.operators[i].inputs.length; j++) {\n            if (network.operators[i].inputs[j] > index) {\n                network.operators[i].inputs[j] -= 1\n            }\n        }\n        for (let j = 0; j < network.operators[i].outputs.length; j++) {\n            if (network.operators[i].outputs[j] > index) {\n                network.operators[i].outputs[j] -= 1\n            }\n        }\n    }\n\n    // delete relevant tensor\n    return network.tensors.splice(index, 1)\n}","import {Network} from \"./define_network_objects\"\nimport {Tensor} from \"./define_network_objects\"\nimport {Operator} from \"./define_network_objects\"\n\nimport { placeTensor } from \"./mouse_network_interaction\"\nimport {nudgeTensor} from \"./mouse_network_interaction\"\nimport {getHoveredTensorIndices} from \"./mouse_network_interaction\"\nimport {getHoveredOperatorIndices} from \"./mouse_network_interaction\"\n\nimport {unmergeTensor} from \"./network_logic\"\nimport {mergeTensors} from \"./network_logic\"\n\nvar canvas = 0\nvar ctx = 0\n\n\nvar width = 0;\nvar height = 0;\n\nconst tensorRadius = 10\nconst scalarTensorRadius = 5\nconst defaultFunctionLength = 50\n\nvar down = false\nvar draggedIndex = -1\nvar dragged_operator_index = -1\n\n\nvar last_mouseX = 0;\nvar last_mouseY = 0;\nvar mouseX = 0;\nvar mouseY = 0;\nvar tmX = 0;\nvar tmY = 0;\n\nvar last_frame = Date.now()\nvar this_frame = Date.now()\n\nvar networks = []\nvar networkIndex = 0\n\nvar selecting = false\n\nvar grid = true\n\n\n\n\nCanvasRenderingContext2D.prototype.roundRect = function (x, y, w, h, r) {\n    if (w < 0){\n        w = -w\n        x -= w\n    }\n    if (h < 0){\n        h = -h\n        y -= h\n    }\n\n\n    if (w < 2 * r) r = w / 2;\n    if (h < 2 * r) r = h / 2;\n    this.beginPath();\n    this.moveTo(x+r, y);\n    this.arcTo(x+w, y,   x+w, y+h, r);\n    this.arcTo(x+w, y+h, x,   y+h, r);\n    this.arcTo(x,   y+h, x,   y,   r);\n    this.arcTo(x,   y,   x+w, y,   r);\n    this.closePath();\n    return this;\n}\n\n\nnetworks.push(new Network())\n\n\n\nexport function get_list_of_operators(){\n    return networks[networkIndex].operators\n}\n\n\n\n\n\n\n\n\n\n\n\nexport function clear_network(){\n    networks[networkIndex] = new Network()\n}\n\nexport function new_operator(type, x = tensorRadius*2 * 2, y = tensorRadius*2 * 3){\n    clear_selected()\n    var unary = false\n    var side_binary = false\n    var top_binary = false;\n\n    switch(type){\n        case 0:\n            break\n        case 1:\n            break\n        case 2: //add\n            side_binary = true;\n            break\n        case 4://subtract\n            side_binary = true;\n            break;\n        case 4://scalse\n            top_binary = true;\n            break;\n        case 5://full\n            top_binary = true;\n            break;\n        case 6://amass\n            unary = true;\n            break;\n        case 7://softmax\n            unary = true;\n            break;\n        case 8://hardmax\n            unary = true;\n            break;\n        case 9://max\n            unary = true;\n            break;\n        case 10://convolution\n            top_binary = true;\n            break;\n        case 11://squared_dist\n            side_binary = true\n            break;\n        case 12://ReLU\n            unary = true\n    }\n\n\n    let new_op = new Operator()\n    new_op.func = type\n\n    var t_index = networks[networkIndex].tensors.length\n    if(unary){\n\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 0].x = x + tensorRadius*2 * 0\n        networks[networkIndex].tensors[t_index + 0].y = y + tensorRadius*2 * 0\n\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 1].x = x + tensorRadius*2 * 3\n        networks[networkIndex].tensors[t_index + 1].y = y + tensorRadius*2 * 0\n\n        new_op.inputs  = [t_index + 0]\n        new_op.outputs = [t_index + 1]\n    }\n    if(top_binary){\n        \n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 0].x = x + tensorRadius*2 * 0\n        networks[networkIndex].tensors[t_index + 0].y = y + tensorRadius*2 * 2\n\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 1].x = x + tensorRadius*2 * 2\n        networks[networkIndex].tensors[t_index + 1].y = y + tensorRadius*2 * 0\n\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 2].x = x + tensorRadius*2 * 4\n        networks[networkIndex].tensors[t_index + 2].y = y + tensorRadius*2 * 2\n\n        new_op.inputs  = [t_index + 0, t_index + 1]\n        new_op.outputs = [t_index + 2]\n    }\n\n    if(side_binary){\n\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 0].x = x + tensorRadius*2 * 0\n        networks[networkIndex].tensors[t_index + 0].y = y + tensorRadius*2 * 2\n\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 1].x = x + tensorRadius*2 * 0\n        networks[networkIndex].tensors[t_index + 1].y = y + tensorRadius*2 * 0\n\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 2].x = x + tensorRadius*2 * 3\n        networks[networkIndex].tensors[t_index + 2].y = y + tensorRadius*2 * 1\n\n        new_op.inputs  = [t_index + 0, t_index + 1]\n        new_op.outputs = [t_index + 2]\n    }\n\n    networks[networkIndex].add_operator(new_op)\n}\n\n\nclass Button{\n    constructor(x, y, w, h, bool=false){\n        this.x = x\n        this.y = y\n        this.w = w\n        this.h = h\n        this.bool = bool;\n    }\n    press(x, y){\n        if(this.x <= x && this.x + this.w >= x\n        && this.y <= y && this.y + this.h >= y){\n            this.bool = !this.bool\n        }\n    }\n}\n\nvar Buttons = []\nvar b = new Button(tensorRadius*2, tensorRadius*2, tensorRadius*2, tensorRadius*2, true);\nButtons.push(b)\n\n\n\n\n\n\n\n\n\n\n\nexport function init() {\n\n    canvas = document.getElementById(\"gui_canvas\")\n    canvas.addEventListener(\"mousedown\", doMouseDown, false)\n    canvas.addEventListener(\"mousemove\", doMouseMove, false)\n    canvas.addEventListener(\"mouseup\", doMouseUp, false)\n    canvas.addEventListener(\"dblclick\", doDoubleClick, false)\n    ctx = canvas.getContext(\"2d\");\n\n    canvas.width = canvas.getBoundingClientRect().width\n    canvas.height = canvas.getBoundingClientRect().height\n\n    width = canvas.width;\n    height = canvas.height;\n\n    last_frame = Date.now()\n    this_frame = Date.now()\n\n    \n    window.requestAnimationFrame(draw);\n}\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n\nvar seconds = 0;\n\nfunction drawTensor(network, tensorIndex) {\n    let t = network.tensors[tensorIndex]\n\n    if (t.live) {\n        ctx.fillStyle = \"white\"\n        ctx.lineWidth = 1\n        ctx.setLineDash([])\n        ctx.strokeStyle = 'black'\n    }\n    else {\n        ctx.fillStyle = \"rgba(255,255,255,0)\"\n        ctx.lineWidth = 1\n        ctx.setLineDash([3,4])\n        ctx.strokeStyle = 'Grey'\n    }\n\n    ctx.beginPath()\n    if (t.scalar) {\n        ctx.rect(t.x - scalarTensorRadius, t.y - scalarTensorRadius, 2 * scalarTensorRadius, 2 * scalarTensorRadius)\n    }\n    else {\n        ctx.rect(t.x - tensorRadius, t.y - tensorRadius, 2 * tensorRadius, 2 * tensorRadius)\n    }\n    ctx.fill()\n    ctx.stroke()\n\n    if(t.selected){\n        ctx.fillStyle = \"rgba(255,255,255,0)\"\n        ctx.lineWidth = 1\n        ctx.strokeStyle = '#5dd2f0'\n        ctx.setLineDash([])\n        ctx.beginPath()\n        ctx.roundRect(t.x - tensorRadius*1.5, t.y - tensorRadius*1.5, 3 * tensorRadius, 3 * tensorRadius, tensorRadius * 0.2)\n        ctx.stroke()\n    }\n}\n\n// here we draw the function naively without checking for tensor positions. That must be handled \n// by movement logic\nfunction drawOperator(network, operatorIndex) {\n    let o = network.operators[operatorIndex]\n    let input\n    let input1\n    let input2\n    let output\n\n    let functionGradient = ctx.createLinearGradient(0, 0, width, height)\n    functionGradient.addColorStop(0, \"#DE7521\")\n    functionGradient.addColorStop(1, \"#218ADE\")\n\n    ctx.fillStyle = functionGradient\n\n    var tapes = 3\n\n    switch (o.func) {\n        case 0: // abstraction\n            break\n        case 1: // identity\n            break\n        case 2: // add\n            input1 = network.tensors[o.inputs[0]]\n            input2 = network.tensors[o.inputs[1]]\n            output = network.tensors[o.outputs[0]]\n\n            ctx.beginPath()\n            ctx.moveTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y + tensorRadius)\n\n            ctx.lineTo(input1.x + tensorRadius, input1.y + tensorRadius)\n            ctx.lineTo(input1.x + tensorRadius, input1.y - tensorRadius)\n            ctx.closePath()\n            ctx.fill()\n\n            ctx.beginPath()\n            ctx.moveTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y + tensorRadius)\n\n            ctx.lineTo(input2.x + tensorRadius, input2.y + tensorRadius)\n            ctx.lineTo(input2.x + tensorRadius, input2.y - tensorRadius)\n            ctx.closePath()\n            ctx.fill()\n\n\n            break\n        case 3: // subtract\n            input1 = network.tensors[o.inputs[0]]\n            input2 = network.tensors[o.inputs[1]]\n            output = network.tensors[o.outputs[0]]\n\n            break\n        case 4: // scale\n            break\n        case 5: // full\n            input1 = network.tensors[o.inputs[0]]\n            input2 = network.tensors[o.inputs[1]]\n            output = network.tensors[o.outputs[0]]\n\n            ctx.beginPath()\n            ctx.moveTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y + tensorRadius)\n\n            ctx.lineTo(input1.x + tensorRadius, input1.y + tensorRadius)\n            ctx.lineTo(input1.x + tensorRadius, input1.y - tensorRadius)\n\n            ctx.lineTo(input2.x - tensorRadius, input2.y + tensorRadius)\n            ctx.lineTo(input2.x + tensorRadius, input2.y + tensorRadius)\n           \n            ctx.closePath()\n            ctx.fill()\n            break\n        case 6: // amass\n            break\n        case 7: // softmax\n            input = network.tensors[o.inputs[0]]\n            output = network.tensors[o.outputs[0]]\n\n            ctx.beginPath()\n            ctx.moveTo(output.x - tensorRadius, output.y - tensorRadius*0.5)\n            ctx.lineTo(output.x - tensorRadius, output.y + tensorRadius*0.5)\n\n            ctx.lineTo(input.x + tensorRadius, input.y + tensorRadius)\n            ctx.lineTo(input.x + tensorRadius, input.y - tensorRadius)\n        \n            ctx.closePath()\n            ctx.fill()\n\n            break\n        case 8: // hardmax\n            break\n        case 9: // max\n            break\n        case 10: // convolution\n            input1 = network.tensors[o.inputs[0]]\n            input2 = network.tensors[o.inputs[1]]\n            output = network.tensors[o.outputs[0]]\n\n            ctx.beginPath()\n            ctx.moveTo(input1.x + tensorRadius, input1.y - tensorRadius + (tensorRadius * 2 / (tapes*2 - 1)))\n            ctx.lineTo(input1.x + tensorRadius, input1.y - tensorRadius)\n            \n            ctx.lineTo(input2.x - tensorRadius, input2.y + tensorRadius)\n            ctx.lineTo(input2.x + tensorRadius, input2.y + tensorRadius)\n\n            ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius + (tensorRadius * 2 / (tapes*2 - 1)))\n            \n            //not quite sure how this works but it does\n            for(let i = 1; i < tapes*2 - 1; i += 2){\n                ctx.lineTo(input1.x + tensorRadius, input1.y - tensorRadius + (tensorRadius * 2 / (tapes*2 - 1))*i )\n                ctx.lineTo(input1.x + tensorRadius, input1.y - tensorRadius + (tensorRadius * 2 / (tapes*2 - 1))*(i+1) ) \n\n                ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius + (tensorRadius * 2 / (tapes*2 - 1))*(i+1) )\n                ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius + (tensorRadius * 2 / (tapes*2 - 1))*(i+2) )\n            }\n\n            ctx.lineTo(input1.x + tensorRadius, input1.y + tensorRadius)\n           \n            ctx.closePath()\n            ctx.fill()\n            break\n        case 11: // squared dist\n            break\n        case 12: // PReLU\n            input = network.tensors[o.inputs[0]]\n            output = network.tensors[o.outputs[0]]\n\n            ctx.beginPath()\n            ctx.moveTo(input.x + tensorRadius, input.y + tensorRadius)\n            ctx.lineTo(input.x + tensorRadius, input.y - tensorRadius)\n\n\n            ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius + (tensorRadius * 2 / (tapes*2 - 1))) \n\n            //very ugly i hate it\n            for(let i = 1; i < tapes*2 - 1; i += 2){\n                ctx.lineTo((output.x + input.x)/2, (output.y + input.y)/2 - tensorRadius + (tensorRadius * 2 / (tapes*2 - 1))*i )\n                ctx.lineTo((output.x + input.x)/2, (output.y + input.y)/2 - tensorRadius + (tensorRadius * 2 / (tapes*2 - 1))*(i+1) ) \n\n                ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius + (tensorRadius * 2 / (tapes*2 - 1))*(i+1) )\n                ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius + (tensorRadius * 2 / (tapes*2 - 1))*(i+2) )\n            }\n\n        \n            ctx.closePath()\n            ctx.fill()\n            break\n        default:\n            console.log(\"Invalid operator types\")\n            break\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar seconds = 0;\n\nfunction draw() {\n    canvas.width = canvas.getBoundingClientRect().width\n    canvas.height = canvas.getBoundingClientRect().height\n    width = canvas.width\n    height = canvas.height\n\n    last_frame = this_frame\n    this_frame = Date.now()\n    var sec = (this_frame - last_frame) / 1000.0\n    seconds += sec;\n\n\n    var delta_x = mouseX - last_mouseX;\n    var delta_y = mouseY - last_mouseY;\n    last_mouseX = mouseX;\n    last_mouseY = mouseY;\n\n    if(grid){\n        for(let i = -tensorRadius; i < width; i+= tensorRadius*2){\n            ctx.moveTo(i, 0)\n            ctx.lineTo(i, height)\n        }\n        for(let i = -tensorRadius; i < height; i+= tensorRadius*2){\n            ctx.moveTo(0, i)\n            ctx.lineTo(width, i)\n        }\n        ctx.lineWidth = 0.5\n        ctx.setLineDash([1,4])\n        ctx.strokeStyle = 'Grey'\n        ctx.stroke();\n    }\n    \n\n    for (let i = 0; i < networks[0].operators.length; i++) {\n        drawOperator(networks[0], i)\n    }\n\n    for (let i = 0; i < networks[0].tensors.length; i++) {\n        drawTensor(networks[0], i)\n        if(networks[networkIndex].tensors[i].selected && !selecting && down){\n            placeTensor(networks[networkIndex],i,\n                networks[networkIndex].tensors[i].tx + mouseX - tmX,\n                networks[networkIndex].tensors[i].ty + mouseY - tmY, grid)\n        }\n    }\n\n    /*\n    if(draggedIndex != -1){\n\n        placeTensor(networks[networkIndex], draggedIndex, mouseX, mouseY, grid)\n\n    }else if(dragged_operator_index != -1){\n        var dragged_op = networks[networkIndex].operators[dragged_operator_index]\n\n        for(let i = 0; i < dragged_op.inputs.length; i++){\n            placeTensor(networks[networkIndex],dragged_op.inputs[i],\n                networks[networkIndex].tensors[dragged_op.inputs[i]].tx + mouseX - tmX,\n                networks[networkIndex].tensors[dragged_op.inputs[i]].ty + mouseY - tmY, grid)\n        }\n        for(let i = 0; i < dragged_op.outputs.length; i++){\n            placeTensor(networks[networkIndex],dragged_op.outputs[i],\n                networks[networkIndex].tensors[dragged_op.outputs[i]].tx + mouseX - tmX,\n                networks[networkIndex].tensors[dragged_op.outputs[i]].ty + mouseY - tmY, grid)\n        }\n    }\n    */\n\n\n    \n\n\n\n    if(selecting){\n        ctx.fillStyle = \"rgba(255,255,255,0)\"\n        ctx.lineWidth = 1\n        ctx.strokeStyle = '#5dd2f0'\n        ctx.setLineDash([3,2])\n        ctx.beginPath()\n        \n        ctx.roundRect(tmX,tmY,mouseX-tmX,mouseY-tmY, tensorRadius * 0.2)\n            \n        ctx.stroke()\n    }\n\n    ctx.fillStyle = \"black\"\n    ctx.fillRect(Buttons[0].x, Buttons[0].y, Buttons[0].w, Buttons[0].h)\n    grid = Buttons[0].bool\n\n\n\n\n    window.requestAnimationFrame(draw);\n}\n\n\n\n\n\n\n\nfunction clear_selected(){\n    for(let i = 0; i < networks[networkIndex].tensors.length; i++){\n        networks[networkIndex].tensors[i].selected = false;\n    }\n}\n\n\n\n\nfunction doDoubleClick(e) {\n\n    let clickedList = getHoveredTensorIndices(networks[networkIndex], mouseX, mouseY)\n    console.log(\"Clicked Indices \", clickedList)\n\n    for (let i = 0; i < clickedList.length; i++) {\n        var clickedIndex = clickedList[i]\n        var t0 = networks[networkIndex].tensors[clickedIndex]\n        if (t0.output_of == null || t0.input_to.length == 0) {\n            t0.live = !t0.live\n        }\n        else {\n            console.log(\"Unmerge\")\n            unmergeTensor(networks[networkIndex], clickedIndex)\n        }\n    }\n}\n\n\nfunction doMouseUp(e) {\n    \n    selecting = false;\n\n    \n    for(let i = 0; i < networks[networkIndex].tensors.length; i++){\n        for(let j = 0; j < networks[networkIndex].tensors.length; j++){\n                \n\n            if(j == i){\n                continue\n            }\n            var t1 = networks[networkIndex].tensors[i];\n            var t2 = networks[networkIndex].tensors[j];\n\n            if(Math.abs(t1.x - t2.x) < tensorRadius * 2 && Math.abs(t1.y - t2.y) < tensorRadius * 2){\n                mergeTensors(networks[networkIndex], i, j);\n            }\n        }\n    }\n    \n    \n    down = false\n    draggedIndex = -1\n    dragged_operator_index = -1\n\n    let clickedList = getHoveredTensorIndices(networks[networkIndex], mouseX, mouseY)\n\n    if (clickedList.length >= 2) {\n        mergeTensors(networks[networkIndex], clickedList[0], clickedList[1])\n        // if either tensor are ghosts\n    }\n}\n\nfunction doMouseDown(e) {\n    down = true\n    for(let i = 0; i < networks[networkIndex].tensors.length; i++){\n        networks[networkIndex].tensors[i].tx = networks[networkIndex].tensors[i].x\n        networks[networkIndex].tensors[i].ty = networks[networkIndex].tensors[i].y\n    }\n    tmX = mouseX;\n    tmY = mouseY;\n\n\n    // console.log(\"Mouse position: \",mouseX,\" \", mouseY)\n    let draggedList = getHoveredTensorIndices(networks[networkIndex], mouseX, mouseY)\n\n    if (draggedList.length != 0) {\n        draggedIndex = draggedList[0]\n        if(!networks[networkIndex].tensors[draggedIndex].selected){\n            clear_selected()\n        }\n        networks[networkIndex].tensors[draggedIndex].selected = true\n    }\n\n    let dragged_operators = getHoveredOperatorIndices(networks[networkIndex], mouseX, mouseY)\n\n    if (dragged_operators.length != 0 && draggedList.length == 0){\n        dragged_operator_index = dragged_operators[0]\n        var op = networks[networkIndex].operators[dragged_operator_index]\n        for(let i = 0; i < op.inputs.length; i++){\n            networks[networkIndex].tensors[op.inputs[i]].selected = true\n        }\n        for(let i = 0; i < op.outputs.length; i++){\n            networks[networkIndex].tensors[op.outputs[i]].selected = true\n        }\n\n\n        \n    }\n\n    if(draggedList.length == 0 && dragged_operators.length == 0){\n        selecting = true\n        clear_selected()\n    }\n\n\n\n    for(let i = 0; i < Buttons.length; i++){\n        Buttons[i].press(mouseX, mouseY)\n    }\n}\n\n\nfunction doMouseMove(e) {\n    if (e.offsetX) {\n        mouseX = e.offsetX;\n        mouseY = e.offsetY;\n    }\n    else if (e.layerX) {\n        mouseX = e.layerX;\n        mouseY = e.layerY;\n    }\n\n    if(selecting){\n        for(let i = 0; i < networks[networkIndex].tensors.length; i++){\n            var t = networks[networkIndex].tensors[i]\n\n            if(Math.abs(t.x - (tmX + mouseX)/2) < Math.abs(tmX - (tmX + mouseX)/2)\n            && Math.abs(t.y - (tmY + mouseY)/2) < Math.abs(tmY - (tmY + mouseY)/2)){\n                t.selected = true\n            }else{\n                t.selected = false\n            }\n        }\n    }\n\n}","<script>\n\timport Modal,{getModal} from './Modal.svelte'\n    import { onMount } from \"svelte\";\n\timport * as objects from \"./define_network_objects\"\n    import * as gui_logic from \"./gui_logic\"\n\n    onMount(() => {\n        gui_logic.init()\n    })\n\n\t// Wrapper for yes clear function\n\tfunction yes_clear() {\n\t\tgetModal('clear').close(1)\n      \tgui_logic.clear_network()\n    }\n\n\t// Add operator functions\n\tfunction add_dense() {\n      \tgui_logic.new_operator(5)\n\t\tgetModal('add_operator').close(1)\n    }\n\tfunction add_conv() {\n      \tgui_logic.new_operator(10)\n\t\tgetModal('add_operator').close(1)\n    }\n\tfunction add_prelu() {\n      \tgui_logic.new_operator(12)\n\t\tgetModal('add_operator').close(1)\n    }\n\tfunction add_softmax() {\n      \tgui_logic.new_operator(7)\n\t\tgetModal('add_operator').close(1)\n    }\n\n\t// Constants\n    let bar_logo = './transparent_bar_logo.png'; // Neurula logo for nav bar\n    let home_link = 'http://127.0.0.1:8000'; // Main domain \n\tlet list_icon = 'https://cdn-icons-png.flaticon.com/512/2103/2103633.png'; // list icon for toolbar. chnage later to operator icons\n\tlet clear_selection; // Value for Modal choice for clearing\n\tlet generate_selection; // Value for Modal choice for which code to generate network in\n\n\t// Add operator variables\n\tlet input;\n\tlet output;\n\tlet parameter_shape; // As tuple\n\n\t// Temporary list of operators (as placeholder for standard neural network)\n\tconst toolbarItems = [\n\t\t{operator_type: \"Dense\"},\n\t\t{operator_type: \"PReLU\"},\n\t\t{operator_type: \"Softmax\"},\n\t\t{operator_type: \"Convolutional\"},\n\t\t{operator_type: \"Dense\"},\n\t\t{operator_type: \"PReLU\"},\n\t\t{operator_type: \"Softmax\"},\n\t\t{operator_type: \"Convolutional\"},\n\t\t{operator_type: \"Dense\"},\n\t\t{operator_type: \"PReLU\"},\n\t\t{operator_type: \"Softmax\"},\n\t\t{operator_type: \"Convolutional\"},\n\t\t{operator_type: \"Dense\"},\n\t\t{operator_type: \"PReLU\"},\n\t\t{operator_type: \"Softmax\"},\n\t\t{operator_type: \"Convolutional\"}\n\t];\n\n\t// Function for nav bar Modal options\n\tfunction setClear(res){\n\t\tclear_selection=res\n\t}\n\n\tfunction setGenerate(res){\n\t\tgenerate_selection=res\n\t}\n\n\tfunction get_list_of_operator_names(){\n\t\treturn gui_logic.get_list_of_operators().map((e) => (objects.function_table[e.func].name));\n\t}\n  \n</script>\n  \n<main>\n\t<!-- Navigation Bar (At top of page) -->\n\t<nav>\n\t\t<div class=\"inner\">\n\t\t\t<ul class=\"navbar-list\">\n\t\t\t\t<li><a href={home_link}><img src={bar_logo} alt=\"Neurula logo.\" style=\"max-height: 40px\" ></a></li>\n\t\t\t\t<li><a href={undefined} class=\"nav-button\" on:click={()=>getModal('clear').open(setClear)}>Clear Canvas</a></li>\n\t\t\t\t<li><a href={undefined} class=\"nav-button\" on:click={()=>getModal('generate').open(setGenerate)}>Generate Code</a></li>\n\t\t\t\t<li><a href={undefined} class=\"nav-button\" on:click={()=>getModal('tutorial').open()}>?</a></li>\n\t\t\t</ul>\n\t\t</div>\n\t</nav>\n\n\t<!-- Neural Network Workspace -->\n\t<div id=\"workspace\">\n\t\t<!-- Workspace Toolbar -->\n\t\t<div id=\"toolbar\">\n\t\t\t<div id=\"toolbar_title\">\n\t\t\t\t<a href={undefined} class=\"nav-button\" on:click={()=>getModal('add_operator').open()}>+ add operator</a>\n\t\t\t</div>\n\t\t\t<div id=\"toolbar_list\">\n\t\t\t\t<div id=\"toolbar_add_operator\">\n\t\t\t\t\t<strong>Current Operators: </strong>\n\t\t\t\t</div>\n\t\t\t\t<!-- Displays list of placeholder navItems as set in <script> -->\n\t\t\t\t{#each toolbarItems as item}\n\t\t\t\t\t<li id=\"list_item\" on:click={()=>getModal('edit_operator').open()}>\n\t\t\t\t\t\t<p><img src={list_icon} alt=\"List icon.\" style=\"max-height: 20px\">{item.operator_type}</p>\n\t\t\t\t\t</li>\n\t\t\t\t{/each}\n\t\t\t</div>\n\t\t</div>\n\n\t\t<!-- Workspace Canvas (For drawing the neural network) -->\n        <div id=\"canvas_container\">\n            <canvas id=\"gui_canvas\"></canvas>\n        </div>\n    </div>\n\n\t<!-- Modal Popups for Navigation Bar-->\n\t<Modal id=\"clear\">\n\t\tAre you sure?\n\t\t<!-- Passing a value back to the callback function; Choice is saved in 'clear_selection' -->\n\t\t<button class=\"green\" on:click={yes_clear}>\n\t\t\tYes\n\t\t</button>\n\t\t<button class=\"green\" on:click={()=>getModal('clear').close(0)}>\n\t\t\tNo\n\t\t</button>\n\t</Modal>\n\n\t<Modal id=\"generate\">\n\t\tHow would you like to download your neural network? <br><br>\n\t\t<!-- Passing a value back to the callback function; Choice is saved in 'generate_selection' -->\n\t\t<button class=\"green\" on:click={()=>getModal('generate').close(1)}>\n\t\t\tPytorch\n\t\t</button>\n\t\t<button class=\"green\" on:click={()=>getModal('generate').close(2)}>\n\t\t\tTensorflow\n\t\t</button>\n\t</Modal>\n\n\t<Modal id=\"tutorial\">\n\t\t<h1>Tutorial</h1>\n\t</Modal>\n\n\t<Modal id=\"add_operator\">\n\t\tAdd Operator: <br><br>\n\t\t <!-- Calls function to call specific operator -->\n\t\t <button class=\"option\" on:click={add_dense}>\n            Dense\n        </button>\n        <button class=\"option\" on:click={add_conv}>\n            Convolutional\n        </button>\n        <button class=\"option\" on:click={add_prelu}>\n            PReLU\n        </button>\n        <button class=\"option\" on:click={add_softmax}>\n            Softmax\n        </button>\n\t</Modal>\n\n\t<Modal id=\"edit_operator\">\n\t\tEdit Operator: <br><br>\n\t\tAdd input, output, parameter shape blanks.\n\t</Modal>\n\n</main>\n\n<style>\n\tmain {\n\t\tmargin: 0px;\n\t}\n\timg {\n\t\tmargin-right: 10px;\n\t}\n\tnav {\n\t\tbackground-color: rgba(0, 0, 0, 0.8);\n\t\tfont-family: \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n\t\theight: 60px;\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tborder-radius: 0.4em;\n\t}  \n\t.inner {\n\t\tmax-width: 980px;\n\t\tpadding-left: 20px;\n\t\tpadding-right: 20px;\n\t\tmargin: auto;\n\t\tbox-sizing: border-box;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\theight: 100%;\n\t}\n  \n\t.navbar-list {\n\t\tdisplay: none;\n\t\twidth: 100%;\n\t\tjustify-content: space-between;\n\t\tmargin: 0;\n\t\tpadding: 0 40px;\n\t}\n  \n\t.navbar-list li {\n\t\tlist-style-type: none;\n\t}\n\ta.nav-button {\n\t\tdisplay: inline-block;\n\t\tpadding: 0.5em 1.25em;\n\t\tborder: 0.1em solid #FFFFFF;\n\t\tmargin: 0;\n\t\tborder-radius: 0.4em;\n\t\tbox-sizing: border-box;\n\t\ttext-decoration: none;\n\t\tfont-family: 'Roboto', sans-serif;\n\t\tfont-weight: 300;\n\t\tfont-size: 15px;\n\t\tcolor: #FFFFFF;\n\t\ttext-align: center;\n\t\ttransition: all 0.4s;\n\t}\n\ta.nav-button:hover {\n\t\tcolor: rgba(0, 0, 0, 0.8);\n\t\tbackground-color: #FFFFFF;\n\t}\n\t#workspace{\n        height: 100%;\n\t\tmargin: 100px;\n\t\tborder-radius: 0.4em;\n\t\tbox-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n    }\n    #toolbar {\n        float: left;\n        height: 500px;\n        width: 200px;\n\t\tfont-family: 'Roboto', sans-serif;\n\t\tborder-radius: 0.4em 0em 0em 0.4em;\n\t\tbackground-color: white;\n        display: flex;\n        flex-flow: column;\n    }\n\t#toolbar_title {\n\t\tbackground-color: #39c0ba;\n\t\tcolor: white;\n\t\tpadding-left: 10px;\n\t\tpadding-right: 10px;\n\t\tborder-radius: 0.4em 0em 0em 0em;\n\t}\n\t#toolbar_list {\n\t\toverflow-y: scroll;\n\t\tpadding-top: 10px;\n\t}\n\t#toolbar li {\n\t\tlist-style-type: none;\n\t}\n    #toolbar_add_operator{\n        flex: 1 1 auto;\n    }\n\t#list_item {\n\t\tpadding-left: 10px;\n\t\tpadding-bottom: 1px;\n\t\tborder-top: 0.1em solid whitesmoke;\n\t}\n\t#list_item:hover {\n\t\tbackground-color: whitesmoke;\n\t\ttext-decoration: underline;\n\t}\n    #canvas_container{\n        overflow: hidden;\n\t\tborder-radius: 0em 0.4em 0.4em 0em;\n    }\n    #gui_canvas{\n        width: 100%;\n        height: 500px;\n    }\n  \n\t@media only screen and (min-width: 767px) {\n\t\ta.nav-button{\n\t\t\tdisplay: block;\n\t\t\tmargin: 0.4em auto;\n\t\t}\n\t\t.navbar-list {\n\t\t\tdisplay: flex;\n\t\t\tpadding: 0;\n\t\t}\n\t\t.navbar-list a {\n\t\t\tdisplay: inline-flex;\n\t\t}\n\t}\n</style>","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {\n\t\tname: 'world'\n\t}\n});\n\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","src_url_equal_anchor","current_component","src_url_equal","element_src","url","document","createElement","href","get_slot_context","definition","ctx","$$scope","tar","src","k","assign","slice","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","svg_element","createElementNS","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_style","key","important","style","removeProperty","setProperty","toggle_class","toggle","classList","set_current_component","component","get_current_component","Error","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","seen_callbacks","Set","flushidx","flush","saved_component","length","update","$$","pop","i","callback","has","add","clear","fragment","before_update","dirty","p","after_update","outroing","onTop","transition_in","block","local","delete","transition_out","o","outros","c","d","create_component","mount_component","customElement","on_mount","on_destroy","m","new_on_destroy","map","filter","destroy_component","detaching","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","type","index","indexOf","splice","$set","$$props","obj","$$set","keys","slot_ctx","div2","div1","svg","circle","line0","line1","div0","stopPropagation","call","slot","slot_definition","slot_changes","get_slot_context_fn","slot_context","lets","undefined","merged","len","Math","max","modals","getModal","id","topDiv","prevOnTop","closeCallback","visible","keyPress","ev","close","retVal","window","body","overflow","$$invalidate","open","$$value","Network","constructor","tensors","operators","input_tensors","param_tensors","output_tensors","truth_tensors","loss","add_tensor","t","add_operator","op","clone","inputs","input_to","outputs","output_of","update_tensors","expand","func","network","inner_net","abstraction","old_operators_length","new_id","includes","j","index_of_op","op_index","to_string","str","form","String","Tensor","live","scalar","x","y","tx","ty","selected","calc_size","size_of_tensor","size","Func","num_inputs","calc_form","out","console","log","form1","form2","form1_total","form2_total","out_form","Operator","function_table","apply","tensorRadius","get_tensor_bounds","operator_index","tensor_index","ans","x_min","x_max","y_min","y_max","output","input_index","unary","side_binary","top_binary","inp0","inp1","highest","min","rightest","placeTensor","grid","bounds","getHoveredTensorIndices","hovered_tensors_list","unmergeTensor","t0","functions","fi","op1","tnewind","todeleteind","findIndex","elem","mergeTensors","tensor_index0","tensor_index1","t1","toDeleteIndex","noDeleteIndex","tmp","ind","deleteTensor","canvas","width","height","down","draggedIndex","dragged_operator_index","mouseX","mouseY","tmX","tmY","networks","selecting","new_operator","clear_selected","new_op","t_index","CanvasRenderingContext2D","prototype","roundRect","w","h","r","beginPath","moveTo","arcTo","closePath","Buttons","bool","press","drawTensor","tensorIndex","fillStyle","lineWidth","setLineDash","strokeStyle","rect","stroke","drawOperator","operatorIndex","input","input1","input2","functionGradient","createLinearGradient","addColorStop","lineTo","tapes","draw","getBoundingClientRect","fillRect","requestAnimationFrame","doDoubleClick","e","clickedList","clickedIndex","doMouseUp","t2","abs","doMouseDown","draggedList","dragged_operators","grabbedList","getHoveredOperatorIndices","doMouseMove","offsetX","offsetY","layerX","layerY","t0_value","operator_type","list_icon","img","img_src_value","li","button0","button1","br0","br1","h1","button2","button3","bar_logo","home_link","main","nav","ul","li0","a0","li1","a1","li2","a2","li3","a3","div6","div4","a4","div3","div5","iterations","getElementById","getContext","setClear","res","setGenerate","gui_logic.new_operator"],"mappings":"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"}