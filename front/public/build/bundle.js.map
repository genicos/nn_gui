{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/Modal.svelte","../../src/define_network_objects.js","../../src/mouse_network_interaction.js","../../src/network_logic.js","../../src/gui_logic.js","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape_attribute_value(value.toString())}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.46.6' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","<!-- Taken from Svelte website exmaples -->\n<!-- \t* Modified as needed -->\n\n<script context=\"module\" lang=\"ts\">\n\tlet onTop   //keeping track of which open modal is on top\n\tconst modals={}  //all modals get registered here for easy future access\n\t\n\t// \treturns an object for the modal specified by `id`, which contains the API functions (`open` and `close` )\n\texport function getModal(id=''){\n\t\treturn modals[id]\n\t}\n</script>\n\n<script lang=\"ts\">\nimport {onDestroy} from 'svelte'\n\t\nlet topDiv\nlet visible=false\nlet prevOnTop\nlet closeCallback\n\nexport let id=''\n\nfunction keyPress(ev){\n\t//only respond if the current modal is the top one\n\tif(ev.key==\"Escape\" && onTop==topDiv) close() //ESC\n}\n\n/**  API **/\nfunction open(callback){\n\tcloseCallback=callback\n\tif(visible) return\n\tprevOnTop=onTop\n\tonTop=topDiv\n\twindow.addEventListener(\"keydown\",keyPress)\n\t\n\t//this prevents scrolling of the main window on larger screens\n\tdocument.body.style.overflow=\"hidden\" \n\n\tvisible=true\n\t//Move the modal in the DOM to be the last child of <BODY> so that it can be on top of everything\n\tdocument.body.appendChild(topDiv)\n}\n\t\nfunction close(retVal){\n\tif(!visible) return\n\twindow.removeEventListener(\"keydown\",keyPress)\n\tonTop=prevOnTop\n\tif(onTop==null) document.body.style.overflow=\"\"\n\tvisible=false\n\tif(closeCallback) closeCallback(retVal)\n}\n\t\n//expose the API\nmodals[id]={open,close}\n\t\nonDestroy(()=>{\n\tdelete modals[id]\n\twindow.removeEventListener(\"keydown\",keyPress)\n})\n\t\n</script>\n\n<div id=\"topModal\" class:visible bind:this={topDiv} on:click={()=>close()}>\n\t<div id='modal' on:click|stopPropagation={()=>{}}>\n\t\t<svg id=\"close\" on:click={()=>close()} viewBox=\"0 0 12 12\">\n\t\t\t<circle cx=6 cy=6 r=6 />\n\t\t\t<line x1=3 y1=3 x2=9 y2=9 />\n\t\t\t<line x1=9 y1=3 x2=3 y2=9 />\n\t\t</svg>\n\t\t<div id='modal-content'>\n\t\t\t<slot></slot>\n\t\t</div>\n\t</div>\n</div>\n\n<style>\n\t#topModal {\n\t\tvisibility: hidden;\n\t\tz-index: 9999;\n\t\tposition: fixed;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tbackground: #4448;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t}\n\t#modal {\n\t\tfont-family: \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n\t\tfont-size: 20px;\n\t\tposition: relative;\n\t\tborder-radius: 6px;\n\t\tbackground: white;\n\t\tfilter: drop-shadow(5px 5px 5px #555);\n\t\tpadding: 1em;\n\t\tmargin: 200px;\n\t}\n\n\t.visible {\n\t\tvisibility: visible !important;\n\t}\n\n    #close {\n\t\tposition: absolute;\n\t\ttop:-12px;\n\t\tright:-12px;\n\t\twidth:24px;\n\t\theight:24px;\n\t\tcursor: pointer;\n\t\tborder-color: rgba(0, 0, 0, 0.8);\n\t\tborder-width: thin;\n\t\tfill: white;\n\t\ttransition: transform 0.3s;\n\t}\t\n\n\t#close:hover {\n\t\tfill: rgba(0, 0, 0, 0.8);\n\t}\n\n\t#close line {\n\t\tstroke: rgba(0, 0, 0, 0.8);\n\t\tstroke-width: 1;\n\t}\n\t#close:hover line {\n\t\tstroke: white;\n\t\tstroke-width: 1;\n\t}\n\n\t#close:focus {\n    \tborder-color: #3399ff;\n    \tbox-shadow: 0 0 0 2px #3399ff;\n  \t}\n\n\t#modal-content {\n\t\tmax-width: calc(100vw - 20px);\n\t\tmax-height: calc(100vh - 20px);\n\t\toverflow: auto;\n\t}\n</style>","\n\n\nexport class Network{\n    constructor(){\n        this.tensors = [] //actual tensor objects\n        this.operators = [] //actual operator objects\n\n        this.input_tensors = []\n        this.param_tensors = []\n        this.output_tensors = []\n        this.truth_tensors = []\n        this.loss = null\n    }\n\n    add_tensor(t){\n        this.tensors.push(t);\n    }\n\n    add_operator(op){\n        \n        var o = op.clone()\n\n        this.operators.push(o);\n        \n        for(let i = 0; i < o.inputs.length; i++){\n            this.tensors[o.inputs[i]].input_to.push(this.operators.length - 1)\n        }\n        \n        for(let i = 0; i < o.outputs.length; i++){\n            this.tensors[o.outputs[i]].output_of = this.operators.length - 1\n        }\n    }\n\n    update_tensors(){\n\n        for(let i = 0; i < this.tensors.length; i++){\n            this.tensors[i].input_to = []\n            this.tensors[i].output_of = null\n        }\n        for(let k = 0; k < this.operators.length; k++){\n\n            for(let i = 0; i < this.operators[k].inputs.length; i++){\n                this.tensors[this.operators[k].inputs[i]].input_to.push(k)\n            }\n            \n            for(let i = 0; i < this.operators[k].outputs.length; i++){\n                this.tensors[this.operators[k].outputs[i]].output_of = k\n            }\n\n        }\n\n    }\n\n    //This function finds all abstraction operators and replaces them with their\n    // inner network\n    expand(){\n        //assumes that network is alright, ok, and doin well\n        //inner networks shouldn't have parameter tensors\n\n        \n        for(let i = 0; i < this.operators.length; i++){\n\n            //finding an abstraction operator to expand\n            if(this.operators[i].func == 0 && this.operators[i].network){\n                \n                //recursively expanding inner networks\n                var inner_net = this.operators[i].network;\n                inner_net.expand();\n\n                //Take out abstraction operator\n                var abstraction = this.operators[i]\n                \n                \n                //add new operators\n                var old_operators_length = this.operators.length\n\n                \n                this.operators[i] = inner_net.operators[0]\n                for(let k = 1; k < inner_net.operators.length; k++){\n                    this.add_operator(inner_net.operators[k])\n                }\n                \n\n                //Loop through each inner net tensor\n                //  this tensor will have a new id under the outer network\n                //    we determine this new id\n                //  in each tensor, find all operators it is associated with\n                //      by checking inputs_to and output_of\n                //    we then update the associations of these operators so that they\n                //      point to the new id\n                for(let k = 0; k < inner_net.tensors.length; k++){\n\n                    //these tensors will have a new id as measured by the outer network\n                    var new_id = k;\n\n                    \n                    if(inner_net.input_tensors.includes(k)){\n                        var index = inner_net.input_tensors.indexOf(k)\n\n                        new_id = abstraction.inputs[index]\n                    }else if(inner_net.output_tensors.includes(k)){\n                        var index = inner_net.output_tensors.indexOf(k)\n\n                        new_id = abstraction.outputs[index]\n                    }else{\n                        this.add_tensor(inner_net.tensors[k])\n                        new_id = this.tensors.length - 1\n                    }\n\n                    \n\n                    //finding all associated operators\n                    for(let j = 0; j < inner_net.tensors[k].input_to.length; j++){\n                        \n                        var index_of_op = inner_net.tensors[k].input_to[j]\n                        var op_index = inner_net.operators[ index_of_op ].inputs.indexOf(k)\n                        \n                        \n\n                        if(index_of_op == 0){\n                            \n                            this.operators[i].inputs[op_index] = new_id\n                        }else{\n                            \n                            this.operators[index_of_op + old_operators_length - 1].inputs[op_index] = new_id\n                        }\n                    }\n                    \n\n                    if(inner_net.tensors[k].output_of || inner_net.tensors[k].output_of == 0){\n\n                        \n                        var index_of_op = inner_net.tensors[k].output_of\n                        var op_index = inner_net.operators[ index_of_op ].outputs.indexOf(k)\n                        \n                        if(index_of_op == 0){\n                            this.operators[i].outputs[op_index] = new_id\n                        }else{\n                            this.operators[index_of_op + old_operators_length - 1].outputs[op_index] = new_id\n                        }\n                    }\n\n\n\n                }\n                \n                this.update_tensors()\n            }\n        }\n        \n    }\n\n    //Peer inside network, for debugging\n    to_string(){\n\n        var str = \"\"\n        \n        str += \"Tensors: \\n\"\n        \n        for(let i = 0; i < this.tensors.length; i++){\n            str += \"\\t\"+i+\":\\n\"\n            if(this.tensors[i].form){\n                str += \"\\t\\tform: \"+String(this.tensors[i].form)+\"\\n\"\n            }\n\n            str += \"\\t\\tinput_to:\\n\"\n            for(let k = 0; k < this.tensors[i].input_to.length; k++){\n                str += \"\\t\\t\\t\" + this.tensors[i].input_to[k] + \"\\n\"\n            }\n            \n\n            str += \"\\t\\toutput_of\\n\"\n            str += \"\\t\\t\\t\"+this.tensors[i].output_of + \"\\n\"\n        }\n\n        str += \"Operators: \\n\"\n        for(let i = 0; i < this.operators.length; i++){\n            str += \"\\t\"+i+\":\\n\"\n\n            str += \"\\t\\tinputs:\\n\"\n            for(let k = 0; k < this.operators[i].inputs.length; k++){\n                str += \"\\t\\t\\t\" + this.operators[i].inputs[k] + \"\\n\"\n            }\n\n            str += \"\\t\\toutputs:\\n\"\n            for(let k = 0; k < this.operators[i].outputs.length; k++){\n                str += \"\\t\\t\\t\" + this.operators[i].outputs[k] + \"\\n\"\n            }\n\n            str += \"\\t\\tfunc: \"+this.operators[i].func + \"\\n\"\n        }\n        \n        str += \"input_tensors:\\n\"\n        for(let i = 0; i < this.input_tensors.length; i++){\n            str += \"\\t\"+this.input_tensors[i]+\"\\n\"\n        }\n        \n        str += \"param_tensors:\\n\"\n        for(let i = 0; i < this.param_tensors.length; i++){\n            str += \"\\t\"+this.param_tensors[i]+\"\\n\"\n        }\n        \n        str += \"output_tensors:\\n\"\n        for(let i = 0; i < this.output_tensors.length; i++){\n            str += \"\\t\"+this.output_tensors[i]+\"\\n\"\n        }\n\n        return str\n    }\n}\n\nexport class Tensor{\n    constructor(live, form) {\n        this.scalar = false //I dont think I ever use this, i just check if this.size == 1\n\n        // live is boolean, it means the tensor has been defined\n        if (live)\n            this.live = live\n        else\n            this.live = false\n\n        // form is like tensorflow shape\n        if(form)\n            this.form = form\n        else\n            form = []\n        \n        //center of tensor square\n        this.x = 0;\n        this.y = 0;\n\n        this.tx = 0;\n        this.ty = 0;\n\n        this.selected = false\n\n        //Which operators this tensor is an input to\n        this.input_to = []\n        //Which operator this tensor is an output of\n        this.output_of = null;\n    }\n\n    // Number of elements in this tensor\n    calc_size(){\n        if(this.form){\n\n            var size_of_tensor = 1;\n\n            for(let k = 0; k < this.form.length; k++){\n                size_of_tensor *= this.form[k]\n            }\n\n            this.size = size_of_tensor\n            \n        }else{\n            this.size = 0\n        }\n        return this.size\n    }\n}\n\n\nexport class Func{\n    constructor(name, num_inputs){\n        this.name = name\n        this.num_inputs = num_inputs\n    }\n\n    //takes array of tensors, with forms computed\n    //returns array of output forms\n    calc_form(inputs, network){\n        \n        var out = []\n        console.log(this.name)\n\n        switch(this.name){\n            case \"identity\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n            case \"add\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n            case \"subtract\":\n                out.push(network.tensors[inputs[0]].form)\n                break   \n            case \"scale\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n            case \"full\":\n\n                var form1 = network.tensors[inputs[0]].form\n                var form2 = network.tensors[inputs[1]].form\n\n                var form1_total = 1\n                for(let i = 0; i < form1.length; i++){\n                    form1_total *= form1[i]\n                }\n                var form2_total = 1\n                for(let i = 0; i < form2.length; i++){\n                    form2_total *= form2[i]\n                }\n\n                var out_form = []\n                out_form.push(form2_total/form1_total)\n                \n                out.push(out_form)\n                break\n            case \"amass\":\n                var out_form = []\n                out_form.push(1)\n                \n                out.push(out_form)\n                break\n            case \"softmax\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n            case \"hardmax\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n            case \"max\":\n                var out_form = []\n                out_form.push(1)\n                \n                out.push(out_form)\n                break\n            case \"convolution\":\n                form1 = network.tensors[inputs[0]].form\n                form2 = network.tensors[inputs[1]].form\n                var out_form = []\n\n                \n                for(let i = 0; i < form1.length; i++){\n                    if(form2.length <= i){\n                        out_form.push(form1[i])\n                    }else{\n                        out_form.push(form1[i] - form2[i] + 1)\n                    }\n                }\n                \n                out.push(out_form)\n                break\n            \n            case \"squared dist\":\n                out.push([1])\n                break\n            \n            case \"ReLU\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n\n            case \"LeakyReLU\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n\n            case \"Leaky to ReLU\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n                \n\n        }\n\n        return out\n    }\n}\n\n\n\nexport class Operator{\n    constructor(func){\n\n        //input and output tensors of this operator\n        this.inputs = []\n        this.outputs = []\n\n\n        this.func = func\n        this.size = null\n\n        this.network = null\n\n        this.highlighted = false\n        \n    }\n\n    //Create deep copy of this operator\n    clone(){\n        var clone = new Operator(this.func)\n        clone.inputs = [...this.inputs]\n        clone.outputs = [...this.outputs]\n        clone.network = this.network\n        return clone\n    }\n\n}\n\n\n\n\nexport var function_table = Array.apply(null, Array(12)).map(function () {})\nfunction_table[0] = new Func(\"abstraction\", 0)\nfunction_table[1] = new Func(\"identity\", 1)\nfunction_table[2] = new Func(\"add\", 2)\nfunction_table[3] = new Func(\"subtract\", 2)\nfunction_table[4] = new Func(\"scale\", 2)\nfunction_table[5] = new Func(\"Fully Connected\", 2)\nfunction_table[6] = new Func(\"amass\", 1)\nfunction_table[7] = new Func(\"Softmax\", 1) // softmax exponent base is 2s\nfunction_table[8] = new Func(\"hardmax\", 1)\nfunction_table[9] = new Func(\"max\", 1)\nfunction_table[10] = new Func(\"Convolution\", 2)\nfunction_table[11] = new Func(\"squared dist\", 2)\nfunction_table[12] = new Func(\"PReLU\", 1)\nfunction_table[13] = new Func(\"LeakyReLU\", 1) //negative slope is 0.1\nfunction_table[14] = new Func(\"Leaky to ReLU\", 1) //LeakyReLU in training, ReLU in deployment","import {Network} from \"./define_network_objects\"\nimport {Tensor} from \"./define_network_objects\"\nimport {Operator} from \"./define_network_objects\"\n\n\nconst tensorRadius = 10\n\n\nfunction get_tensor_bounds(network, operator_index, tensor_index){\n    var ans = {\n        x_min: -9999,\n        x_max: 10000,\n        y_min: -9999,\n        y_max: 10000\n    };\n\n    var o = network.operators[operator_index]\n\n    var output = false;\n    var output_index = 0;\n    for(let i = 0; i < o.outputs.length; i++){\n        if(o.outputs[i] == tensor_index){\n            output = true;\n            output_index = i;\n        }\n    }\n\n    var input_index = 0;\n    if(!output){\n    for(let i = 0; i < o.inputs.length; i++){\n        if(o.inputs[i] == tensor_index){\n            input_index = i;\n        }\n    }\n    }\n\n    var unary = false\n    var side_binary = false\n    var top_binary = false;\n\n    switch(o.func){\n        case 0:\n            break\n        case 1:\n            break\n        case 2: //add\n            side_binary = true;\n            break\n        case 4://subtract\n            side_binary = true;\n            break;\n        case 4://scalse\n            top_binary = true;\n            break;\n        case 5://full\n            top_binary = true;\n            break;\n        case 6://amass\n            unary = true;\n            break;\n        case 7://softmax\n            unary = true;\n            break;\n        case 8://hardmax\n            unary = true;\n            break;\n        case 9://max\n            unary = true;\n            break;\n        case 10://convolution\n            top_binary = true;\n            break;\n        case 11://squared_dist\n            side_binary = true\n            break;\n        case 12://ReLU\n            unary = true\n    }\n\n    var inp0 = network.tensors[o.inputs[0]]\n    var inp1 = network.tensors[o.inputs[1]]\n    var out  = network.tensors[o.outputs[0]]\n\n    if(unary){\n        if(output){\n            ans.x_min = inp0.x + 4 * tensorRadius\n        }else{\n            ans.x_max = out.x - 4 * tensorRadius\n        }\n    }\n\n    if(top_binary){\n        if(output){\n            ans.x_min = inp1.x + 2 * tensorRadius\n            ans.y_min = inp1.y + 2 * tensorRadius\n        }else{\n            if(input_index == 1){ //top tensor\n                ans.x_min = inp0.x + 2 * tensorRadius\n                ans.x_max = out.x - 2 * tensorRadius\n\n                var highest = Math.min(out.y, inp0.y)\n                ans.y_max = highest - 2 * tensorRadius\n            }else{\n                ans.x_max = inp1.x - 2 * tensorRadius\n\n                ans.y_min = inp1.y + 2 * tensorRadius\n            }\n        }\n    }\n    if(side_binary){\n        if(output){\n            var rightest = Math.max(inp0.x, inp1.x)\n            ans.x_min = rightest + 4 * tensorRadius\n        }else{\n            if(input_index == 1){ //top tensor\n                ans.x_max = out.x - 4 * tensorRadius\n                \n                ans.y_max = inp0.y - 2 * tensorRadius\n            }else{\n                ans.x_max = out.x - 4 * tensorRadius\n\n                ans.y_min = inp1.y + 2 * tensorRadius\n            }\n        }\n    }\n\n    return ans;\n}\n\n\n\n\n\n\n\n\nexport function placeTensor(network, tensor_index, x, y, grid = false){\n\n    network.tensors[tensor_index].x = x\n    network.tensors[tensor_index].y = y\n\n    if(grid){\n        network.tensors[tensor_index].x -= (network.tensors[tensor_index].x + tensorRadius) % (tensorRadius * 2) - tensorRadius\n        network.tensors[tensor_index].y -= (network.tensors[tensor_index].y + tensorRadius) % (tensorRadius * 2) - tensorRadius\n    }\n\n    var bounds = {\n        x_min: -9999,\n        x_max: 10000,\n        y_min: -9999,\n        y_max: 10000\n    };\n\n    for(let i = 0; i < network.tensors[tensor_index].input_to.length; i++){\n        let ans = get_tensor_bounds(network,network.tensors[tensor_index].input_to[i],tensor_index)\n        bounds.x_min = Math.max(bounds.x_min, ans.x_min)\n        bounds.x_max = Math.min(bounds.x_max, ans.x_max)\n        bounds.y_min = Math.max(bounds.y_min, ans.y_min)\n        bounds.y_max = Math.min(bounds.y_max, ans.y_max)\n    }\n    \n    \n    if(network.tensors[tensor_index].output_of != null){\n        let ans = get_tensor_bounds(network,network.tensors[tensor_index].output_of,tensor_index)\n        bounds.x_min = Math.max(bounds.x_min, ans.x_min)\n        bounds.x_max = Math.min(bounds.x_max, ans.x_max)\n        bounds.y_min = Math.max(bounds.y_min, ans.y_min)\n        bounds.y_max = Math.min(bounds.y_max, ans.y_max)\n    }\n\n    if( network.tensors[tensor_index].x < bounds.x_min){\n        network.tensors[tensor_index].x = bounds.x_min\n    }\n    if( network.tensors[tensor_index].x > bounds.x_max){\n        network.tensors[tensor_index].x = bounds.x_max\n    }\n    if( network.tensors[tensor_index].y < bounds.y_min){\n        network.tensors[tensor_index].y = bounds.y_min\n    }\n    if( network.tensors[tensor_index].y > bounds.y_max){\n        network.tensors[tensor_index].y = bounds.y_max\n    }\n    \n}\n\n\n\n\n\n\n\n//move tensors, accounting for obstructions\nexport function nudgeTensor(network, tensor_index, delta_x, delta_y){\n\n    placeTensor(network, tensor_index,\n         network.tensors[tensor_index].x + delta_x,\n         network.tensors[tensor_index].y + delta_y\n    )\n    \n}\n\n\n// returns list of indices of tensors with mouse hovered over\n//TODO: TENSORRESHAPE\nexport function getHoveredTensorIndices(network, x, y) {\n    \n    var hovered_tensors_list = []\n\n    \n    for (let j = 0; j < network.tensors.length; j++) {\n        if (network.tensors[j].x - tensorRadius < x &&\n            network.tensors[j].x + tensorRadius > x &&\n            network.tensors[j].y - tensorRadius < y &&\n            network.tensors[j].y + tensorRadius > y) \n        {\n            hovered_tensors_list.push(j)\n        }\n    }\n\n    return hovered_tensors_list\n}\n\n\n\n// returns list of indices of Operators with mouse hovered over\n// We define 'hovering over' an operator as having the mouse\n// over the region that is to the right of the leftmost tensor in the operator, \n// and to the left of the rightmost tensor in the operator, \n// and under the topmost...\n\n//TODO: TENSORRESHAPE\n//TODO: notice the plus and minus patterns, these patterns will differ \n// for different operator types\nexport function getHoveredOperatorIndices(network, x, y) {\n\n    var grabbedList = []\n    \n    for (let j = 0; j < network.operators.length; j++) {\n\n        var o = network.operators[j]\n        var unary = false\n        var side_binary = false\n        var top_binary = false;\n\n        switch(o.func){\n            case 0:\n                break\n            case 1:\n                break\n            case 2: //add\n                side_binary = true;\n                break\n            case 4://subtract\n                side_binary = true;\n                break;\n            case 4://scalse\n                top_binary = true;\n                break;\n            case 5://full\n                top_binary = true;\n                break;\n            case 6://amass\n                unary = true;\n                break;\n            case 7://softmax\n                unary = true;\n                break;\n            case 8://hardmax\n                unary = true;\n                break;\n            case 9://max\n                unary = true;\n                break;\n            case 10://convolution\n                top_binary = true;\n                break;\n            case 11://squared_dist\n                side_binary = true\n                break;\n            case 12://ReLU\n                unary = true\n        }\n\n        var inp0 = network.tensors[o.inputs[0]]\n        var inp1 = network.tensors[o.inputs[1]]\n        var out  = network.tensors[o.outputs[0]]\n\n        var x_min =  1000000\n        var x_max = -1000000\n        var y_min =  1000000\n        var y_max = -1000000\n\n        if(unary){\n            x_min = inp0.x + tensorRadius\n            x_max = out.x  - tensorRadius\n            y_min = Math.min(inp0.y - tensorRadius, out.y - tensorRadius)\n            y_max = Math.max(inp0.y + tensorRadius, out.y + tensorRadius)\n        }\n\n        if(top_binary){\n            x_min = inp0.x + tensorRadius\n            x_max = out.x  - tensorRadius\n            y_min = inp1.y + tensorRadius\n            y_max = Math.max(inp0.y + tensorRadius, out.y + tensorRadius)\n        }\n\n        if(side_binary){\n            x_min = Math.min(inp0.x + tensorRadius, inp1.x + tensorRadius)\n            x_max = out.x  - tensorRadius\n            y_min = inp1.y - tensorRadius\n            y_max = inp0.y + tensorRadius\n        }\n        \n        if (x_min < x &&\n            x_max > x &&\n            y_min < y &&\n            y_max > y) {\n            grabbedList.push(j)\n        }\n    }\n    \n    return grabbedList\n}\n\n\n\n//intersecting_with_operator(network, op_index, x, y)\n//intersecting_with_tensor(network, t_index, x, y)","import {Network} from \"./define_network_objects\"\nimport {Tensor} from \"./define_network_objects\"\nimport {Operator} from \"./define_network_objects\"\n\n\n\nconst unmergeDist = 20\n\n\nexport function unmergeTensor(network, tensor_index) {\n    var t0 = network.tensors[tensor_index]\n\n    // Save function we are inputting to, and delete that shit\n    var functions = t0.input_to\n    t0.input_to = []\n\n    for (let i = 0; i < functions.length; i++) {\n        var fi = functions[i]\n        var op1 = network.operators[fi]\n\n        // create new tensor\n        var tnewind = network.tensors.length\n        network.add_tensor(new Tensor(true))\n        \n        var todeleteind = op1.inputs.findIndex((elem) => elem == tensor_index)\n        op1.inputs[todeleteind] = tnewind\n\n        // update position\n        network.tensors[tnewind].x = t0.x + unmergeDist\n        network.tensors[tnewind].y = t0.y\n\n        network.tensors[tnewind].input_to = [fi]\n        network.tensors[tnewind].output_of = null\n        network.tensors[tnewind].live = false\n    }\n\n    t0.x -= unmergeDist\n    t0.live = false\n\n}\n\n\n\nexport function mergeTensors(network, tensor_index0, tensor_index1) {\n\n    if (network.tensors[tensor_index0].live && network.tensors[tensor_index1].live) {\n        console.log(\"Both merged tensors are live, so don't do anything.\")\n        return\n    }\n        \n    let t0 = network.tensors[tensor_index0]\n    let t1 = network.tensors[tensor_index1]\n\n    let toDeleteIndex = tensor_index1\n    let noDeleteIndex = tensor_index0 \n\n\n    // t0 is already an output to a function and stays, t1 is an input to a function and is deleted\n    if (t0.output_of != null && t1.output_of == null) {}\n    else if (t1.output_of != null && t0.output_of == null) {\n        var tmp = t1\n        t1 = t0\n        t0 = tmp\n        toDeleteIndex = tensor_index0\n        noDeleteIndex = tensor_index1\n    }\n    else {\n        console.log(\"Error merging, only one input must have an output\")\n        return\n    }\n\n    // check that they aren't input and output to the same function\n    console.log(t0.output_of, t1.input_to)\n    if (t0.output_of == t1.input_to) {\n        console.log(\"Error merging, these are input and output of the same function\")\n        return\n    }\n    \n    let ind = network.operators[t1.input_to].inputs.indexOf(toDeleteIndex)\n    network.operators[t1.input_to].inputs[ind] = noDeleteIndex\n\n    t0.input_to = t1.input_to\n    \n    t0.live = (t0.live || t1.live)\n\n    network.tensors[noDeleteIndex].selected = true\n\n    deleteTensor(network, toDeleteIndex)\n}\n\n\nfunction deleteTensor(network, index) {\n    // in operators, decrement input and output indices if greater than deleted indices\n    for (let i = 0; i < network.operators.length; i++) {\n        for (let j = 0; j < network.operators[i].inputs.length; j++) {\n            if (network.operators[i].inputs[j] > index) {\n                network.operators[i].inputs[j] -= 1\n            }\n        }\n        for (let j = 0; j < network.operators[i].outputs.length; j++) {\n            if (network.operators[i].outputs[j] > index) {\n                network.operators[i].outputs[j] -= 1\n            }\n        }\n    }\n\n    // delete relevant tensor\n    return network.tensors.splice(index, 1)\n}","import {Network} from \"./define_network_objects\"\nimport {Tensor} from \"./define_network_objects\"\nimport {Operator} from \"./define_network_objects\"\n\nimport { placeTensor } from \"./mouse_network_interaction\"\nimport {nudgeTensor} from \"./mouse_network_interaction\"\nimport {getHoveredTensorIndices} from \"./mouse_network_interaction\"\nimport {getHoveredOperatorIndices} from \"./mouse_network_interaction\"\n\nimport {unmergeTensor} from \"./network_logic\"\nimport {mergeTensors} from \"./network_logic\"\n\nvar canvas = 0\nvar ctx = 0\n\n\nvar width = 0;\nvar height = 0;\n\nconst tensorRadius = 10\nconst scalarTensorRadius = 5\nconst defaultFunctionLength = 50\n\nvar down = false\nvar draggedIndex = -1\nvar dragged_operator_index = -1\n\n\nvar last_mouseX = 0;\nvar last_mouseY = 0;\nvar mouseX = 0;\nvar mouseY = 0;\nvar tmX = 0;\nvar tmY = 0;\n\nvar last_frame = Date.now()\nvar this_frame = Date.now()\n\nvar networks = []\nvar networkIndex = 0\n\nvar selecting = false\n\nvar grid = true\n\n\n\n\nCanvasRenderingContext2D.prototype.roundRect = function (x, y, w, h, r) {\n    if (w < 0){\n        w = -w\n        x -= w\n    }\n    if (h < 0){\n        h = -h\n        y -= h\n    }\n\n\n    if (w < 2 * r) r = w / 2;\n    if (h < 2 * r) r = h / 2;\n    this.beginPath();\n    this.moveTo(x+r, y);\n    this.arcTo(x+w, y,   x+w, y+h, r);\n    this.arcTo(x+w, y+h, x,   y+h, r);\n    this.arcTo(x,   y+h, x,   y,   r);\n    this.arcTo(x,   y,   x+w, y,   r);\n    this.closePath();\n    return this;\n}\n\n\nnetworks.push(new Network())\n\n\n\nexport function get_list_of_operators(){\n    return networks[networkIndex].operators\n}\n\n\n\n\n\n\n\n\n\n\n\nexport function clear_network(){\n    networks[networkIndex] = new Network()\n}\n\nexport function new_operator(type, x = tensorRadius*2 * 2, y = tensorRadius*2 * 3){\n    clear_selected()\n    var unary = false\n    var side_binary = false\n    var top_binary = false;\n\n    switch(type){\n        case 0:\n            break\n        case 1:\n            break\n        case 2: //add\n            side_binary = true;\n            break\n        case 4://subtract\n            side_binary = true;\n            break;\n        case 4://scalse\n            top_binary = true;\n            break;\n        case 5://full\n            top_binary = true;\n            break;\n        case 6://amass\n            unary = true;\n            break;\n        case 7://softmax\n            unary = true;\n            break;\n        case 8://hardmax\n            unary = true;\n            break;\n        case 9://max\n            unary = true;\n            break;\n        case 10://convolution\n            top_binary = true;\n            break;\n        case 11://squared_dist\n            side_binary = true\n            break;\n        case 12://ReLU\n            unary = true\n            break;\n        default:\n            break;\n    }\n\n\n    let new_op = new Operator()\n    new_op.func = type\n\n    var t_index = networks[networkIndex].tensors.length\n    if(unary){\n\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 0].x = x + tensorRadius*2 * 0\n        networks[networkIndex].tensors[t_index + 0].y = y + tensorRadius*2 * 0\n\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 1].x = x + tensorRadius*2 * 3\n        networks[networkIndex].tensors[t_index + 1].y = y + tensorRadius*2 * 0\n\n        new_op.inputs  = [t_index + 0]\n        new_op.outputs = [t_index + 1]\n    }\n    if(top_binary){\n        \n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 0].x = x + tensorRadius*2 * 0\n        networks[networkIndex].tensors[t_index + 0].y = y + tensorRadius*2 * 2\n\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 1].x = x + tensorRadius*2 * 2\n        networks[networkIndex].tensors[t_index + 1].y = y + tensorRadius*2 * 0\n\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 2].x = x + tensorRadius*2 * 4\n        networks[networkIndex].tensors[t_index + 2].y = y + tensorRadius*2 * 2\n\n        new_op.inputs  = [t_index + 0, t_index + 1]\n        new_op.outputs = [t_index + 2]\n    }\n\n    if(side_binary){\n\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 0].x = x + tensorRadius*2 * 0\n        networks[networkIndex].tensors[t_index + 0].y = y + tensorRadius*2 * 2\n\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 1].x = x + tensorRadius*2 * 0\n        networks[networkIndex].tensors[t_index + 1].y = y + tensorRadius*2 * 0\n\n        networks[networkIndex].add_tensor(new Tensor(false))\n        networks[networkIndex].tensors[t_index + 2].x = x + tensorRadius*2 * 3\n        networks[networkIndex].tensors[t_index + 2].y = y + tensorRadius*2 * 1\n\n        new_op.inputs  = [t_index + 0, t_index + 1]\n        new_op.outputs = [t_index + 2]\n    }\n\n    networks[networkIndex].add_operator(new_op)\n}\n\n\nclass Button{\n    constructor(x, y, w, h, bool=false){\n        this.x = x\n        this.y = y\n        this.w = w\n        this.h = h\n        this.bool = bool;\n    }\n    press(x, y){\n        if(this.x <= x && this.x + this.w >= x\n        && this.y <= y && this.y + this.h >= y){\n            this.bool = !this.bool\n        }\n    }\n}\n\n\n\n\n\nvar Buttons = []\nvar b = new Button(tensorRadius*1, tensorRadius*1, tensorRadius*2, tensorRadius*2, true);\nButtons.push(b)\nvar grid_icon = new Image()\ngrid_icon.src = \"grid_icon.png\"\n\n\n\n\n\nexport function edit_tensor(tensor_index, new_shape){\n    var t = networks[networkIndex].tensors[tensor_index]\n    t.form = new_shape\n    t.calc_size()\n    console.log(\"whyy\" + String(t.size))\n    t.live = true\n    for(let i = 0; i < t.input_to.length; i++){\n        propogate_shape(t.input_to[i], tensor_index, true)\n    }\n    if(t.output_of != null){\n        propogate_shape(t.output_of, tensor_index, false)\n    }\n}\n\n// forward is bool\n//TODO: for DAG i gotta worry about infinite loops\n//This code assumes that convolution is only 2D\nfunction propogate_shape(operator_index,tensor_index, forward){\n\n    if(operator_index == null){\n        return;\n    }\n\n    var intra_operator_index = 0;\n    var op = networks[networkIndex].operators[operator_index]\n    var t = networks[networkIndex].tensors[tensor_index]\n\n    if(forward){\n        for(let i = 0; i < op.inputs.length; i++){\n            if(op.inputs[i] == tensor_index){\n                intra_operator_index = i\n            }\n        }\n    }else{\n        for(let i = 0; i < op.outputs.length; i++){\n            if(op.outputs[i] == tensor_index){\n                intra_operator_index = i\n            }\n        }\n    }\n\n    var input0 = networks[networkIndex].tensors[op.inputs[0]]\n    var output = networks[networkIndex].tensors[op.outputs[0]]\n    var input1\n    if(op.inputs.length > 1)\n        input1 = networks[networkIndex].tensors[op.inputs[1]]\n    \n\n    switch(op.func){\n        case 5://Fully Connected\n            if(forward){\n                if(intra_operator_index == 0){\n                    if(output.live){\n                        input1.form = [input0.size, output.size]\n                        input1.live = true\n                        input1.calc_size()\n                        propogate_shape(input1.output_of, op.inputs[1], false)\n                    }else if(input1.live){\n                        output.form = [input1.form[1]]\n                        output.live = true\n                        output.calc_size()\n                        for(let i = 0; i < output.input_to; i++){\n                            propogate_shape(output.input_to[i], op.outputs[0], true)\n                        }\n                    }\n                }else{\n                    input0.form = [input1.form[0]]\n                    input0.live = true\n                    input0.calc_size()\n                    propogate_shape(input0.output_of, op.inputs[0], false)\n\n                    output.form = [input1.form[1]]\n                    output.live = true\n                    output.calc_size()\n                    for(let i = 0; i < output.input_to; i++){\n                        propogate_shape(output.input_to[i], op.outputs[0], true)\n                    }\n                }\n            }else{\n                if(input0.live){\n                    input1.form = [input0.size, output.size]\n                    input1.live = true\n                    input1.calc_size()\n                    propogate_shape(input1.output_of, op.inputs[1], false)\n                }\n            }\n            break;\n        case 7://Softmax\n            if(forward){\n                output.form = input0.form\n                output.live = true\n                output.calc_size()\n                for(let i = 0; i < output.input_to; i++){\n                    propogate_shape(output.input_to[i], op.outputs[0], true)\n                }\n            }else{\n                input0.form = output.form\n                input0.live = true\n                input0.calc_size()\n                propogate_shape(input0.output_of, op.inputs[0], false)\n            }\n            break;\n        case 10://Convolution\n            if(forward){\n                if(intra_operator_index == 0){\n                    if(output.live){\n                        input1.form = [input0.form[0] - output.form[0] + 1, input0.form[1] - output.form[1] + 1, output.form[2]]\n                        input1.live = true\n                        input1.calc_size()\n                        propogate_shape(input1.output_of, op.inputs[1], false)\n                    }else if(input1.live){\n                        output.form = [input0.form[0] - input1.form[0] + 1, input0.form[1] - input1.form[1] + 1, input1.form[2]]\n                        output.live = true\n                        output.calc_size()\n                        for(let i = 0; i < output.input_to; i++){\n                            propogate_shape(output.input_to[i], op.outputs[0], true)\n                        }\n                    }\n                }else{\n                    if(output.live){\n                        input0.form = [input1.form[0] + output.form[0] - 1, input1.form[1] + output.form[1] - 1]\n                        input0.live = true\n                        input0.calc_size()\n                        propogate_shape(input1.output_of, op.inputs[1], false)\n                    }else if(input0.live){\n                        output.form = [input0.form[0] - input1.form[0] + 1, input0.form[1] - input1.form[1] + 1, input1.form[2]]\n                        output.live = true\n                        output.calc_size()\n                        for(let i = 0; i < output.input_to; i++){\n                            propogate_shape(output.input_to[i], op.outputs[0], true)\n                        }\n                    }\n                }\n            }else{\n                if(input0.live){\n                    input1.form = [input0.form[0] - output.form[0] + 1, input0.form[1] - output.form[1] + 1, output.form[2]]\n                    input1.live = true\n                    input1.calc_size()\n                    propogate_shape(input1.output_of, op.inputs[1], false)\n                }else if(input1.live){\n                    input0.form = [input1.form[0] + output.form[0] - 1, input1.form[1] + output.form[1] - 1]\n                    input0.live = true\n                    input0.calc_size()\n                    propogate_shape(input1.output_of, op.inputs[1], false)\n                }\n            }\n            break;\n        case 12://ReLU\n            if(forward){\n                output.form = input0.form\n                output.live = true\n                output.calc_size()\n                for(let i = 0; i < output.input_to; i++){\n                    propogate_shape(output.input_to[i], op.outputs[0], true)\n                }\n            }else{\n                input0.form = output.form\n                input0.live = true\n                input0.calc_size()\n                propogate_shape(input0.output_of, op.inputs[0], false)\n            }\n            break;\n        default:\n            break;\n    }\n\n    \n}\n\n\n\n\n\n\nexport function init() {\n\n    canvas = document.getElementById(\"gui_canvas\")\n    canvas.addEventListener(\"mousedown\", doMouseDown, false)\n    canvas.addEventListener(\"mousemove\", doMouseMove, false)\n    canvas.addEventListener(\"mouseup\", doMouseUp, false)\n    canvas.addEventListener(\"dblclick\", doDoubleClick, false)\n    ctx = canvas.getContext(\"2d\");\n\n    canvas.width = canvas.getBoundingClientRect().width\n    canvas.height = canvas.getBoundingClientRect().height\n\n    width = canvas.width;\n    height = canvas.height;\n\n    last_frame = Date.now()\n    this_frame = Date.now()\n\n    \n    window.requestAnimationFrame(draw);\n}\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n\nvar seconds = 0;\n\nfunction drawTensor(network, tensorIndex) {\n    let t = network.tensors[tensorIndex]\n\n    if (t.live) {\n        ctx.fillStyle = \"white\"\n        ctx.lineWidth = 1\n        ctx.setLineDash([])\n        ctx.strokeStyle = 'black'\n    }\n    else {\n        ctx.fillStyle = \"rgba(255,255,255,0)\"\n        ctx.lineWidth = 1\n        ctx.setLineDash([3,4])\n        ctx.strokeStyle = 'Grey'\n    }\n\n    ctx.beginPath()\n    if (t.scalar) {\n        ctx.rect(t.x - scalarTensorRadius, t.y - scalarTensorRadius, 2 * scalarTensorRadius, 2 * scalarTensorRadius)\n    }\n    else {\n        ctx.rect(t.x - tensorRadius, t.y - tensorRadius, 2 * tensorRadius, 2 * tensorRadius)\n    }\n    ctx.fill()\n    ctx.stroke()\n\n    if(t.selected){\n        ctx.fillStyle = \"rgba(255,255,255,0)\"\n        ctx.lineWidth = 1\n        ctx.strokeStyle = '#5dd2f0'\n        ctx.setLineDash([])\n        ctx.beginPath()\n        ctx.roundRect(t.x - tensorRadius*1.5, t.y - tensorRadius*1.5, 3 * tensorRadius, 3 * tensorRadius, tensorRadius * 0.2)\n        ctx.stroke()\n    }\n}\n\n// here we draw the function naively without checking for tensor positions. That must be handled \n// by movement logic\nfunction drawOperator(network, operatorIndex) {\n    let o = network.operators[operatorIndex]\n    let input\n    let input1\n    let input2\n    let output\n\n    let functionGradient = ctx.createLinearGradient(0, 0, width, height)\n    if(o.highlighted){\n        functionGradient.addColorStop(0, \"#f2c8a6\")\n        functionGradient.addColorStop(1, \"#a6d0f2\")\n    }else{\n        functionGradient.addColorStop(0, \"#DE7521\")\n        functionGradient.addColorStop(1, \"#218ADE\")\n    }\n\n    ctx.fillStyle = functionGradient\n\n    var tapes = 3\n\n    switch (o.func) {\n        case 0: // abstraction\n            break\n        case 1: // identity\n            break\n        case 2: // add\n            input1 = network.tensors[o.inputs[0]]\n            input2 = network.tensors[o.inputs[1]]\n            output = network.tensors[o.outputs[0]]\n\n            ctx.beginPath()\n            ctx.moveTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y + tensorRadius)\n\n            ctx.lineTo(input1.x + tensorRadius, input1.y + tensorRadius)\n            ctx.lineTo(input1.x + tensorRadius, input1.y - tensorRadius)\n            ctx.closePath()\n            ctx.fill()\n\n            ctx.beginPath()\n            ctx.moveTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y + tensorRadius)\n\n            ctx.lineTo(input2.x + tensorRadius, input2.y + tensorRadius)\n            ctx.lineTo(input2.x + tensorRadius, input2.y - tensorRadius)\n            ctx.closePath()\n            ctx.fill()\n\n\n            break\n        case 3: // subtract\n            input1 = network.tensors[o.inputs[0]]\n            input2 = network.tensors[o.inputs[1]]\n            output = network.tensors[o.outputs[0]]\n\n            break\n        case 4: // scale\n            break\n        case 5: // full\n            input1 = network.tensors[o.inputs[0]]\n            input2 = network.tensors[o.inputs[1]]\n            output = network.tensors[o.outputs[0]]\n\n            ctx.beginPath()\n            ctx.moveTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y + tensorRadius)\n\n            ctx.lineTo(input1.x + tensorRadius, input1.y + tensorRadius)\n            ctx.lineTo(input1.x + tensorRadius, input1.y - tensorRadius)\n\n            ctx.lineTo(input2.x - tensorRadius, input2.y + tensorRadius)\n            ctx.lineTo(input2.x + tensorRadius, input2.y + tensorRadius)\n           \n            ctx.closePath()\n            ctx.fill()\n            break\n        case 6: // amass\n            break\n        case 7: // softmax\n            input = network.tensors[o.inputs[0]]\n            output = network.tensors[o.outputs[0]]\n\n            ctx.beginPath()\n            ctx.moveTo(output.x - tensorRadius, output.y - tensorRadius*0.5)\n            ctx.lineTo(output.x - tensorRadius, output.y + tensorRadius*0.5)\n\n            ctx.lineTo(input.x + tensorRadius, input.y + tensorRadius)\n            ctx.lineTo(input.x + tensorRadius, input.y - tensorRadius)\n        \n            ctx.closePath()\n            ctx.fill()\n\n            break\n        case 8: // hardmax\n            break\n        case 9: // max\n            break\n        case 10: // convolution\n            input1 = network.tensors[o.inputs[0]]\n            input2 = network.tensors[o.inputs[1]]\n            output = network.tensors[o.outputs[0]]\n\n            ctx.beginPath()\n            ctx.moveTo(input1.x + tensorRadius, input1.y - tensorRadius + (tensorRadius * 2 / (tapes*2 - 1)))\n            ctx.lineTo(input1.x + tensorRadius, input1.y - tensorRadius)\n            \n            ctx.lineTo(input2.x - tensorRadius, input2.y + tensorRadius)\n            ctx.lineTo(input2.x + tensorRadius, input2.y + tensorRadius)\n\n            ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius + (tensorRadius * 2 / (tapes*2 - 1)))\n            \n            //not quite sure how this works but it does\n            for(let i = 1; i < tapes*2 - 1; i += 2){\n                ctx.lineTo(input1.x + tensorRadius, input1.y - tensorRadius + (tensorRadius * 2 / (tapes*2 - 1))*i )\n                ctx.lineTo(input1.x + tensorRadius, input1.y - tensorRadius + (tensorRadius * 2 / (tapes*2 - 1))*(i+1) ) \n\n                ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius + (tensorRadius * 2 / (tapes*2 - 1))*(i+1) )\n                ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius + (tensorRadius * 2 / (tapes*2 - 1))*(i+2) )\n            }\n\n            ctx.lineTo(input1.x + tensorRadius, input1.y + tensorRadius)\n           \n            ctx.closePath()\n            ctx.fill()\n            break\n        case 11: // squared dist\n            break\n        case 12: // PReLU\n            input = network.tensors[o.inputs[0]]\n            output = network.tensors[o.outputs[0]]\n\n            ctx.beginPath()\n            ctx.moveTo(input.x + tensorRadius, input.y + tensorRadius)\n            ctx.lineTo(input.x + tensorRadius, input.y - tensorRadius)\n\n\n            ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius + (tensorRadius * 2 / (tapes*2 - 1))) \n\n            //very ugly i hate it\n            for(let i = 1; i < tapes*2 - 1; i += 2){\n                ctx.lineTo((output.x + input.x)/2, (output.y + input.y)/2 - tensorRadius + (tensorRadius * 2 / (tapes*2 - 1))*i )\n                ctx.lineTo((output.x + input.x)/2, (output.y + input.y)/2 - tensorRadius + (tensorRadius * 2 / (tapes*2 - 1))*(i+1) ) \n\n                ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius + (tensorRadius * 2 / (tapes*2 - 1))*(i+1) )\n                ctx.lineTo(output.x - tensorRadius, output.y - tensorRadius + (tensorRadius * 2 / (tapes*2 - 1))*(i+2) )\n            }\n\n        \n            ctx.closePath()\n            ctx.fill()\n            break\n        default:\n            console.log(\"Invalid operator types\")\n            break\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar seconds = 0;\n\nfunction draw() {\n    canvas.width = canvas.getBoundingClientRect().width\n    canvas.height = canvas.getBoundingClientRect().height\n    width = canvas.width\n    height = canvas.height\n\n    last_frame = this_frame\n    this_frame = Date.now()\n    var sec = (this_frame - last_frame) / 1000.0\n    seconds += sec;\n\n    /*\n    ctx.fillStyle = \"#2e3037\"\n    ctx.fillRect(0, 0, width, height)\n    */\n\n\n    var delta_x = mouseX - last_mouseX;\n    var delta_y = mouseY - last_mouseY;\n    last_mouseX = mouseX;\n    last_mouseY = mouseY;\n\n    if(grid){\n        ctx.beginPath()\n\n        for(let i = -tensorRadius; i < width; i+= tensorRadius*2){\n            ctx.moveTo(i, 0)\n            ctx.lineTo(i, height)\n        }\n        for(let i = -tensorRadius; i < height; i+= tensorRadius*2){\n            ctx.moveTo(0, i)\n            ctx.lineTo(width, i)\n        }\n        ctx.lineWidth = 0.5\n        ctx.setLineDash([1,4])\n        ctx.strokeStyle = 'Grey'\n\n        ctx.closePath()\n        ctx.stroke();\n    }\n    \n\n    for (let i = 0; i < networks[0].operators.length; i++) {\n        drawOperator(networks[0], i)\n    }\n\n    for (let i = 0; i < networks[0].tensors.length; i++) {\n        drawTensor(networks[0], i)\n        if(networks[networkIndex].tensors[i].selected && !selecting && down){\n            placeTensor(networks[networkIndex],i,\n                networks[networkIndex].tensors[i].tx + mouseX - tmX,\n                networks[networkIndex].tensors[i].ty + mouseY - tmY, grid)\n        }\n    }\n\n\n    \n\n\n    if(selecting){\n        ctx.fillStyle = \"rgba(255,255,255,0)\"\n        ctx.lineWidth = 1\n        ctx.strokeStyle = '#5dd2f0'\n        ctx.setLineDash([3,2])\n        ctx.beginPath()\n        \n        ctx.roundRect(tmX,tmY,mouseX-tmX,mouseY-tmY, tensorRadius * 0.2)\n            \n        ctx.stroke()\n    }\n\n\n\n    \n    grid = Buttons[0].bool\n    try{\n        ctx.drawImage(grid_icon, Buttons[0].x, Buttons[0].y, Buttons[0].w, Buttons[0].h)\n    }catch(e){\n        ctx.fillStyle = \"black\"\n        ctx.fillRect(Buttons[0].x, Buttons[0].y, Buttons[0].w, Buttons[0].h)\n    }\n    \n    \n\n\n\n\n    window.requestAnimationFrame(draw);\n}\n\n\n\n\n\n\n\nfunction clear_selected(){\n    for(let i = 0; i < networks[networkIndex].tensors.length; i++){\n        networks[networkIndex].tensors[i].selected = false;\n    }\n}\n\n//ineligant solution\nexport function highlighted_operators(){\n    return getHoveredOperatorIndices(networks[networkIndex], mouseX, mouseY)\n}\n\nexport function highlight_operators(op_list){\n    for(let i = 0; i < networks[networkIndex].operators.length; i++){\n        networks[networkIndex].operators[i].highlighted = false\n    }\n    for(let i = 0; i < op_list.length; i++){\n        networks[networkIndex].operators[op_list[i]].highlighted = true\n    }\n}\n\n\n\nfunction doDoubleClick(e) {\n\n    let clickedList = getHoveredTensorIndices(networks[networkIndex], mouseX, mouseY)\n\n    for (let i = 0; i < clickedList.length; i++) {\n        var clickedIndex = clickedList[i]\n        var t0 = networks[networkIndex].tensors[clickedIndex]\n        if (t0.output_of == null || t0.input_to.length == 0) {\n            t0.live = !t0.live\n            //TODO remove reshaping\n            \n            edit_tensor(clickedIndex, [10])\n\n        }\n        else {\n            console.log(\"Unmerge\")\n            unmergeTensor(networks[networkIndex], clickedIndex)\n        }\n    }\n}\n\n\nfunction doMouseUp(e) {\n    \n    selecting = false;\n\n    \n    for(let i = 0; i < networks[networkIndex].tensors.length; i++){\n        for(let j = 0; j < networks[networkIndex].tensors.length; j++){\n                \n\n            if(j == i){\n                continue\n            }\n            var t1 = networks[networkIndex].tensors[i];\n            var t2 = networks[networkIndex].tensors[j];\n\n            if(Math.abs(t1.x - t2.x) < tensorRadius * 2 && Math.abs(t1.y - t2.y) < tensorRadius * 2){\n                mergeTensors(networks[networkIndex], i, j);\n            }\n        }\n    }\n    \n    \n    down = false\n    draggedIndex = -1\n    dragged_operator_index = -1\n\n    let clickedList = getHoveredTensorIndices(networks[networkIndex], mouseX, mouseY)\n\n    if (clickedList.length >= 2) {\n        mergeTensors(networks[networkIndex], clickedList[0], clickedList[1])\n        // if either tensor are ghosts\n    }\n}\n\nfunction doMouseDown(e) {\n    down = true\n    for(let i = 0; i < networks[networkIndex].tensors.length; i++){\n        networks[networkIndex].tensors[i].tx = networks[networkIndex].tensors[i].x\n        networks[networkIndex].tensors[i].ty = networks[networkIndex].tensors[i].y\n    }\n    tmX = mouseX;\n    tmY = mouseY;\n\n\n    // console.log(\"Mouse position: \",mouseX,\" \", mouseY)\n    let draggedList = getHoveredTensorIndices(networks[networkIndex], mouseX, mouseY)\n\n    if (draggedList.length != 0) {\n        draggedIndex = draggedList[0]\n        if(!networks[networkIndex].tensors[draggedIndex].selected){\n            clear_selected()\n        }\n        networks[networkIndex].tensors[draggedIndex].selected = true\n        console.log(networks[networkIndex].tensors[draggedIndex].form)\n    }\n\n    let dragged_operators = getHoveredOperatorIndices(networks[networkIndex], mouseX, mouseY)\n\n    if (dragged_operators.length != 0 && draggedList.length == 0){\n        dragged_operator_index = dragged_operators[0]\n        var op = networks[networkIndex].operators[dragged_operator_index]\n        for(let i = 0; i < op.inputs.length; i++){\n            networks[networkIndex].tensors[op.inputs[i]].selected = true\n        }\n        for(let i = 0; i < op.outputs.length; i++){\n            networks[networkIndex].tensors[op.outputs[i]].selected = true\n        }\n\n\n        \n    }\n\n    if(draggedList.length == 0 && dragged_operators.length == 0){\n        selecting = true\n        clear_selected()\n    }\n\n\n\n    for(let i = 0; i < Buttons.length; i++){\n        Buttons[i].press(mouseX, mouseY)\n    }\n}\n\n\nfunction doMouseMove(e) {\n    if (e.offsetX) {\n        mouseX = e.offsetX;\n        mouseY = e.offsetY;\n    }\n    else if (e.layerX) {\n        mouseX = e.layerX;\n        mouseY = e.layerY;\n    }\n\n    if(selecting){\n        for(let i = 0; i < networks[networkIndex].tensors.length; i++){\n            var t = networks[networkIndex].tensors[i]\n\n            if(Math.abs(t.x - (tmX + mouseX)/2) < Math.abs(tmX - (tmX + mouseX)/2)\n            && Math.abs(t.y - (tmY + mouseY)/2) < Math.abs(tmY - (tmY + mouseY)/2)){\n                t.selected = true\n            }else{\n                t.selected = false\n            }\n        }\n    }\n\n}","<script>\n\timport Modal,{getModal} from './Modal.svelte'\n    import { onMount } from \"svelte\";\n\timport * as objects from \"./define_network_objects\"\n    import * as gui_logic from \"./gui_logic\"\n\timport { time_ranges_to_array } from 'svelte/internal';\n\n    onMount(() => {\n        gui_logic.init()\n\t\tvar canvas = document.getElementById(\"gui_canvas\")\n\t\tcanvas.addEventListener(\"mousemove\", doMouseMove, false)\n    })\n\n\t//list of operators\n\tvar toolbarItems = [];\n\n\tfunction doMouseMove(e) {\n\t\t\n\n\t\tvar ops = gui_logic.highlighted_operators()\n\n\t\tfor(let i = 0; i < toolbarItems.length;i++){\n\t\t\ttoolbarItems[i].hovered=\"false\"\n\t\t}\n\t\tfor(let i = 0; i < ops.length;i++){\n\t\t\ttoolbarItems[ops[i]].hovered=\"true\"\n\t\t}\n\n\t}\n\n\t// Wrapper for yes clear function\n\tfunction yes_clear() {\n\t\tgetModal('clear').close(1)\n      \tgui_logic.clear_network()\n    }\n\n\t\n\tfunction update_operator_list() {\n\t\tvar op_names = gui_logic.get_list_of_operators().map((e) => (objects.function_table[e.func].name));\n\t\tvar op_names_with_numbers = []\n\t\tif(op_names.length == 0){\n\t\t\treturn\n\t\t}\n\t\top_names_with_numbers.push(op_names[0])\n\t\tfor(let i = 1; i < op_names.length; i++){\n\t\t\tvar count = 0;\n\t\t\tfor(let j = 0; j < i; j++){\n\t\t\t\tif(op_names[i] == op_names[j]){\n\t\t\t\t\tcount ++\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar new_name = op_names[i]\n\t\t\tif(count > 0){\n\t\t\t\tnew_name += \" \"+String(count + 1)\n\t\t\t}\n\t\t\top_names_with_numbers.push(new_name)\n\t\t}\n\n\t\tfor(let i = 0; i < op_names_with_numbers.length; i++){\n\t\t\ttoolbarItems[i] = {operator_type: op_names[i], operator_name: op_names_with_numbers[i], id:i ,highlighted:'T'}\n\t\t}\n\t\t\n\t}\n\n\t// Add operator functions\n\tfunction add_dense() {\n      \tgui_logic.new_operator(5)\n\t\tgetModal('add_operator').close(1)\n\t\tupdate_operator_list()\n\t\t\n    }\n\tfunction add_conv() {\n      \tgui_logic.new_operator(10)\n\t\tgetModal('add_operator').close(1)\n\t\tupdate_operator_list()\n    }\n\tfunction add_prelu() {\n      \tgui_logic.new_operator(12)\n\t\tgetModal('add_operator').close(1)\n\t\tupdate_operator_list()\n    }\n\tfunction add_softmax() {\n      \tgui_logic.new_operator(7)\n\t\tgetModal('add_operator').close(1)\n\t\tupdate_operator_list()\n    }\n\n\t// Constants\n    let bar_logo = './transparent_bar_logo.png'; // Neurula logo for nav bar\n    let home_link = 'http://127.0.0.1:8000'; // Main domain \n\tlet github_logo = 'https://cdn-icons-png.flaticon.com/512/25/25231.png';\n\tlet forms_logo = 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/c2/Google_Forms_logo_%282014-2020%29.svg/640px-Google_Forms_logo_%282014-2020%29.svg.png'; // google forms icon\n\tlet github_link = 'https://github.com/genicos/nn_gui'; // Link to github repo for project\n\tlet feedback_link = 'https://docs.google.com/forms/d/e/1FAIpQLSdMQYYT9P0cp507dm4xyCr9cvJJ9RUwAcFF21pWBhWLWyqPng/viewform?usp=sf_link'; // Link to google form for feedback\n\tlet fully_connected_icon = './Fully_Connected.png'; // Icon for toolbar_list\n\tlet convolution_icon = './Convolution.png'; // Icon for toolbar_list\n\tlet prelu_icon = './PReLU.png'; // Icon for toolbar_list\n\tlet softmax_icon = './Softmax.png'; // Icon for toolbar_list\n\n\t// Variables\n\tlet clear_selection; // Value for Modal choice for clearing\n\tlet generate_selection; // Value for Modal choice for which code to generate network in\n\n\t// Add operator variables\n\tlet input;\n\tlet output;\n\tlet parameter_shape; // As tuple\n\n\tlet items = [\n    { id: 1, name: \"Dense\"},\n    { id: 2, name: \"Convolutional\"},\n    { id: 3, name: \"PReLU\"},\n\t{ id: 4, name: \"Softmax\"}\n  \t];\n\n  \tlet operator_type = \"\";\n\n\tconst addItem = () => {\n    items = [\n      ...items,\n      {\n        id: Math.random(),\n        operator_type,\n      }\n    ];\n    operator_type = \"\";\n  \t};\n\n\t// Function for nav bar Modal options\n\tfunction setClear(res){\n\t\tclear_selection=res\n\t}\n\n\tfunction setGenerate(res){\n\t\tgenerate_selection=res\n\n\t\t\n\t\tvar data = \"testest\"\n\t\t\n\t\tfetch(\"../net/\"+data,\n\t\t\t{\n\t\t\tmethod: 'POST'\n\t\t\t}\n\t\t\t).then(x => {\n\t\t\tconsole.log(\"Request complete! response:\", x);\n\t\t});\n\n\t}\n  \n</script>\n  \n<main>\n\t<!-- Navigation Bar (At top of page) -->\n\t<nav>\n\t\t<div class=\"left\">\n\t\t\t<ul class=\"navbar-list\">\n\t\t\t\t<li><a href={home_link}><img src={bar_logo} alt=\"Neurula logo.\" style=\"max-height: 60px\" ></a></li>\n\t\t\t</ul>\n\t\t</div>\n\t\t<div class=\"right\">\n\t\t\t<ul class=\"navbar-list\">\n\t\t\t\t<li><a href={undefined} class=\"nav-button\" on:click={()=>getModal('clear').open(setClear)}>Clear Canvas</a></li>\n\t\t\t\t<li><a href={undefined} class=\"nav-button\" on:click={()=>getModal('generate').open(setGenerate)}>Generate Code</a></li>\n\t\t\t\t<li><a href={undefined} class=\"nav-button\" on:click={()=>getModal('tutorial').open()}>?</a></li>\n\t\t\t</ul>\n\t\t</div>\n\t</nav>\n\n\t<!-- Neural Network Workspace -->\n\t<div id=\"workspace\">\n\t\t<!-- Workspace Toolbar -->\n\t\t<div id=\"toolbar\">\n\t\t\t<!-- Left-aligned side of nav bar -->\n\t\t\t<div id=\"toolbar_title\">\n\t\t\t\t<a href={undefined} class=\"nav-button\" on:click={()=>getModal('add_operator').open()}>+ add operator</a>\n\t\t\t</div>\n\t\t\t<!-- Right-aligned side of nav bar -->\n\t\t\t<div id=\"toolbar_list\">\n\t\t\t\t<div id=\"toolbar_add_operator\">\n\t\t\t\t\t<!-- <strong>Current Operators: </strong> -->\n\t\t\t\t</div>\n\t\t\t\t<!-- Displays list of placeholder navItems as set in <script> -->\n\t\t\t\t{#each toolbarItems as item}\n\t\t\t\t\t<!-- Dense Operator -->\n\t\t\t\t\t{#if item.operator_type === \"Fully Connected\"}\n\t\t\t\t\t\t<li id={\"list_item\"+item.id} class=\"{item.hovered === \"true\" ? 'hovered' : ''}\" on:click={()=>getModal('edit_fully_connected').open()} on:focus={()=>{}} on:mouseleave={() => {gui_logic.highlight_operators([])}} on:mouseover={() => {gui_logic.highlight_operators([item.id])}}>\n\t\t\t\t\t\t\t<p><img src={fully_connected_icon} alt=\"Fully Connected List icon.\" style=\"max-height: 20px; margin-right: 10px\">{item.operator_name}</p>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t<!-- Convolution Operator -->\n\t\t\t\t\t{:else if item.operator_type === \"Convolution\"}\n\t\t\t\t\t\t<li id={\"list_item\"+item.id} class=\"{item.hovered === \"true\" ? 'hovered' : ''}\" on:click={()=>getModal('edit_convolution').open()} on:focus={()=>{}} on:mouseleave={() => {gui_logic.highlight_operators([])}} on:mouseover={() => {gui_logic.highlight_operators([item.id])}}>\n\t\t\t\t\t\t\t<p><img src={convolution_icon} alt=\"Convolution List icon.\" style=\"max-height: 20px; margin-right: 10px\">{item.operator_name}</p>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t<!-- PReLU Operator -->\n\t\t\t\t\t{:else if item.operator_type === \"PReLU\"}\n\t\t\t\t\t\t<li id={\"list_item\"+item.id} class=\"{item.hovered === \"true\" ? 'hovered' : ''}\" on:click={()=>getModal('edit_prelu').open()} on:focus={()=>{}} on:mouseleave={() => {gui_logic.highlight_operators([])}} on:mouseover={() => {gui_logic.highlight_operators([item.id])}}>\n\t\t\t\t\t\t\t<p><img src={prelu_icon} alt=\"PReLU List icon.\" style=\"max-height: 20px; margin-right: 10px\">{item.operator_name}</p>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t<!-- Softmax Operator -->\n\t\t\t\t\t{:else if item.operator_type === \"Softmax\"}\n\t\t\t\t\t\t<li id={\"list_item\"+item.id} class=\"{item.hovered === \"true\" ? 'hovered' : ''}\" on:click={()=>getModal('edit_softmax').open()}  on:focus={()=>{}} on:mouseleave={() => {gui_logic.highlight_operators([])}} on:mouseover={() => {gui_logic.highlight_operators([item.id])}}>\n\t\t\t\t\t\t\t<p><img src={softmax_icon} alt=\"Softmax List icon.\" style=\"max-height: 20px; margin-right: 10px\">{item.operator_name}</p>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t{/if}\n\t\t\t\t{/each}\n\t\t\t</div>\n\t\t</div>\n\n\t\t<!-- Workspace Canvas (For drawing the neural network) -->\n        <div id=\"canvas_container\">\n            <canvas id=\"gui_canvas\"></canvas>\n        </div>\n    </div>\n\n\t<!-- Footer (at bottom of page) -->\n\t<div class=\"footer\">\n\t\t<a href={undefined} class=\"footer-button\" on:click={()=>getModal('about').open()}>About</a>\n\t\t<a href={github_link}><img id=\"git\" src={github_logo} alt=\"Github logo.\" style=\"max-height: 20px\">Github</a>\n\t\t<a href={feedback_link}><img id=\"git\" src={forms_logo} alt=\"Google Forms logo.\" style=\"max-height: 20px\">Feedback</a>\n\t</div>\n\n\t<!-- Modal Popups for Navigation Bar-->\n\t<Modal id=\"clear\">\n\t\tAre you sure?\n\t\t<!-- Passing a value back to the callback function; Choice is saved in 'clear_selection' -->\n\t\t<button class=\"option\" on:click={yes_clear}>\n\t\t\tYes\n\t\t</button>\n\t\t<button class=\"option\" on:click={()=>getModal('clear').close(0)}>\n\t\t\tNo\n\t\t</button>\n\t</Modal>\n\n\t<Modal id=\"generate\">\n\t\tHow would you like to download your neural network? <br><br>\n\t\t<!-- Passing a value back to the callback function; Choice is saved in 'generate_selection' -->\n\t\t<button class=\"option\" on:click={()=>getModal('generate').close(1)}>\n\t\t\tPytorch\n\t\t</button>\n\t\t<button class=\"option\" on:click={()=>getModal('generate').close(2)}>\n\t\t\tTensorflow\n\t\t</button>\n\t</Modal>\n\n\t<Modal id=\"tutorial\">\n\t\t<h1>Tutorial</h1>\n\t</Modal>\n\n\t<Modal id=\"about\">\n\t\t<h1>About Neurula</h1>\n\t\t<p>Machine learning can appear obscure and complicated, posing a barrier to people who are unfamiliar but interested.<br>\n\t\t\tHowever, designing working neural networks doesn’t have to be difficult.<br><br>\n\t\t\tThat's why we created Neurula: a website in which you can drag and drop blocks allowing you to design\n\t\t\tneural networks in an intuitive fashion. Once you design a network, you can download auto-generated code that implements\n\t\t\tthat network in tensorflow or pytorch. <br><br>\n\t\t\t<i>Made for UCSC's CSE 115A Spring 2022</i><br>\n\t\t\t<i>Developers: Nicolas Ayala, Anish Pahilajani, Kat Negrete, Mahesh Vegiraju, and Alexandra Hutchins</i>\n\t\t</p>\n\t</Modal>\n\n\t<Modal id=\"add_operator\">\n\t\tAdd Operator: <br><br>\n\t\t<!-- Calls function to call specific operator -->\n\t\t<button class=\"option\" on:click={add_dense}>\n            Dense\n        </button>\n        <button class=\"option\" on:click={add_conv}>\n            Convolutional\n        </button>\n        <button class=\"option\" on:click={add_prelu}>\n            PReLU\n        </button>\n        <button class=\"option\" on:click={add_softmax}>\n            Softmax\n        </button>\n\t</Modal>\n\n\t<!-- Modals for editing operators -->\n\t<Modal id=\"edit_fully_connected\">\n\t\tEdit Fully Connected Operator: <br><br>\n\t\t<form on:submit|preventDefault={addItem}>\n\t\t\t<label for=\"name\">Input:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={input} /><br>\n\t\t\t<label for=\"name\">Output:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={output} /><br>\n\t\t\t<label for=\"name\">Parameter Shape:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={parameter_shape} />\n\t\t</form>\n\t\t<button class=\"submit\" on:click={()=>getModal('edit_fully_connected').close()}>\n            Submit\n        </button>\n\t</Modal>\n\n\t<Modal id=\"edit_convolution\">\n\t\tEdit Convolution Operator: <br><br>\n\t\t<form on:submit|preventDefault={addItem}>\n\t\t\t<label for=\"name\">Input:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={input} /><br>\n\t\t\t<label for=\"name\">Output:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={output} /><br>\n\t\t\t<label for=\"name\">Kernel Shape:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={parameter_shape} />\n\t\t</form>\n\t\t<button class=\"submit\" on:click={()=>getModal('edit_convolution').close()}>\n            Submit\n        </button>\n\t</Modal>\n\n\t<Modal id=\"edit_prelu\">\n\t\tEdit PReLU Operator: <br><br>\n\t\t<form on:submit|preventDefault={addItem}>\n\t\t\t<label for=\"name\">Input:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={input} /><br>\n\t\t\t<label for=\"name\">Output:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={output} /><br>\n\t\t\t<label for=\"name\">Slope for -x:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={parameter_shape} />\n\t\t</form>\n\t\t<button class=\"submit\" on:click={()=>getModal('edit_prelu').close()}>\n            Submit\n        </button>\n\t</Modal>\n\n\t<Modal id=\"edit_softmax\">\n\t\tEdit Softmax Operator: <br><br>\n\t\t<form on:submit|preventDefault={addItem}>\n\t\t\t<label for=\"name\">Input/ Output:</label>\n\t\t\t<input id=\"name\" type=\"text\" bind:value={input} /><br>\n\t\t</form>\n\t\t<button class=\"submit\" on:click={()=>getModal('edit_softmax').close()}>\n            Submit\n        </button>\n\t</Modal>\n\n</main>\n\n<style>\n\tmain {\n\t\tmargin: 0px;\n\t}\n\t.footer {\n\t\tposition: fixed;\n\t\tleft: 0;\n\t\tbottom: 10px;\n\t\twidth: 100%;\n\t\tcolor: rgba(0, 0, 0, 0.8);\n\t\ttext-align: center;\n\t}\n\tnav {\n\t\tbackground-color: rgba(0, 0, 0, 0.8);\n\t\tfont-family: \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n\t\theight: 80px;\n\t\tmargin-top: -10px;\n\t\tmargin-left: -10px;\n\t\tmargin-right: -10px;\n\t\tpadding: 0;\n\t}  \n\t.left {\n\t\tfloat: left;\n\t\talign-items: center;\n\t\tmargin-top: -5px;\n\t\tmargin-left: 15px;\n\t\tmargin-right: 15px;\n\t}\n\t.right {\n\t\tmax-width: 980px;\n\t\tpadding-left: 20px;\n\t\tpadding-right: 20px;\n\t\tmargin: auto;\n\t\tbox-sizing: border-box;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\theight: 100%;\n\t\tfloat: right;\n\t}\n  \n\t.navbar-list {\n\t\tdisplay: none;\n\t\twidth: 100%;\n\t\tjustify-content: space-between;\n\t\tpadding: 0 40px;\n\t}\n  \n\t.navbar-list li {\n\t\tlist-style-type: none;\n\t\tmargin-left: 20px;\n\t}\n\ta.nav-button {\n\t\tdisplay: inline-block;\n\t\tpadding: 0.5em 1.25em;\n\t\tborder: 0.1em solid #FFFFFF;\n\t\tmargin: 0;\n\t\tborder-radius: 0.4em;\n\t\tbox-sizing: border-box;\n\t\ttext-decoration: none;\n\t\tfont-family: 'Roboto', sans-serif;\n\t\tfont-weight: 300;\n\t\tfont-size: 15px;\n\t\tcolor: #FFFFFF;\n\t\ttext-align: center;\n\t\ttransition: all 0.4s;\n\t}\n\ta.nav-button:hover {\n\t\tcolor: rgba(0, 0, 0, 0.8);\n\t\tbackground-color: #FFFFFF;\n\t}\n\t#workspace{\n        height: 100%;\n\t\tmargin: 100px;\n\t\tborder-radius: 0.4em;\n\t\tbox-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n    }\n    #toolbar {\n        float: left;\n        height: 500px;\n        width: 220px;\n\t\tfont-family: 'Roboto', sans-serif;\n\t\tborder-radius: 0.4em 0em 0em 0.4em;\n\t\tbackground-color: white;\n        display: flex;\n        flex-flow: column;\n    }\n\t#toolbar_title {\n\t\tbackground-color: #39c0ba;\n\t\tcolor: white;\n\t\tpadding-left: 10px;\n\t\tpadding-right: 10px;\n\t\tpadding-top: 5px;\n\t\tpadding-bottom: 5px;\n\t\tborder-radius: 0.4em 0em 0em 0em;\n\t}\n\t#toolbar_list {\n\t\toverflow-y: scroll;\n\t\tpadding-top: 10px;\n\t}\n\t#toolbar li {\n\t\tlist-style-type: none;\n\t}\n    #toolbar_add_operator{\n        flex: 1 1 auto;\n    }\n\t#toolbar li {\n\t\tpadding-left: 10px;\n\t\tpadding-bottom: 1px;\n\t\tborder-top: 0.1em solid whitesmoke;\n\t}\n\t#toolbar li:hover {\n\t\tbackground-color: whitesmoke;\n\t\ttext-decoration: underline;\n\t}\n\t#toolbar li.hovered {\n\t\tbackground-color: whitesmoke;\n\t\ttext-decoration: underline;\n\t}\n    #canvas_container{\n        overflow: hidden;\n\t\tborder-radius: 0em 0.4em 0.4em 0em;\n    }\n    #gui_canvas{\n        width: 100%;\n        height: 500px;\n    }\n\t.footer a {\n\t\tfont-family: \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n\t\tmargin-top: 10px;\n\t\tmargin-bottom: 10px;\n\t\tmargin-right: 20px;\n\t\tmargin-left: 20px;\n\t\ttext-decoration: none;\n\t\tcolor: rgba(0, 0, 0, 0.8);\n\t}\n\t.footer:hover a {\n\t\tcursor: pointer;\n\t}\n\t#git {\n\t\tmargin-right: 5px;\n\t\tmargin-bottom: -3px;\n\t}\n  \n\t@media only screen and (min-width: 767px) {\n\t\ta.nav-button{\n\t\t\tdisplay: block;\n\t\t\tmargin: 0.4em auto;\n\t\t}\n\t\t.navbar-list {\n\t\t\tdisplay: flex;\n\t\t\tpadding: 0;\n\t\t}\n\t\t.navbar-list a {\n\t\t\tdisplay: inline-flex;\n\t\t}\n\t}\n</style>","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {\n\t\tname: 'world'\n\t}\n});\n\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","src_url_equal_anchor","current_component","src_url_equal","element_src","url","document","createElement","href","get_slot_context","definition","ctx","$$scope","tar","src","k","assign","slice","null_to_empty","value","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","svg_element","createElementNS","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","prevent_default","preventDefault","call","this","attr","attribute","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_input_value","input","set_style","key","important","style","removeProperty","setProperty","toggle_class","toggle","classList","set_current_component","component","get_current_component","Error","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","seen_callbacks","Set","flushidx","flush","saved_component","length","update","$$","pop","i","callback","has","add","clear","fragment","before_update","dirty","p","after_update","outroing","onTop","transition_in","block","local","delete","transition_out","o","outros","c","d","create_component","mount_component","customElement","on_mount","on_destroy","m","new_on_destroy","map","filter","destroy_component","detaching","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","$on","type","index","indexOf","splice","$set","$$props","obj","$$set","keys","slot_ctx","div2","div1","svg","circle","line0","line1","div0","stopPropagation","slot","slot_definition","slot_changes","get_slot_context_fn","slot_context","lets","undefined","merged","len","Math","max","modals","getModal","id","topDiv","prevOnTop","closeCallback","visible","keyPress","ev","close","retVal","window","body","overflow","$$invalidate","open","$$value","Network","constructor","tensors","operators","input_tensors","param_tensors","output_tensors","truth_tensors","loss","add_tensor","t","add_operator","op","clone","inputs","input_to","outputs","output_of","update_tensors","expand","func","network","inner_net","abstraction","old_operators_length","new_id","includes","j","index_of_op","op_index","to_string","str","form","String","Tensor","live","scalar","x","y","tx","ty","selected","calc_size","size_of_tensor","size","Func","num_inputs","calc_form","out","console","log","form1","form2","form1_total","form2_total","out_form","Operator","highlighted","function_table","apply","tensorRadius","get_tensor_bounds","operator_index","tensor_index","ans","x_min","x_max","y_min","y_max","output","input_index","unary","side_binary","top_binary","inp0","inp1","highest","min","rightest","placeTensor","grid","bounds","getHoveredTensorIndices","hovered_tensors_list","getHoveredOperatorIndices","grabbedList","unmergeTensor","t0","functions","fi","op1","tnewind","todeleteind","findIndex","elem","mergeTensors","tensor_index0","tensor_index1","t1","toDeleteIndex","noDeleteIndex","tmp","ind","deleteTensor","canvas","width","height","down","draggedIndex","dragged_operator_index","mouseX","mouseY","tmX","tmY","networks","selecting","new_operator","clear_selected","new_op","t_index","CanvasRenderingContext2D","prototype","roundRect","w","h","r","beginPath","moveTo","arcTo","closePath","Buttons","bool","press","grid_icon","Image","edit_tensor","new_shape","propogate_shape","forward","intra_operator_index","input1","input0","getElementById","doMouseDown","doMouseMove","doMouseUp","doDoubleClick","getContext","getBoundingClientRect","requestAnimationFrame","draw","drawTensor","tensorIndex","fillStyle","lineWidth","setLineDash","strokeStyle","rect","stroke","drawOperator","operatorIndex","input2","functionGradient","createLinearGradient","addColorStop","lineTo","tapes","drawImage","e","fillRect","highlight_operators","op_list","clickedList","clickedIndex","t2","abs","draggedList","dragged_operators","offsetX","offsetY","layerX","layerY","t0_value","operator_name","softmax_icon","img","img_src_value","li","li_class_value","hovered","prelu_icon","convolution_icon","fully_connected_icon","operator_type","create_if_block","create_if_block_1","create_if_block_2","create_if_block_3","button0","button1","br0","br1","h1","button2","button3","label0","br2","label1","br3","label2","button","label","input_1","bar_logo","img0","img0_src_value","home_link","github_logo","img1","img1_src_value","github_link","forms_logo","img2","img2_src_value","feedback_link","main","nav","ul0","li0","a0","ul1","li1","a1","li2","a2","li3","a3","div7","div5","a4","div4","div3","div6","div8","a5","a6","a7","iterations","gui_logic.init","toolbarItems","ops","update_operator_list","op_names","objects.function_table","op_names_with_numbers","count","new_name","parameter_shape","items","setClear","res","setGenerate","fetch","method","gui_logic.new_operator","random","gui_logic.highlight_operators","item"],"mappings":"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"}