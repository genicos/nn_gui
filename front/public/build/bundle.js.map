{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/Modal.svelte","../../src/define_network_objects.js","../../src/mouse_network_interaction.js","../../src/network_logic.js","../../src/gui_logic.js","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape_attribute_value(value.toString())}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.46.6' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","<script context=\"module\" lang=\"ts\">\n\tlet onTop   //keeping track of which open modal is on top\n\tconst modals={}  //all modals get registered here for easy future access\n\t\n\t// \treturns an object for the modal specified by `id`, which contains the API functions (`open` and `close` )\n\texport function getModal(id=''){\n\t\treturn modals[id]\n\t}\n</script>\n\n<script lang=\"ts\">\nimport {onDestroy} from 'svelte'\n\t\nlet topDiv\nlet visible=false\nlet prevOnTop\nlet closeCallback\n\nexport let id=''\n\nfunction keyPress(ev){\n\t//only respond if the current modal is the top one\n\tif(ev.key==\"Escape\" && onTop==topDiv) close() //ESC\n}\n\n/**  API **/\nfunction open(callback){\n\tcloseCallback=callback\n\tif(visible) return\n\tprevOnTop=onTop\n\tonTop=topDiv\n\twindow.addEventListener(\"keydown\",keyPress)\n\t\n\t//this prevents scrolling of the main window on larger screens\n\tdocument.body.style.overflow=\"hidden\" \n\n\tvisible=true\n\t//Move the modal in the DOM to be the last child of <BODY> so that it can be on top of everything\n\tdocument.body.appendChild(topDiv)\n}\n\t\nfunction close(retVal){\n\tif(!visible) return\n\twindow.removeEventListener(\"keydown\",keyPress)\n\tonTop=prevOnTop\n\tif(onTop==null) document.body.style.overflow=\"\"\n\tvisible=false\n\tif(closeCallback) closeCallback(retVal)\n}\n\t\n//expose the API\nmodals[id]={open,close}\n\t\nonDestroy(()=>{\n\tdelete modals[id]\n\twindow.removeEventListener(\"keydown\",keyPress)\n})\n\t\n</script>\n\n<div id=\"topModal\" class:visible bind:this={topDiv} on:click={()=>close()}>\n\t<div id='modal' on:click|stopPropagation={()=>{}}>\n\t\t<svg id=\"close\" on:click={()=>close()} viewBox=\"0 0 12 12\">\n\t\t\t<circle cx=6 cy=6 r=6 />\n\t\t\t<line x1=3 y1=3 x2=9 y2=9 />\n\t\t\t<line x1=9 y1=3 x2=3 y2=9 />\n\t\t</svg>\n\t\t<div id='modal-content'>\n\t\t\t<slot></slot>\n\t\t</div>\n\t</div>\n</div>\n\n<style>\n\t#topModal {\n\t\tvisibility: hidden;\n\t\tz-index: 9999;\n\t\tposition: fixed;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tbackground: #4448;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t}\n\t#modal {\n\t\tposition: relative;\n\t\tborder-radius: 6px;\n\t\tbackground: white;\n\t\tfilter: drop-shadow(5px 5px 5px #555);\n\t\tpadding: 1em;\n\t}\n\n\t.visible {\n\t\tvisibility: visible !important;\n\t}\n\n    #close {\n\t\tposition: absolute;\n\t\ttop:-12px;\n\t\tright:-12px;\n\t\twidth:24px;\n\t\theight:24px;\n\t\tcursor: pointer;\n\t\tborder-color: rgba(0, 0, 0, 0.8);\n\t\tborder-width: thin;\n\t\tfill: white;\n\t\ttransition: transform 0.3s;\n\t}\t\n\n\t#close:hover {\n\t\tfill: rgba(0, 0, 0, 0.8);\n\t}\n\n\t#close line {\n\t\tstroke: rgba(0, 0, 0, 0.8);\n\t\tstroke-width: 1;\n\t}\n\t#close:hover line {\n\t\tstroke: white;\n\t\tstroke-width: 1;\n\t}\n\n\t#close:focus {\n    \tborder-color: #3399ff;\n    \tbox-shadow: 0 0 0 2px #3399ff;\n  \t}\n\n\t#modal-content {\n\t\tmax-width: calc(100vw - 20px);\n\t\tmax-height: calc(100vh - 20px);\n\t\toverflow: auto;\n\t}\n</style>","\n\n\nexport class Network{\n    constructor(){\n        this.tensors = [] //actual tensor objects\n        this.operators = [] //actual operator objects\n\n        this.input_tensors = []\n        this.param_tensors = []\n        this.output_tensors = []\n        this.truth_tensors = []\n        this.loss = null\n    }\n\n    add_tensor(t){\n        this.tensors.push(t);\n    }\n\n    add_operator(op){\n        \n        var o = op.clone()\n\n        this.operators.push(o);\n        \n        for(let i = 0; i < o.inputs.length; i++){\n            this.tensors[o.inputs[i]].input_to.push(this.operators.length - 1)\n        }\n        \n        for(let i = 0; i < o.outputs.length; i++){\n            this.tensors[o.outputs[i]].output_of = this.operators.length - 1\n        }\n    }\n\n    update_tensors(){\n\n        for(let i = 0; i < this.tensors.length; i++){\n            this.tensors[i].input_to = []\n            this.tensors[i].output_of = null\n        }\n        for(let k = 0; k < this.operators.length; k++){\n\n            for(let i = 0; i < this.operators[k].inputs.length; i++){\n                this.tensors[this.operators[k].inputs[i]].input_to.push(k)\n            }\n            \n            for(let i = 0; i < this.operators[k].outputs.length; i++){\n                this.tensors[this.operators[k].outputs[i]].output_of = k\n            }\n\n        }\n\n    }\n\n    //This function finds all abstraction operators and replaces them with their\n    // inner network\n    expand(){\n        //assumes that network is alright, ok, and doin well\n        //inner networks shouldn't have parameter tensors\n\n        \n        for(let i = 0; i < this.operators.length; i++){\n\n            //finding an abstraction operator to expand\n            if(this.operators[i].func == 0 && this.operators[i].network){\n                \n                //recursively expanding inner networks\n                var inner_net = this.operators[i].network;\n                inner_net.expand();\n\n                //Take out abstraction operator\n                var abstraction = this.operators[i]\n                \n                \n                //add new operators\n                var old_operators_length = this.operators.length\n\n                \n                this.operators[i] = inner_net.operators[0]\n                for(let k = 1; k < inner_net.operators.length; k++){\n                    this.add_operator(inner_net.operators[k])\n                }\n                \n\n                //Loop through each inner net tensor\n                //  this tensor will have a new id under the outer network\n                //    we determine this new id\n                //  in each tensor, find all operators it is associated with\n                //      by checking inputs_to and output_of\n                //    we then update the associations of these operators so that they\n                //      point to the new id\n                for(let k = 0; k < inner_net.tensors.length; k++){\n\n                    //these tensors will have a new id as measured by the outer network\n                    var new_id = k;\n\n                    \n                    if(inner_net.input_tensors.includes(k)){\n                        var index = inner_net.input_tensors.indexOf(k)\n\n                        new_id = abstraction.inputs[index]\n                    }else if(inner_net.output_tensors.includes(k)){\n                        var index = inner_net.output_tensors.indexOf(k)\n\n                        new_id = abstraction.outputs[index]\n                    }else{\n                        this.add_tensor(inner_net.tensors[k])\n                        new_id = this.tensors.length - 1\n                    }\n\n                    \n\n                    //finding all associated operators\n                    for(let j = 0; j < inner_net.tensors[k].input_to.length; j++){\n                        \n                        var index_of_op = inner_net.tensors[k].input_to[j]\n                        var op_index = inner_net.operators[ index_of_op ].inputs.indexOf(k)\n                        \n                        \n\n                        if(index_of_op == 0){\n                            \n                            this.operators[i].inputs[op_index] = new_id\n                        }else{\n                            \n                            this.operators[index_of_op + old_operators_length - 1].inputs[op_index] = new_id\n                        }\n                    }\n                    \n\n                    if(inner_net.tensors[k].output_of || inner_net.tensors[k].output_of == 0){\n\n                        \n                        var index_of_op = inner_net.tensors[k].output_of\n                        var op_index = inner_net.operators[ index_of_op ].outputs.indexOf(k)\n                        \n                        if(index_of_op == 0){\n                            this.operators[i].outputs[op_index] = new_id\n                        }else{\n                            this.operators[index_of_op + old_operators_length - 1].outputs[op_index] = new_id\n                        }\n                    }\n\n\n\n                }\n                \n                this.update_tensors()\n            }\n        }\n        \n    }\n\n    //Peer inside network, for debugging\n    to_string(){\n\n        var str = \"\"\n        \n        str += \"Tensors: \\n\"\n        \n        for(let i = 0; i < this.tensors.length; i++){\n            str += \"\\t\"+i+\":\\n\"\n            if(this.tensors[i].form){\n                str += \"\\t\\tform: \"+String(this.tensors[i].form)+\"\\n\"\n            }\n\n            str += \"\\t\\tinput_to:\\n\"\n            for(let k = 0; k < this.tensors[i].input_to.length; k++){\n                str += \"\\t\\t\\t\" + this.tensors[i].input_to[k] + \"\\n\"\n            }\n            \n\n            str += \"\\t\\toutput_of\\n\"\n            str += \"\\t\\t\\t\"+this.tensors[i].output_of + \"\\n\"\n        }\n\n        str += \"Operators: \\n\"\n        for(let i = 0; i < this.operators.length; i++){\n            str += \"\\t\"+i+\":\\n\"\n\n            str += \"\\t\\tinputs:\\n\"\n            for(let k = 0; k < this.operators[i].inputs.length; k++){\n                str += \"\\t\\t\\t\" + this.operators[i].inputs[k] + \"\\n\"\n            }\n\n            str += \"\\t\\toutputs:\\n\"\n            for(let k = 0; k < this.operators[i].outputs.length; k++){\n                str += \"\\t\\t\\t\" + this.operators[i].outputs[k] + \"\\n\"\n            }\n\n            str += \"\\t\\tfunc: \"+this.operators[i].func + \"\\n\"\n        }\n        \n        str += \"input_tensors:\\n\"\n        for(let i = 0; i < this.input_tensors.length; i++){\n            str += \"\\t\"+this.input_tensors[i]+\"\\n\"\n        }\n        \n        str += \"param_tensors:\\n\"\n        for(let i = 0; i < this.param_tensors.length; i++){\n            str += \"\\t\"+this.param_tensors[i]+\"\\n\"\n        }\n        \n        str += \"output_tensors:\\n\"\n        for(let i = 0; i < this.output_tensors.length; i++){\n            str += \"\\t\"+this.output_tensors[i]+\"\\n\"\n        }\n\n        return str\n    }\n}\n\nexport class Tensor{\n    constructor(live, form) {\n        this.scalar = false //I dont think I ever use this, i just check if this.size == 1\n\n        // live is boolean, it means the tensor has been defined\n        if (live)\n            this.live = live\n        else\n            this.live = false\n\n        // form is like tensorflow shape\n        if(form)\n            this.form = form\n        else\n            form = []\n        \n        //center of tensor square\n        this.x = 0;\n        this.y = 0;\n\n        //Which operators this tensor is an input to\n        this.input_to = []\n        //Which operator this tensor is an output of\n        this.output_of = null;\n    }\n\n    // Number of elements in this tensor\n    calc_size(){\n        if(this.form){\n\n            var size_of_tensor = 1;\n\n            for(let k = 0; k < this.form.length; k++){\n                size_of_tensor *= this.form[k]\n            }\n\n            this.size = size_of_tensor\n            \n        }else{\n            this.size = 0\n        }\n        return this.size\n    }\n}\n\nexport class Operator{\n    constructor(func){\n\n        //input and output tensors of this operator\n        this.inputs = []\n        this.outputs = []\n\n\n        this.func = func\n        this.size = null\n\n        this.network = null\n    }\n\n    //Create deep copy of this operator\n    clone(){\n        var clone = new Operator(this.func)\n        clone.inputs = [...this.inputs]\n        clone.outputs = [...this.outputs]\n        clone.network = this.network\n        return clone\n    }\n\n}\n\nexport class Func{\n    constructor(name, num_inputs){\n        this.name = name\n        this.num_inputs = num_inputs\n    }\n\n    //takes array of tensors, with forms computed\n    //returns array of output forms\n    calc_form(inputs, network){\n        \n        var out = []\n        console.log(this.name)\n\n        switch(this.name){\n            case \"identity\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n            case \"add\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n            case \"subtract\":\n                out.push(network.tensors[inputs[0]].form)\n                break   \n            case \"scale\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n            case \"full\":\n\n                var form1 = network.tensors[inputs[0]].form\n                var form2 = network.tensors[inputs[1]].form\n\n                var form1_total = 1\n                for(let i = 0; i < form1.length; i++){\n                    form1_total *= form1[i]\n                }\n                var form2_total = 1\n                for(let i = 0; i < form2.length; i++){\n                    form2_total *= form2[i]\n                }\n\n                var out_form = []\n                out_form.push(form2_total/form1_total)\n                \n                out.push(out_form)\n                break\n            case \"amass\":\n                var out_form = []\n                out_form.push(1)\n                \n                out.push(out_form)\n                break\n            case \"softmax\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n            case \"hardmax\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n            case \"max\":\n                var out_form = []\n                out_form.push(1)\n                \n                out.push(out_form)\n                break\n            case \"convolution\":\n                form1 = network.tensors[inputs[0]].form\n                form2 = network.tensors[inputs[1]].form\n                var out_form = []\n\n                \n                for(let i = 0; i < form1.length; i++){\n                    if(form2.length <= i){\n                        out_form.push(form1[i])\n                    }else{\n                        out_form.push(form1[i] - form2[i] + 1)\n                    }\n                }\n                \n                out.push(out_form)\n                break\n            \n            case \"squared dist\":\n                out.push([1])\n                break\n            \n            case \"ReLU\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n\n            case \"LeakyReLU\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n\n            case \"Leaky to ReLU\":\n                out.push(network.tensors[inputs[0]].form)\n                break\n                \n\n        }\n\n        return out\n    }\n}\n\nexport var function_table = Array.apply(null, Array(12)).map(function () {})\n\nfunction_table[0] = new Func(\"abstraction\", 0)\nfunction_table[1] = new Func(\"identity\", 1)\nfunction_table[2] = new Func(\"add\", 2)\nfunction_table[3] = new Func(\"subtract\", 2)\nfunction_table[4] = new Func(\"scale\", 2)\nfunction_table[5] = new Func(\"full\", 2)\nfunction_table[6] = new Func(\"amass\", 1)\nfunction_table[7] = new Func(\"softmax\", 1) // softmax exponent base is 2s\nfunction_table[8] = new Func(\"hardmax\", 1)\nfunction_table[9] = new Func(\"max\", 1)\nfunction_table[10] = new Func(\"convolution\", 2)\nfunction_table[11] = new Func(\"squared dist\", 2)\nfunction_table[12] = new Func(\"PReLU\", 1)\nfunction_table[13] = new Func(\"LeakyReLU\", 1) //negative slope is 0.1\nfunction_table[14] = new Func(\"Leaky to ReLU\", 1) //LeakyReLU in training, ReLU in deployment","import {Network} from \"./define_network_objects\"\nimport {Tensor} from \"./define_network_objects\"\nimport {Operator} from \"./define_network_objects\"\n\n\nconst tensorRadius = 10\nvar grid = false\n\n\nfunction get_tensor_bounds(network, operator_index, tensor_index){\n    var ans = {\n        x_min: -9999,\n        x_max: 10000,\n        y_min: -9999,\n        y_max: 10000\n    };\n\n    var o = network.operators[operator_index]\n\n    var output = false;\n    var output_index = 0;\n    for(let i = 0; i < o.outputs.length; i++){\n        if(o.outputs[i] == tensor_index){\n            output = true;\n            output_index = i;\n        }\n    }\n\n    var input_index = 0;\n    if(!output){\n    for(let i = 0; i < o.inputs.length; i++){\n        if(o.inputs[i] == tensor_index){\n            input_index = i;\n        }\n    }\n    }\n\n    var unary = false\n    var side_binary = false\n    var top_binary = false;\n\n    switch(o.func){\n        case 0:\n            break\n        case 1:\n            break\n        case 2: //add\n            side_binary = true;\n            break\n        case 4://subtract\n            side_binary = true;\n            break;\n        case 4://scalse\n            top_binary = true;\n            break;\n        case 5://full\n            top_binary = true;\n            break;\n        case 6://amass\n            unary = true;\n            break;\n        case 7://softmax\n            unary = true;\n            break;\n        case 8://hardmax\n            unary = true;\n            break;\n        case 9://max\n            unary = true;\n            break;\n        case 10://convolution\n            top_binary = true;\n            break;\n        case 11://squared_dist\n            side_binary = true\n            break;\n        case 12://ReLU\n            unary = true\n    }\n\n    var inp0 = network.tensors[o.inputs[0]]\n    var inp1 = network.tensors[o.inputs[1]]\n    var out  = network.tensors[o.outputs[0]]\n\n    if(unary){\n        if(output){\n            ans.x_min = inp0.x + 2 * tensorRadius\n        }else{\n            ans.x_max = out.x - 2 * tensorRadius\n        }\n    }\n\n    if(top_binary){\n        if(output){\n            ans.x_min = inp1.x + 2 * tensorRadius\n            ans.y_min = inp1.y + 2 * tensorRadius\n        }else{\n            if(input_index == 1){ //top tensor\n                ans.x_min = inp0.x + 2 * tensorRadius\n                ans.x_max = out.x - 2 * tensorRadius\n\n                var highest = Math.min(out.y, inp0.y)\n                ans.y_max = highest - 2 * tensorRadius\n            }else{\n                ans.x_max = inp1.x - 2 * tensorRadius\n\n                ans.y_min = inp1.y + 2 * tensorRadius\n            }\n        }\n    }\n    if(side_binary){\n        if(output){\n            var rightest = Math.max(inp0.x, inp1.x)\n            ans.x_min = rightest + 2 * tensorRadius\n        }else{\n            if(input_index == 1){ //top tensor\n                ans.x_max = out.x - 2 * tensorRadius\n\n                var highest = Math.min(out.y, inp0.y)\n                ans.y_max = highest - 2 * tensorRadius\n            }else{\n                ans.x_max = out.x - 2 * tensorRadius\n\n                var lowest = Math.max(out.y, inp1.y)\n                ans.y_min = lowest + 2 * tensorRadius\n            }\n        }\n    }\n\n    return ans;\n}\n\n\n\n\n\n\n\n\nexport function placeTensor(network, tensor_index, x, y){\n\n    network.tensors[tensor_index].x = x\n    network.tensors[tensor_index].y = y\n\n    if(grid){\n        network.tensors[tensor_index].x -= network.tensors[tensor_index].x % (tensorRadius * 2)\n        network.tensors[tensor_index].y -= network.tensors[tensor_index].y % (tensorRadius * 2)\n    }\n\n    var bounds = {\n        x_min: -9999,\n        x_max: 10000,\n        y_min: -9999,\n        y_max: 10000\n    };\n\n    for(let i = 0; i < network.tensors[tensor_index].input_to.length; i++){\n        let ans = get_tensor_bounds(network,network.tensors[tensor_index].input_to[i],tensor_index)\n        bounds.x_min = Math.max(bounds.x_min, ans.x_min)\n        bounds.x_max = Math.min(bounds.x_max, ans.x_max)\n        bounds.y_min = Math.max(bounds.y_min, ans.y_min)\n        bounds.y_max = Math.min(bounds.y_max, ans.y_max)\n    }\n    \n    \n    if(network.tensors[tensor_index].output_of != null){\n        let ans = get_tensor_bounds(network,network.tensors[tensor_index].output_of,tensor_index)\n        bounds.x_min = Math.max(bounds.x_min, ans.x_min)\n        bounds.x_max = Math.min(bounds.x_max, ans.x_max)\n        bounds.y_min = Math.max(bounds.y_min, ans.y_min)\n        bounds.y_max = Math.min(bounds.y_max, ans.y_max)\n    }\n\n    if( network.tensors[tensor_index].x < bounds.x_min){\n        network.tensors[tensor_index].x = bounds.x_min\n    }\n    if( network.tensors[tensor_index].x > bounds.x_max){\n        network.tensors[tensor_index].x = bounds.x_max\n    }\n    if( network.tensors[tensor_index].y < bounds.y_min){\n        network.tensors[tensor_index].y = bounds.y_min\n    }\n    if( network.tensors[tensor_index].y > bounds.y_max){\n        network.tensors[tensor_index].y = bounds.y_max\n    }\n    \n}\n\n\n\n\n\n\n\n//move tensors, accounting for obstructions\nexport function nudgeTensor(network, tensor_index, delta_x, delta_y){\n\n    placeTensor(network, tensor_index,\n         network.tensors[tensor_index].x + delta_x,\n         network.tensors[tensor_index].y + delta_y\n    )\n    \n}\n\n\n// returns list of indices of tensors with mouse hovered over\n//TODO: TENSORRESHAPE\nexport function getHoveredTensorIndices(network, x, y) {\n    \n    var hovered_tensors_list = []\n\n    \n    for (let j = 0; j < network.tensors.length; j++) {\n        if (network.tensors[j].x - tensorRadius < x &&\n            network.tensors[j].x + tensorRadius > x &&\n            network.tensors[j].y - tensorRadius < y &&\n            network.tensors[j].y + tensorRadius > y) \n        {\n            hovered_tensors_list.push(j)\n        }\n    }\n\n    return hovered_tensors_list\n}\n\n\n\n// returns list of indices of Operators with mouse hovered over\n// We define 'hovering over' an operator as having the mouse\n// over the region that is to the right of the leftmost tensor in the operator, \n// and to the left of the rightmost tensor in the operator, \n// and under the topmost...\n\n//TODO: TENSORRESHAPE\n//TODO: notice the plus and minus patterns, these patterns will differ \n// for different operator types\nexport function getHoveredOperatorIndices(network, x, y) {\n\n    var grabbedList = []\n    \n    for (let j = 0; j < network.operators.length; j++) {\n        var this_op = network.operators[j]\n        var x_min =  1000000\n        var x_max = -1000000\n        var y_min =  1000000\n        var y_max = -1000000\n        for(let t = 0; t < this_op.inputs.length; t++){\n            var this_tens = network.tensors[this_op.inputs[t]]\n            x_min = Math.min(this_tens.x + tensorRadius, x_min)\n            x_max = Math.max(this_tens.x - tensorRadius, x_max)\n            y_min = Math.min(this_tens.y + tensorRadius, y_min)\n            y_max = Math.max(this_tens.y + tensorRadius, y_max) \n        }\n        for(let t = 0; t < this_op.outputs.length; t++){\n            var this_tens = network.tensors[this_op.outputs[t]]\n            x_min = Math.min(this_tens.x + tensorRadius, x_min)\n            x_max = Math.max(this_tens.x - tensorRadius, x_max)\n            y_min = Math.min(this_tens.y + tensorRadius, y_min)\n            y_max = Math.max(this_tens.y + tensorRadius, y_max)\n        }\n        \n        \n        if (x_min < x &&\n            x_max > x &&\n            y_min < y &&\n            y_max > y) {\n            grabbedList.push(j)\n        }\n    }\n    \n    return grabbedList\n}\n\n\n\n//intersecting_with_operator(network, op_index, x, y)\n//intersecting_with_tensor(network, t_index, x, y)","import {Network} from \"./define_network_objects\"\nimport {Tensor} from \"./define_network_objects\"\nimport {Operator} from \"./define_network_objects\"\n\n\n\nconst unmergeDist = 20\n\n\nexport function unmergeTensor(network, tensor_index) {\n    var t0 = network.tensors[tensor_index]\n\n    // Save function we are inputting to, and delete that shit\n    var functions = t0.input_to\n    t0.input_to = []\n\n    for (let i = 0; i < functions.length; i++) {\n        var fi = functions[i]\n        var op1 = network.operators[fi]\n\n        // create new tensor\n        var tnewind = network.tensors.length\n        network.add_tensor(new Tensor(true))\n        \n        var todeleteind = op1.inputs.findIndex((elem) => elem == tensor_index)\n        op1.inputs[todeleteind] = tnewind\n\n        // update position\n        network.tensors[tnewind].x = t0.x + unmergeDist\n        network.tensors[tnewind].y = t0.y\n\n        network.tensors[tnewind].input_to = [fi]\n        network.tensors[tnewind].output_of = null\n        network.tensors[tnewind].live = false\n    }\n\n    t0.x -= unmergeDist\n    t0.live = false\n\n}\n\n\n\nexport function mergeTensors(network, tensor_index0, tensor_index1) {\n\n    if (network.tensors[tensor_index0].live && network.tensors[tensor_index1].live) {\n        console.log(\"Both merged tensors are live, so don't do anything.\")\n        return\n    }\n        \n    let t0 = network.tensors[tensor_index0]\n    let t1 = network.tensors[tensor_index1]\n\n    let toDeleteIndex = tensor_index1\n    let noDeleteIndex = tensor_index0 \n\n\n    // t0 is already an output to a function and stays, t1 is an input to a function and is deleted\n    if (t0.output_of != null && t1.output_of == null) {}\n    else if (t1.output_of != null && t0.output_of == null) {\n        var tmp = t1\n        t1 = t0\n        t0 = tmp\n        toDeleteIndex = tensor_index0\n        noDeleteIndex = tensor_index1\n    }\n    else {\n        console.log(\"Error merging, only one input must have an output\")\n        return\n    }\n\n    // check that they aren't input and output to the same function\n    console.log(t0.output_of, t1.input_to)\n    if (t0.output_of == t1.input_to) {\n        console.log(\"Error merging, these are input and output of the same function\")\n        return\n    }\n    \n    let ind = network.operators[t1.input_to].inputs.indexOf(toDeleteIndex)\n    network.operators[t1.input_to].inputs[ind] = noDeleteIndex\n\n    t0.input_to = t1.input_to\n    t0.live = true \n\n    deleteTensor(network, toDeleteIndex)\n}\n\n\nfunction deleteTensor(network, index) {\n    // in operators, decrement input and output indices if greater than deleted indices\n    for (let i = 0; i < network.operators.length; i++) {\n        for (let j = 0; j < network.operators[i].inputs.length; j++) {\n            if (network.operators[i].inputs[j] > index) {\n                network.operators[i].inputs[j] -= 1\n            }\n        }\n        for (let j = 0; j < network.operators[i].outputs.length; j++) {\n            if (network.operators[i].outputs[j] > index) {\n                network.operators[i].outputs[j] -= 1\n            }\n        }\n    }\n\n    // delete relevant tensor\n    return network.tensors.splice(index, 1)\n}","import {Network} from \"./define_network_objects\"\nimport {Tensor} from \"./define_network_objects\"\nimport {Operator} from \"./define_network_objects\"\n\nimport { placeTensor } from \"./mouse_network_interaction\"\nimport {nudgeTensor} from \"./mouse_network_interaction\"\nimport {getHoveredTensorIndices} from \"./mouse_network_interaction\"\nimport {getHoveredOperatorIndices} from \"./mouse_network_interaction\"\n\nimport {unmergeTensor} from \"./network_logic\"\nimport {mergeTensors} from \"./network_logic\"\n\nvar canvas = 0\nvar ctx = 0\n\n\nvar width = 0;\nvar height = 0;\n\nconst tensorRadius = 10\nconst scalarTensorRadius = 5\nconst defaultFunctionLength = 50\n\nvar down = false\nvar draggedIndex = -1\nvar dragged_operator_index = -1\n\n\nvar last_mouseX = 0;\nvar last_mouseY = 0;\nvar mouseX = 0;\nvar mouseY = 0;\n\n\n\nvar last_frame = Date.now()\nvar this_frame = Date.now()\n\nvar networks = []\nvar networkIndex = 0\n\nnetworks.push(new Network())\nnetworks[0].add_tensor(new Tensor(false))\nnetworks[0].tensors[0].x = 200\nnetworks[0].tensors[0].y = 200\n\nnetworks[0].add_tensor(new Tensor(false))\nnetworks[0].tensors[1].x = 100\nnetworks[0].tensors[1].y = 200\n\nnetworks[0].add_tensor(new Tensor(false))\nnetworks[0].tensors[2].x = 150\nnetworks[0].tensors[2].y = 150\nlet op0 = new Operator()\nop0.inputs = [1, 2]\nop0.outputs = [0]\nop0.func = 5\nnetworks[0].add_operator(op0)\nnetworks[0].add_tensor(new Tensor(true))\nnetworks[0].tensors[3].x = 400\nnetworks[0].tensors[3].y = 200\n\nnetworks[0].add_tensor(new Tensor(true))\nnetworks[0].tensors[4].x = 300\nnetworks[0].tensors[4].y = 200\n\nnetworks[0].add_tensor(new Tensor(false))\nnetworks[0].tensors[5].x = 350\nnetworks[0].tensors[5].y = 150\n\nnetworks[0].add_tensor(new Tensor(true))\nnetworks[0].tensors[6].x = 350\nnetworks[0].tensors[6].y = 350\n\nlet op1 = new Operator()\nop1.inputs = [4, 5]\nop1.outputs = [3]\nop1.func = 2\nnetworks[0].add_operator(op1)\n\n\n\nnetworks[0].add_tensor(new Tensor(true))\nnetworks[0].tensors[7].x = 500\nnetworks[0].tensors[7].y = 200\n\nnetworks[0].add_tensor(new Tensor(true))\nnetworks[0].tensors[8].x = 400\nnetworks[0].tensors[8].y = 200\n\nnetworks[0].add_tensor(new Tensor(true))\nnetworks[0].tensors[9].x = 450\nnetworks[0].tensors[9].y = 150\n\nnetworks[0].add_tensor(new Tensor(true))\nnetworks[0].tensors[10].x = 450\nnetworks[0].tensors[10].y = 350\n\nlet op2 = new Operator()\nop2.inputs = [8, 9]\nop2.outputs = [7]\nop2.func = 5\nnetworks[0].add_operator(op2)\n\n\nnetworks[0].add_tensor(new Tensor(true))\nnetworks[0].tensors[11].x = 400\nnetworks[0].tensors[11].y = 400\n\nlet op3 = new Operator()\nop3.inputs = [6]\nop3.outputs = [10]\nop3.func = 7\nnetworks[0].add_operator(op3)\n\n\n\nexport function init() {\n\n    canvas = document.getElementById(\"gui_canvas\")\n    canvas.addEventListener(\"mousedown\", doMouseDown, false)\n    canvas.addEventListener(\"mousemove\", doMouseMove, false)\n    canvas.addEventListener(\"mouseup\", doMouseUp, false)\n    canvas.addEventListener(\"dblclick\", doDoubleClick, false)\n    ctx = canvas.getContext(\"2d\");\n\n    canvas.width = canvas.getBoundingClientRect().width\n    canvas.height = canvas.getBoundingClientRect().height\n\n    width = canvas.width;\n    height = canvas.height;\n\n    last_frame = Date.now()\n    this_frame = Date.now()\n    \n    window.requestAnimationFrame(draw);\n}\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n\nvar seconds = 0;\n\nfunction drawTensor(network, tensorIndex) {\n    let t = network.tensors[tensorIndex]\n\n    if (t.live) {\n        ctx.fillStyle = \"white\"\n        ctx.lineWidth = 1\n        ctx.setLineDash([])\n        ctx.strokeStyle = 'black'\n    }\n    else {\n        ctx.fillStyle = \"rgba(255,255,255,0)\"\n        ctx.lineWidth = 1\n        ctx.setLineDash([3,4])\n        ctx.strokeStyle = 'Grey'\n    }\n\n    ctx.beginPath()\n    if (t.scalar) {\n        ctx.rect(t.x - scalarTensorRadius, t.y - scalarTensorRadius, 2 * scalarTensorRadius, 2 * scalarTensorRadius)\n    }\n    else {\n        ctx.rect(t.x - tensorRadius, t.y - tensorRadius, 2 * tensorRadius, 2 * tensorRadius)\n    }\n    ctx.fill()\n    ctx.stroke()\n}\n\n// here we draw the function naively without checking for tensor positions. That must be handled \n// by movement logic\nfunction drawOperator(network, operatorIndex) {\n    let o = network.operators[operatorIndex]\n    let input1\n    let input2\n    let output\n\n    let functionGradient = ctx.createLinearGradient(0, 0, width, height)\n    functionGradient.addColorStop(0, \"#DE7521\")\n    functionGradient.addColorStop(1, \"#218ADE\")\n\n    ctx.fillStyle = functionGradient\n\n    switch (o.func) {\n        case 0: // abstraction\n            break\n        case 1: // identity\n            break\n        case 2: // add\n            input1 = network.tensors[o.inputs[0]]\n            input2 = network.tensors[o.inputs[1]]\n            output = network.tensors[o.outputs[0]]\n\n            ctx.beginPath()\n            ctx.moveTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y + tensorRadius)\n\n            ctx.lineTo(input1.x + tensorRadius, input1.y + tensorRadius)\n            ctx.lineTo(input1.x + tensorRadius, input1.y - tensorRadius)\n            ctx.closePath()\n            ctx.fill()\n\n            ctx.beginPath()\n            ctx.moveTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y + tensorRadius)\n\n            ctx.lineTo(input2.x + tensorRadius, input2.y + tensorRadius)\n            ctx.lineTo(input2.x + tensorRadius, input2.y - tensorRadius)\n            ctx.closePath()\n            ctx.fill()\n\n\n            break\n        case 3: // subtract\n            input1 = network.tensors[o.inputs[0]]\n            input2 = network.tensors[o.inputs[1]]\n            output = network.tensors[o.outputs[0]]\n\n\n            break\n        case 4: // scale\n            break\n        case 5: // full\n            input1 = network.tensors[o.inputs[0]]\n            input2 = network.tensors[o.inputs[1]]\n            output = network.tensors[o.outputs[0]]\n\n            ctx.beginPath()\n            ctx.moveTo(output.x - tensorRadius, output.y - tensorRadius)\n            ctx.lineTo(output.x - tensorRadius, output.y + tensorRadius)\n\n            ctx.lineTo(input1.x + tensorRadius, input1.y + tensorRadius)\n            ctx.lineTo(input1.x + tensorRadius, input1.y - tensorRadius)\n\n            ctx.lineTo(input2.x - tensorRadius, input2.y + tensorRadius)\n            ctx.lineTo(input2.x + tensorRadius, input2.y + tensorRadius)\n           \n            ctx.closePath()\n            ctx.fill()\n            break\n        case 6: // amass\n            break\n        case 7: // softmax\n            let input = network.tensors[o.inputs[0]]\n            output = network.tensors[o.outputs[0]]\n\n            ctx.beginPath()\n            ctx.moveTo(output.x - tensorRadius, output.y - tensorRadius*0.5)\n            ctx.lineTo(output.x - tensorRadius, output.y + tensorRadius*0.5)\n\n            ctx.lineTo(input.x + tensorRadius, input.y + tensorRadius)\n            ctx.lineTo(input.x + tensorRadius, input.y - tensorRadius)\n        \n            ctx.closePath()\n            ctx.fill()\n\n            break\n        case 8: // hardmax\n            break\n        case 9: // max\n            break\n        case 10: // convolution\n            break\n        case 11: // squared dist\n            break\n        default:\n            console.log(\"Invalid operator types\")\n            break\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar seconds = 0;\n\nfunction draw() {\n    canvas.width = canvas.getBoundingClientRect().width\n    canvas.height = canvas.getBoundingClientRect().height\n    width = canvas.width\n    height = canvas.height\n\n    last_frame = this_frame\n    this_frame = Date.now()\n    var sec = (this_frame - last_frame) / 1000.0\n    seconds += sec;\n\n\n    var delta_x = mouseX - last_mouseX;\n    var delta_y = mouseY - last_mouseY;\n    last_mouseX = mouseX;\n    last_mouseY = mouseY;\n    \n\n    for (let i = 0; i < networks[0].operators.length; i++) {\n        drawOperator(networks[0], i)\n    }\n\n    for (let i = 0; i < networks[0].tensors.length; i++) {\n        drawTensor(networks[0], i)\n    }\n\n\n    if(draggedIndex != -1){\n\n        placeTensor(networks[networkIndex], draggedIndex, mouseX, mouseY)\n\n    }else if(dragged_operator_index != -1){\n        var dragged_op = networks[networkIndex].operators[dragged_operator_index]\n        for(let i = 0; i < dragged_op.inputs.length; i++){\n            nudgeTensor(networks[networkIndex],dragged_op.inputs[i], delta_x, delta_y)\n        }\n        for(let i = 0; i < dragged_op.outputs.length; i++){\n            nudgeTensor(networks[networkIndex],dragged_op.outputs[i], delta_x, delta_y)\n        }\n    }\n\n    window.requestAnimationFrame(draw);\n}\n\n\n\n\n\n\n\n\n\n\n\n\nfunction doDoubleClick(e) {\n\n    let clickedList = getHoveredTensorIndices(networks[networkIndex], mouseX, mouseY)\n    console.log(\"Clicked Indices \", clickedList)\n\n    for (let i = 0; i < clickedList.length; i++) {\n        var clickedIndex = clickedList[i]\n        var t0 = networks[networkIndex].tensors[clickedIndex]\n        if (t0.output_of == null || t0.input_to.length == 0) {\n            t0.live = !t0.live\n        }\n        else {\n            console.log(\"Unmerge\")\n            unmergeTensor(networks[networkIndex], clickedIndex)\n        }\n    }\n}\n\n\nfunction doMouseUp(e) {\n    if(dragged_operator_index != -1){\n        for(let i = 0; i < networks[networkIndex].operators[dragged_operator_index].inputs.length; i++){\n            for(let j = 0; j < networks[networkIndex].tensors.length; j++){\n                \n                var t1_index = networks[networkIndex].operators[dragged_operator_index].inputs[i];\n\n                if(j == t1_index){\n                    continue\n                }\n                var t1 = networks[networkIndex].tensors[t1_index];\n                var t2 = networks[networkIndex].tensors[j];\n\n                if(Math.abs(t1.x - t2.x) < tensorRadius * 2 && Math.abs(t1.y - t2.y) < tensorRadius * 2){\n                    console.log(\"HAp\")\n                    mergeTensors(networks[networkIndex], t1_index, j);\n                }\n            }\n        }\n        for(let i = 0; i < networks[networkIndex].operators[dragged_operator_index].outputs.length; i++){\n            for(let j = 0; j < networks[networkIndex].tensors.length; j++){\n                \n                var t1_index = networks[networkIndex].operators[dragged_operator_index].outputs[i];\n\n                if(j == t1_index){\n                    continue\n                }\n                var t1 = networks[networkIndex].tensors[t1_index];\n                var t2 = networks[networkIndex].tensors[j];\n\n                if(Math.abs(t1.x - t2.x) < tensorRadius * 2 && Math.abs(t1.y - t2.y) < tensorRadius * 2){\n                    console.log(\"HAp\")\n                    mergeTensors(networks[networkIndex], t1_index, j);\n                }\n            }\n        }\n    }\n    \n    down = false\n    draggedIndex = -1\n    dragged_operator_index = -1\n\n    let clickedList = getHoveredTensorIndices(networks[networkIndex], mouseX, mouseY)\n\n    if (clickedList.length >= 2) {\n        mergeTensors(networks[networkIndex], clickedList[0], clickedList[1])\n        // if either tensor are ghosts\n    }\n}\n\nfunction doMouseDown(e) {\n    down = true\n    // console.log(\"Mouse position: \",mouseX,\" \", mouseY)\n    let draggedList = getHoveredTensorIndices(networks[networkIndex], mouseX, mouseY)\n\n    if (draggedList.length != 0) {\n        draggedIndex = draggedList[0]\n    }\n\n    let dragged_operators = getHoveredOperatorIndices(networks[networkIndex], mouseX, mouseY)\n\n    if (dragged_operators.length != 0){\n        dragged_operator_index = dragged_operators[0]\n    }\n}\n\n\nfunction doMouseMove(e) {\n    if (e.offsetX) {\n        mouseX = e.offsetX;\n        mouseY = e.offsetY;\n    }\n    else if (e.layerX) {\n        mouseX = e.layerX;\n        mouseY = e.layerY;\n    }\n\n}","<script>\n\timport Modal,{getModal} from './Modal.svelte'\n    import { onMount } from \"svelte\";\n\n\timport \"./define_network_objects\"\n    import * as gui_logic from \"./gui_logic\"\n\n    onMount(() => {\n        gui_logic.init()\n    })\n\n\t// Constants\n    let bar_logo = './transparent_bar_logo.png'; // Neurula logo for nav bar\n    let home_link = 'http://127.0.0.1:8000'; // Main domain \n\tlet dropdownTrigger;\n\tlet clear_selection; // Value for Modal choice for clearing\n\tlet generate_selection; // Value for Modal choice for which code to generate network in\n\n\t// Temporary list of operators (as placeholder for standard neural network)\n\tconst toolbarItems = [\n\t\t{operator_type: \"Dense\"},\n\t\t{operator_type: \"PReLU\"},\n\t\t{operator_type: \"Softmax\"},\n\t\t{operator_type: \"Convolutional\"},\n\t\t{operator_type: \"Dense\"},\n\t\t{operator_type: \"PReLU\"},\n\t\t{operator_type: \"Softmax\"},\n\t\t{operator_type: \"Convolutional\"},\n\t\t{operator_type: \"Dense\"},\n\t\t{operator_type: \"PReLU\"},\n\t\t{operator_type: \"Softmax\"},\n\t\t{operator_type: \"Convolutional\"},\n\t\t{operator_type: \"Dense\"},\n\t\t{operator_type: \"PReLU\"},\n\t\t{operator_type: \"Softmax\"},\n\t\t{operator_type: \"Convolutional\"}\n\t];\n\n\t// Function for nav bar Modal options\n\tfunction setClear(res){\n\t\tclear_selection=res\n\t}\n\tfunction setGenerate(res){\n\t\tgenerate_selection=res\n\t}\n  \n</script>\n  \n<main>\n\t<!-- Navigation Bar (At top of page) -->\n\t<nav>\n\t\t<div class=\"inner\">\n\t\t\t<ul class=\"navbar-list\">\n\t\t\t\t<li><a href={home_link}><img src={bar_logo} alt=\"Neurula logo.\" style=\"max-height: 40px\" ></a></li>\n\t\t\t\t<li><a href={undefined} class=\"nav-button\" on:click={()=>getModal('clear').open(setClear)}>Clear Canvas</a></li>\n\t\t\t\t<li><a href={undefined} class=\"nav-button\" on:click={()=>getModal('generate').open(setGenerate)}>Generate Code</a></li>\n\t\t\t\t<li><a href={undefined} class=\"nav-button\" on:click={()=>getModal('tutorial').open()}>?</a></li>\n\t\t\t</ul>\n\t\t</div>\n\t</nav>\n\n\t<!-- Neural Network Workspace -->\n\t<div id=\"workspace\">\n\t\t<!-- Workspace Toolbar -->\n\t\t<div id=\"toolbar\">\n\t\t\t<div id=\"toolbar_title\">\n\t\t\t\t\t<p><strong>Toolbar</strong></p>\n\t\t\t</div>\n\t\t\t<div id=\"toolbar_list\">\n\t\t\t\t<div id=\"toolbar_add_operator\">\n\t\t\t\t\t<i>Add operator</i>\n\t\t\t\t</div>\n\t\t\t\t<!-- Displays list of placeholder navItems as set in <script> -->\n\t\t\t\t{#each toolbarItems as item}\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<p>{item.operator_type}</p>\n\t\t\t\t\t</li>\n\t\t\t\t{/each}\n\t\t\t</div>\n\t\t</div>\n\n\t\t<!-- Workspace Canvas (For drawing the neural network) -->\n        <div id=\"canvas_container\">\n            <canvas id=\"gui_canvas\"></canvas>\n        </div>\n    </div>\n\n\t<!-- Modal Popups for Navigation Bar-->\n\t<Modal id=\"clear\">\n\t\tAre you sure?\n\t\t<!-- Passing a value back to the callback function; Choice is saved in 'clear_selection' -->\n\t\t<button class=\"green\" on:click={()=>getModal('clear').close(1)}>\n\t\t\tYes\n\t\t</button>\n\t\t<button class=\"green\" on:click={()=>getModal('clear').close(0)}>\n\t\t\tNo\n\t\t</button>\n\t</Modal>\n\t<Modal id=\"generate\">\n\t\tHow would you like to download your neural network?\n\t\t<!-- Passing a value back to the callback function; Choice is saved in 'generate_selection' -->\n\t\t<button class=\"green\" on:click={()=>getModal('generate').close(1)}>\n\t\t\tPytorch\n\t\t</button>\n\t\t<button class=\"green\" on:click={()=>getModal('generate').close(2)}>\n\t\t\tTensorflow\n\t\t</button>\n\t</Modal>\n\t<Modal id=\"tutorial\">\n\t\t<h1>Tutorial</h1>\n\t</Modal>\n\n</main>\n\n<style>\n\tmain {\n\t\tmargin: 0px;\n\t}\n\tnav {\n\t\tbackground-color: rgba(0, 0, 0, 0.8);\n\t\tfont-family: \"Helvetica Neue\", \"Helvetica\", \"Arial\", sans-serif;\n\t\theight: 60px;\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tborder-radius: 0.4em;\n\t}  \n\n\t.inner {\n\t\tmax-width: 980px;\n\t\tpadding-left: 20px;\n\t\tpadding-right: 20px;\n\t\tmargin: auto;\n\t\tbox-sizing: border-box;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\theight: 100%;\n\t}\n  \n\t.navbar-list {\n\t\tdisplay: none;\n\t\twidth: 100%;\n\t\tjustify-content: space-between;\n\t\tmargin: 0;\n\t\tpadding: 0 40px;\n\t}\n  \n\t.navbar-list li {\n\t\tlist-style-type: none;\n\t}\n\n\ta.nav-button {\n\t\tdisplay: inline-block;\n\t\tpadding: 0.5em 1.25em;\n\t\tborder: 0.1em solid #FFFFFF;\n\t\tmargin: 0;\n\t\tborder-radius: 0.4em;\n\t\tbox-sizing: border-box;\n\t\ttext-decoration: none;\n\t\tfont-family: 'Roboto', sans-serif;\n\t\tfont-weight: 300;\n\t\tfont-size: 15px;\n\t\tcolor: #FFFFFF;\n\t\ttext-align: center;\n\t\ttransition: all 0.4s;\n\t}\n\n\ta.nav-button:hover {\n\t\tcolor: rgba(0, 0, 0, 0.8);\n\t\tbackground-color: #FFFFFF;\n\t}\n\n\t#workspace{\n        height: 100%;\n\t\tmargin: 100px;\n\t\tborder-radius: 0.4em;\n\t\tbox-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n    }\n\n    #toolbar {\n        float: left;\n        height: 505px;\n        width: 200px;\n\t\tfont-family: 'Roboto', sans-serif;\n\t\tborder-radius: 0.4em 0em 0em 0.4em;\n\t\tbackground-color: white;\n        display: flex;\n        flex-flow: column;\n    }\n\n\t#toolbar_title {\n\t\tbackground-color: #39c0ba;\n\t\tcolor: white;\n\t\tpadding-left: 10px;\n\t\tborder-radius: 0.4em 0em 0em 0em;\n\t}\n\n\t#toolbar_list {\n\t\tmargin-left: 10px;\n\t\tpadding-top: 10px;\n\t\toverflow-y: scroll;\n\t}\n\n\t#toolbar li {\n\t\tlist-style-type: none;\n\t}\n\n    #toolbar_add_operator{\n        flex: 1 1 auto;\n    }\n\n    #canvas_container{\n        overflow: hidden;\n\t\tborder-radius: 0em 0.4em 0.4em 0em;\n    }\n\n    #gui_canvas{\n        width: 100%;\n        height: 500px;\n    }\n  \n\t@media only screen and (min-width: 767px) {\n\t\ta.nav-button{\n\t\t\tdisplay: block;\n\t\t\tmargin: 0.4em auto;\n\t\t}\n\n\t\t.navbar-list {\n\t\t\tdisplay: flex;\n\t\t\tpadding: 0;\n\t\t}\n\n\t\t.navbar-list a {\n\t\t\tdisplay: inline-flex;\n\t\t}\n\t}\n</style>","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {\n\t\tname: 'world'\n\t}\n});\n\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","src_url_equal_anchor","current_component","get_slot_context","definition","ctx","$$scope","tar","src","k","assign","slice","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","svg_element","createElementNS","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","toggle_class","toggle","classList","set_current_component","component","get_current_component","Error","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","seen_callbacks","Set","flushidx","flush","saved_component","length","update","$$","pop","i","callback","has","add","clear","fragment","before_update","dirty","p","after_update","outroing","onTop","transition_in","block","local","delete","transition_out","o","outros","c","d","create_component","mount_component","customElement","on_mount","on_destroy","m","new_on_destroy","map","filter","destroy_component","detaching","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","type","index","indexOf","splice","$set","$$props","obj","$$set","keys","slot_ctx","div2","div1","svg","circle","line0","line1","div0","stopPropagation","call","slot","slot_definition","slot_changes","get_slot_context_fn","slot_context","lets","undefined","merged","len","Math","max","modals","getModal","id","topDiv","prevOnTop","closeCallback","visible","keyPress","ev","key","close","retVal","window","body","style","overflow","$$invalidate","open","$$value","Tensor","constructor","live","form","scalar","x","y","input_to","output_of","calc_size","size_of_tensor","size","Operator","func","inputs","outputs","network","clone","Func","num_inputs","calc_form","out","console","log","tensors","form1","form2","form1_total","form2_total","out_form","function_table","apply","tensorRadius","get_tensor_bounds","operator_index","tensor_index","ans","x_min","x_max","y_min","y_max","operators","output","input_index","unary","side_binary","top_binary","inp0","inp1","highest","min","rightest","lowest","placeTensor","bounds","nudgeTensor","delta_x","delta_y","getHoveredTensorIndices","hovered_tensors_list","j","unmergeTensor","t0","functions","fi","op1","tnewind","add_tensor","todeleteind","findIndex","elem","mergeTensors","tensor_index0","tensor_index1","t1","toDeleteIndex","noDeleteIndex","tmp","ind","deleteTensor","canvas","width","height","draggedIndex","dragged_operator_index","last_mouseX","last_mouseY","mouseX","mouseY","networks","input_tensors","param_tensors","output_tensors","truth_tensors","loss","t","add_operator","op","update_tensors","expand","inner_net","abstraction","old_operators_length","new_id","includes","index_of_op","op_index","to_string","str","String","op0","op2","op3","drawTensor","tensorIndex","fillStyle","lineWidth","setLineDash","strokeStyle","beginPath","rect","stroke","drawOperator","operatorIndex","input1","input2","functionGradient","createLinearGradient","addColorStop","moveTo","lineTo","closePath","input","draw","getBoundingClientRect","dragged_op","requestAnimationFrame","doDoubleClick","e","clickedList","clickedIndex","doMouseUp","t1_index","t2","abs","doMouseDown","draggedList","dragged_operators","grabbedList","this_op","this_tens","getHoveredOperatorIndices","doMouseMove","offsetX","offsetY","layerX","layerY","t0_value","operator_type","li","button0","button1","h1","element_src","url","important","bar_logo","href","img","img_src_value","removeProperty","setProperty","home_link","main","nav","ul","li0","a0","li1","a1","li2","a2","li3","a3","div6","div4","div3","div5","iterations","getElementById","getContext","setClear","res","setGenerate"],"mappings":"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"}